
ART_LED_PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a6c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008d04  08008d04  00009d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008d5c  08008d5c  00009d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08008d60  08008d60  00009d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000108  24000000  08008d64  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001c08  24000108  08008e6c  0000a108  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24001d10  08008e6c  0000ad10  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000a108  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012f6c  00000000  00000000  0000a136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000030f4  00000000  00000000  0001d0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000e80  00000000  00000000  00020198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000ac8  00000000  00000000  00021018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038459  00000000  00000000  00021ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013f1c  00000000  00000000  00059f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001559ba  00000000  00000000  0006de55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001c380f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003a24  00000000  00000000  001c3854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006a  00000000  00000000  001c7278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000108 	.word	0x24000108
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008cec 	.word	0x08008cec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400010c 	.word	0x2400010c
 80002d4:	08008cec 	.word	0x08008cec

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	volatile uint32_t per_ms= 500;
 80002de:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80002e2:	607b      	str	r3, [r7, #4]
	static const uint16_t LED_PIN = GPIO_PIN_3;

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002e4:	f000 f8ec 	bl	80004c0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e8:	f000 fa5e 	bl	80007a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ec:	f000 f838 	bl	8000360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f0:	f000 f8a2 	bl	8000438 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80002f4:	f007 ffac 	bl	8008250 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_PORT , LED_PIN , GPIO_PIN_RESET);
 80002f8:	4b16      	ldr	r3, [pc, #88]	@ (8000354 <main+0x7c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a16      	ldr	r2, [pc, #88]	@ (8000358 <main+0x80>)
 80002fe:	8811      	ldrh	r1, [r2, #0]
 8000300:	2200      	movs	r2, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f000 fe4a 	bl	8000f9c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t most = HAL_GetTick();
 8000308:	f000 fad4 	bl	80008b4 <HAL_GetTick>
 800030c:	60b8      	str	r0, [r7, #8]
	  if((int32_t)(most-kov_kapcs_ido)>=0)
 800030e:	4b13      	ldr	r3, [pc, #76]	@ (800035c <main+0x84>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	68ba      	ldr	r2, [r7, #8]
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	dbf6      	blt.n	8000308 <main+0x30>
	  {
		  HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 800031a:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <main+0x7c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a0e      	ldr	r2, [pc, #56]	@ (8000358 <main+0x80>)
 8000320:	8812      	ldrh	r2, [r2, #0]
 8000322:	4611      	mov	r1, r2
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fe52 	bl	8000fce <HAL_GPIO_TogglePin>
		  uint32_t per = per_ms;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	60fb      	str	r3, [r7, #12]
		  if(per<50) per = 50;
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2b31      	cmp	r3, #49	@ 0x31
 8000332:	d801      	bhi.n	8000338 <main+0x60>
 8000334:	2332      	movs	r3, #50	@ 0x32
 8000336:	60fb      	str	r3, [r7, #12]
		  if(per>2000) per = 2000;
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800033e:	d902      	bls.n	8000346 <main+0x6e>
 8000340:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000344:	60fb      	str	r3, [r7, #12]
		  kov_kapcs_ido = most + per;
 8000346:	68ba      	ldr	r2, [r7, #8]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	4413      	add	r3, r2
 800034c:	4a03      	ldr	r2, [pc, #12]	@ (800035c <main+0x84>)
 800034e:	6013      	str	r3, [r2, #0]
  {
 8000350:	e7da      	b.n	8000308 <main+0x30>
 8000352:	bf00      	nop
 8000354:	24000000 	.word	0x24000000
 8000358:	08008d4a 	.word	0x08008d4a
 800035c:	24000124 	.word	0x24000124

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b09c      	sub	sp, #112	@ 0x70
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800036a:	224c      	movs	r2, #76	@ 0x4c
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f008 fc90 	bl	8008c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2220      	movs	r2, #32
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f008 fc8a 	bl	8008c94 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000380:	2002      	movs	r0, #2
 8000382:	f002 f8df 	bl	8002544 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000386:	2300      	movs	r3, #0
 8000388:	603b      	str	r3, [r7, #0]
 800038a:	4b29      	ldr	r3, [pc, #164]	@ (8000430 <SystemClock_Config+0xd0>)
 800038c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800038e:	4a28      	ldr	r2, [pc, #160]	@ (8000430 <SystemClock_Config+0xd0>)
 8000390:	f023 0301 	bic.w	r3, r3, #1
 8000394:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000396:	4b26      	ldr	r3, [pc, #152]	@ (8000430 <SystemClock_Config+0xd0>)
 8000398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	603b      	str	r3, [r7, #0]
 80003a0:	4b24      	ldr	r3, [pc, #144]	@ (8000434 <SystemClock_Config+0xd4>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80003a8:	4a22      	ldr	r2, [pc, #136]	@ (8000434 <SystemClock_Config+0xd4>)
 80003aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b20      	ldr	r3, [pc, #128]	@ (8000434 <SystemClock_Config+0xd4>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003b8:	603b      	str	r3, [r7, #0]
 80003ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003bc:	bf00      	nop
 80003be:	4b1d      	ldr	r3, [pc, #116]	@ (8000434 <SystemClock_Config+0xd4>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003ca:	d1f8      	bne.n	80003be <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80003cc:	2322      	movs	r3, #34	@ 0x22
 80003ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003d0:	2301      	movs	r3, #1
 80003d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d4:	2340      	movs	r3, #64	@ 0x40
 80003d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003d8:	2301      	movs	r3, #1
 80003da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003dc:	2300      	movs	r3, #0
 80003de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003e4:	4618      	mov	r0, r3
 80003e6:	f002 f8f7 	bl	80025d8 <HAL_RCC_OscConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80003f0:	f000 f892 	bl	8000518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f4:	233f      	movs	r3, #63	@ 0x3f
 80003f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2101      	movs	r1, #1
 8000418:	4618      	mov	r0, r3
 800041a:	f002 fd37 	bl	8002e8c <HAL_RCC_ClockConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000424:	f000 f878 	bl	8000518 <Error_Handler>
  }
}
 8000428:	bf00      	nop
 800042a:	3770      	adds	r7, #112	@ 0x70
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	58000400 	.word	0x58000400
 8000434:	58024800 	.word	0x58024800

08000438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b088      	sub	sp, #32
 800043c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043e:	f107 030c 	add.w	r3, r7, #12
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
 800044c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800044e:	4b1a      	ldr	r3, [pc, #104]	@ (80004b8 <MX_GPIO_Init+0x80>)
 8000450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000454:	4a18      	ldr	r2, [pc, #96]	@ (80004b8 <MX_GPIO_Init+0x80>)
 8000456:	f043 0310 	orr.w	r3, r3, #16
 800045a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800045e:	4b16      	ldr	r3, [pc, #88]	@ (80004b8 <MX_GPIO_Init+0x80>)
 8000460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000464:	f003 0310 	and.w	r3, r3, #16
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046c:	4b12      	ldr	r3, [pc, #72]	@ (80004b8 <MX_GPIO_Init+0x80>)
 800046e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000472:	4a11      	ldr	r2, [pc, #68]	@ (80004b8 <MX_GPIO_Init+0x80>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800047c:	4b0e      	ldr	r3, [pc, #56]	@ (80004b8 <MX_GPIO_Init+0x80>)
 800047e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	2108      	movs	r1, #8
 800048e:	480b      	ldr	r0, [pc, #44]	@ (80004bc <MX_GPIO_Init+0x84>)
 8000490:	f000 fd84 	bl	8000f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000494:	2308      	movs	r3, #8
 8000496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004a4:	f107 030c 	add.w	r3, r7, #12
 80004a8:	4619      	mov	r1, r3
 80004aa:	4804      	ldr	r0, [pc, #16]	@ (80004bc <MX_GPIO_Init+0x84>)
 80004ac:	f000 fbc6 	bl	8000c3c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004b0:	bf00      	nop
 80004b2:	3720      	adds	r7, #32
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	58024400 	.word	0x58024400
 80004bc:	58021000 	.word	0x58021000

080004c0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004c6:	463b      	mov	r3, r7
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80004d2:	f000 fb3b 	bl	8000b4c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004d6:	2301      	movs	r3, #1
 80004d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80004da:	2300      	movs	r3, #0
 80004dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80004de:	2300      	movs	r3, #0
 80004e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80004e2:	231f      	movs	r3, #31
 80004e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80004e6:	2387      	movs	r3, #135	@ 0x87
 80004e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80004ee:	2300      	movs	r3, #0
 80004f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004f2:	2301      	movs	r3, #1
 80004f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80004f6:	2301      	movs	r3, #1
 80004f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80004fa:	2300      	movs	r3, #0
 80004fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80004fe:	2300      	movs	r3, #0
 8000500:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000502:	463b      	mov	r3, r7
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fb59 	bl	8000bbc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800050a:	2004      	movs	r0, #4
 800050c:	f000 fb36 	bl	8000b7c <HAL_MPU_Enable>

}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <Error_Handler+0x8>

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052a:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <HAL_MspInit+0x30>)
 800052c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000530:	4a08      	ldr	r2, [pc, #32]	@ (8000554 <HAL_MspInit+0x30>)
 8000532:	f043 0302 	orr.w	r3, r3, #2
 8000536:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800053a:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <HAL_MspInit+0x30>)
 800053c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000540:	f003 0302 	and.w	r3, r3, #2
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	58024400 	.word	0x58024400

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <NMI_Handler+0x4>

08000560 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <HardFault_Handler+0x4>

08000568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <MemManage_Handler+0x4>

08000570 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <BusFault_Handler+0x4>

08000578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <UsageFault_Handler+0x4>

08000580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ae:	f000 f96d 	bl	800088c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80005bc:	4802      	ldr	r0, [pc, #8]	@ (80005c8 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 80005be:	f000 fe61 	bl	8001284 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	2400160c 	.word	0x2400160c

080005cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80005d0:	4802      	ldr	r0, [pc, #8]	@ (80005dc <OTG_FS_IRQHandler+0x10>)
 80005d2:	f000 fe57 	bl	8001284 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	2400160c 	.word	0x2400160c

080005e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e4:	4b43      	ldr	r3, [pc, #268]	@ (80006f4 <SystemInit+0x114>)
 80005e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005ea:	4a42      	ldr	r2, [pc, #264]	@ (80006f4 <SystemInit+0x114>)
 80005ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b40      	ldr	r3, [pc, #256]	@ (80006f8 <SystemInit+0x118>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b3d      	ldr	r3, [pc, #244]	@ (80006f8 <SystemInit+0x118>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a3b      	ldr	r2, [pc, #236]	@ (80006f8 <SystemInit+0x118>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b3a      	ldr	r3, [pc, #232]	@ (80006fc <SystemInit+0x11c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <SystemInit+0x11c>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b37      	ldr	r3, [pc, #220]	@ (80006fc <SystemInit+0x11c>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b36      	ldr	r3, [pc, #216]	@ (80006fc <SystemInit+0x11c>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	4935      	ldr	r1, [pc, #212]	@ (80006fc <SystemInit+0x11c>)
 8000628:	4b35      	ldr	r3, [pc, #212]	@ (8000700 <SystemInit+0x120>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <SystemInit+0x118>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b2f      	ldr	r3, [pc, #188]	@ (80006f8 <SystemInit+0x118>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a2d      	ldr	r2, [pc, #180]	@ (80006f8 <SystemInit+0x118>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <SystemInit+0x11c>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b2a      	ldr	r3, [pc, #168]	@ (80006fc <SystemInit+0x11c>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <SystemInit+0x11c>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <SystemInit+0x11c>)
 800065e:	4a29      	ldr	r2, [pc, #164]	@ (8000704 <SystemInit+0x124>)
 8000660:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <SystemInit+0x11c>)
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <SystemInit+0x128>)
 8000666:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <SystemInit+0x11c>)
 800066a:	4a28      	ldr	r2, [pc, #160]	@ (800070c <SystemInit+0x12c>)
 800066c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <SystemInit+0x11c>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <SystemInit+0x11c>)
 8000676:	4a25      	ldr	r2, [pc, #148]	@ (800070c <SystemInit+0x12c>)
 8000678:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <SystemInit+0x11c>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <SystemInit+0x11c>)
 8000682:	4a22      	ldr	r2, [pc, #136]	@ (800070c <SystemInit+0x12c>)
 8000684:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <SystemInit+0x11c>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <SystemInit+0x11c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a1a      	ldr	r2, [pc, #104]	@ (80006fc <SystemInit+0x11c>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <SystemInit+0x11c>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <SystemInit+0x130>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000714 <SystemInit+0x134>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <SystemInit+0x138>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <SystemInit+0x11c>)
 80006b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d113      	bne.n	80006e8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <SystemInit+0x11c>)
 80006c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006c6:	4a0d      	ldr	r2, [pc, #52]	@ (80006fc <SystemInit+0x11c>)
 80006c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <SystemInit+0x13c>)
 80006d2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006d6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006d8:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <SystemInit+0x11c>)
 80006da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006de:	4a07      	ldr	r2, [pc, #28]	@ (80006fc <SystemInit+0x11c>)
 80006e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80006e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00
 80006f8:	52002000 	.word	0x52002000
 80006fc:	58024400 	.word	0x58024400
 8000700:	eaf6ed7f 	.word	0xeaf6ed7f
 8000704:	02020200 	.word	0x02020200
 8000708:	01ff0000 	.word	0x01ff0000
 800070c:	01010280 	.word	0x01010280
 8000710:	5c001000 	.word	0x5c001000
 8000714:	ffff0000 	.word	0xffff0000
 8000718:	51008108 	.word	0x51008108
 800071c:	52004000 	.word	0x52004000

08000720 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <ExitRun0Mode+0x2c>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	4a08      	ldr	r2, [pc, #32]	@ (800074c <ExitRun0Mode+0x2c>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000730:	bf00      	nop
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <ExitRun0Mode+0x2c>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800073a:	2b00      	cmp	r3, #0
 800073c:	d0f9      	beq.n	8000732 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	58024800 	.word	0x58024800

08000750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000750:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800078c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000754:	f7ff ffe4 	bl	8000720 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000758:	f7ff ff42 	bl	80005e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480c      	ldr	r0, [pc, #48]	@ (8000790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800075e:	490d      	ldr	r1, [pc, #52]	@ (8000794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000760:	4a0d      	ldr	r2, [pc, #52]	@ (8000798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0a      	ldr	r2, [pc, #40]	@ (800079c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000774:	4c0a      	ldr	r4, [pc, #40]	@ (80007a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000782:	f008 fa8f 	bl	8008ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000786:	f7ff fda7 	bl	80002d8 <main>
  bx  lr
 800078a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800078c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000790:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000794:	24000108 	.word	0x24000108
  ldr r2, =_sidata
 8000798:	08008d64 	.word	0x08008d64
  ldr r2, =_sbss
 800079c:	24000108 	.word	0x24000108
  ldr r4, =_ebss
 80007a0:	24001d10 	.word	0x24001d10

080007a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC3_IRQHandler>
	...

080007a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ae:	2003      	movs	r0, #3
 80007b0:	f000 f98c 	bl	8000acc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80007b4:	f002 fd20 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80007b8:	4602      	mov	r2, r0
 80007ba:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <HAL_Init+0x68>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	0a1b      	lsrs	r3, r3, #8
 80007c0:	f003 030f 	and.w	r3, r3, #15
 80007c4:	4913      	ldr	r1, [pc, #76]	@ (8000814 <HAL_Init+0x6c>)
 80007c6:	5ccb      	ldrb	r3, [r1, r3]
 80007c8:	f003 031f 	and.w	r3, r3, #31
 80007cc:	fa22 f303 	lsr.w	r3, r2, r3
 80007d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <HAL_Init+0x68>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	4a0e      	ldr	r2, [pc, #56]	@ (8000814 <HAL_Init+0x6c>)
 80007dc:	5cd3      	ldrb	r3, [r2, r3]
 80007de:	f003 031f 	and.w	r3, r3, #31
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	fa22 f303 	lsr.w	r3, r2, r3
 80007e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000818 <HAL_Init+0x70>)
 80007ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80007ec:	4a0b      	ldr	r2, [pc, #44]	@ (800081c <HAL_Init+0x74>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007f2:	200f      	movs	r0, #15
 80007f4:	f000 f814 	bl	8000820 <HAL_InitTick>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e002      	b.n	8000808 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000802:	f7ff fe8f 	bl	8000524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58024400 	.word	0x58024400
 8000814:	08008d4c 	.word	0x08008d4c
 8000818:	24000008 	.word	0x24000008
 800081c:	24000004 	.word	0x24000004

08000820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000828:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <HAL_InitTick+0x60>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d101      	bne.n	8000834 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000830:	2301      	movs	r3, #1
 8000832:	e021      	b.n	8000878 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <HAL_InitTick+0x64>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <HAL_InitTick+0x60>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f971 	bl	8000b32 <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e00e      	b.n	8000878 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d80a      	bhi.n	8000876 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 f93b 	bl	8000ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4a06      	ldr	r2, [pc, #24]	@ (8000888 <HAL_InitTick+0x68>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	24000010 	.word	0x24000010
 8000884:	24000004 	.word	0x24000004
 8000888:	2400000c 	.word	0x2400000c

0800088c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_IncTick+0x20>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <HAL_IncTick+0x24>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a04      	ldr	r2, [pc, #16]	@ (80008b0 <HAL_IncTick+0x24>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	24000010 	.word	0x24000010
 80008b0:	24000128 	.word	0x24000128

080008b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b03      	ldr	r3, [pc, #12]	@ (80008c8 <HAL_GetTick+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	24000128 	.word	0x24000128

080008cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d4:	f7ff ffee 	bl	80008b4 <HAL_GetTick>
 80008d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e4:	d005      	beq.n	80008f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <HAL_Delay+0x44>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	4413      	add	r3, r2
 80008f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008f2:	bf00      	nop
 80008f4:	f7ff ffde 	bl	80008b4 <HAL_GetTick>
 80008f8:	4602      	mov	r2, r0
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	429a      	cmp	r2, r3
 8000902:	d8f7      	bhi.n	80008f4 <HAL_Delay+0x28>
  {
  }
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	24000010 	.word	0x24000010

08000914 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000918:	4b03      	ldr	r3, [pc, #12]	@ (8000928 <HAL_GetREVID+0x14>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	0c1b      	lsrs	r3, r3, #16
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	5c001000 	.word	0x5c001000

0800092c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800093c:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <__NVIC_SetPriorityGrouping+0x40>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000948:	4013      	ands	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	4313      	orrs	r3, r2
 8000958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095a:	4a04      	ldr	r2, [pc, #16]	@ (800096c <__NVIC_SetPriorityGrouping+0x40>)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	60d3      	str	r3, [r2, #12]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00
 8000970:	05fa0000 	.word	0x05fa0000

08000974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000978:	4b04      	ldr	r3, [pc, #16]	@ (800098c <__NVIC_GetPriorityGrouping+0x18>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	f003 0307 	and.w	r3, r3, #7
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800099a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	db0b      	blt.n	80009ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	f003 021f 	and.w	r2, r3, #31
 80009a8:	4907      	ldr	r1, [pc, #28]	@ (80009c8 <__NVIC_EnableIRQ+0x38>)
 80009aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ae:	095b      	lsrs	r3, r3, #5
 80009b0:	2001      	movs	r0, #1
 80009b2:	fa00 f202 	lsl.w	r2, r0, r2
 80009b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000e100 	.word	0xe000e100

080009cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	db0a      	blt.n	80009f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	490c      	ldr	r1, [pc, #48]	@ (8000a18 <__NVIC_SetPriority+0x4c>)
 80009e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ea:	0112      	lsls	r2, r2, #4
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f4:	e00a      	b.n	8000a0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4908      	ldr	r1, [pc, #32]	@ (8000a1c <__NVIC_SetPriority+0x50>)
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	3b04      	subs	r3, #4
 8000a04:	0112      	lsls	r2, r2, #4
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	440b      	add	r3, r1
 8000a0a:	761a      	strb	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b089      	sub	sp, #36	@ 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f1c3 0307 	rsb	r3, r3, #7
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	bf28      	it	cs
 8000a3e:	2304      	movcs	r3, #4
 8000a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3304      	adds	r3, #4
 8000a46:	2b06      	cmp	r3, #6
 8000a48:	d902      	bls.n	8000a50 <NVIC_EncodePriority+0x30>
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	e000      	b.n	8000a52 <NVIC_EncodePriority+0x32>
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a68:	f04f 31ff 	mov.w	r1, #4294967295
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	43d9      	mvns	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	4313      	orrs	r3, r2
         );
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3724      	adds	r7, #36	@ 0x24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a98:	d301      	bcc.n	8000a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00f      	b.n	8000abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <SysTick_Config+0x40>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f7ff ff8e 	bl	80009cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab0:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <SysTick_Config+0x40>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab6:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <SysTick_Config+0x40>)
 8000ab8:	2207      	movs	r2, #7
 8000aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ff29 	bl	800092c <__NVIC_SetPriorityGrouping>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b086      	sub	sp, #24
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000af0:	f7ff ff40 	bl	8000974 <__NVIC_GetPriorityGrouping>
 8000af4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	6978      	ldr	r0, [r7, #20]
 8000afc:	f7ff ff90 	bl	8000a20 <NVIC_EncodePriority>
 8000b00:	4602      	mov	r2, r0
 8000b02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff5f 	bl	80009cc <__NVIC_SetPriority>
}
 8000b0e:	bf00      	nop
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff33 	bl	8000990 <__NVIC_EnableIRQ>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ffa4 	bl	8000a88 <SysTick_Config>
 8000b40:	4603      	mov	r3, r0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b50:	f3bf 8f5f 	dmb	sy
}
 8000b54:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <HAL_MPU_Disable+0x28>)
 8000b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b5a:	4a06      	ldr	r2, [pc, #24]	@ (8000b74 <HAL_MPU_Disable+0x28>)
 8000b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b60:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b62:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <HAL_MPU_Disable+0x2c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	e000ed90 	.word	0xe000ed90

08000b7c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000b84:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb4 <HAL_MPU_Enable+0x38>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <HAL_MPU_Enable+0x3c>)
 8000b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b92:	4a09      	ldr	r2, [pc, #36]	@ (8000bb8 <HAL_MPU_Enable+0x3c>)
 8000b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b98:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000b9a:	f3bf 8f4f 	dsb	sy
}
 8000b9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ba0:	f3bf 8f6f 	isb	sy
}
 8000ba4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed90 	.word	0xe000ed90
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	785a      	ldrb	r2, [r3, #1]
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <HAL_MPU_ConfigRegion+0x7c>)
 8000bca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <HAL_MPU_ConfigRegion+0x7c>)
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	4a19      	ldr	r2, [pc, #100]	@ (8000c38 <HAL_MPU_ConfigRegion+0x7c>)
 8000bd2:	f023 0301 	bic.w	r3, r3, #1
 8000bd6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000bd8:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <HAL_MPU_ConfigRegion+0x7c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7b1b      	ldrb	r3, [r3, #12]
 8000be4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7adb      	ldrb	r3, [r3, #11]
 8000bea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7a9b      	ldrb	r3, [r3, #10]
 8000bf2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000bf4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7b5b      	ldrb	r3, [r3, #13]
 8000bfa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000bfc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7b9b      	ldrb	r3, [r3, #14]
 8000c02:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7bdb      	ldrb	r3, [r3, #15]
 8000c0a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7a5b      	ldrb	r3, [r3, #9]
 8000c12:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7a1b      	ldrb	r3, [r3, #8]
 8000c1a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c1c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	7812      	ldrb	r2, [r2, #0]
 8000c22:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c24:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c26:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c28:	6113      	str	r3, [r2, #16]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed90 	.word	0xe000ed90

08000c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	@ 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c4a:	4b89      	ldr	r3, [pc, #548]	@ (8000e70 <HAL_GPIO_Init+0x234>)
 8000c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c4e:	e194      	b.n	8000f7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	2101      	movs	r1, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 8186 	beq.w	8000f74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d005      	beq.n	8000c80 <HAL_GPIO_Init+0x44>
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d130      	bne.n	8000ce2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	091b      	lsrs	r3, r3, #4
 8000ccc:	f003 0201 	and.w	r2, r3, #1
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d017      	beq.n	8000d1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d123      	bne.n	8000d72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	08da      	lsrs	r2, r3, #3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3208      	adds	r2, #8
 8000d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	691a      	ldr	r2, [r3, #16]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	69b9      	ldr	r1, [r7, #24]
 8000d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0203 	and.w	r2, r3, #3
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 80e0 	beq.w	8000f74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e74 <HAL_GPIO_Init+0x238>)
 8000db6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dba:	4a2e      	ldr	r2, [pc, #184]	@ (8000e74 <HAL_GPIO_Init+0x238>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e74 <HAL_GPIO_Init+0x238>)
 8000dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dd2:	4a29      	ldr	r2, [pc, #164]	@ (8000e78 <HAL_GPIO_Init+0x23c>)
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	3302      	adds	r3, #2
 8000dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	220f      	movs	r2, #15
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a20      	ldr	r2, [pc, #128]	@ (8000e7c <HAL_GPIO_Init+0x240>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d052      	beq.n	8000ea4 <HAL_GPIO_Init+0x268>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a1f      	ldr	r2, [pc, #124]	@ (8000e80 <HAL_GPIO_Init+0x244>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d031      	beq.n	8000e6a <HAL_GPIO_Init+0x22e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a1e      	ldr	r2, [pc, #120]	@ (8000e84 <HAL_GPIO_Init+0x248>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d02b      	beq.n	8000e66 <HAL_GPIO_Init+0x22a>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a1d      	ldr	r2, [pc, #116]	@ (8000e88 <HAL_GPIO_Init+0x24c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d025      	beq.n	8000e62 <HAL_GPIO_Init+0x226>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a1c      	ldr	r2, [pc, #112]	@ (8000e8c <HAL_GPIO_Init+0x250>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d01f      	beq.n	8000e5e <HAL_GPIO_Init+0x222>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a1b      	ldr	r2, [pc, #108]	@ (8000e90 <HAL_GPIO_Init+0x254>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d019      	beq.n	8000e5a <HAL_GPIO_Init+0x21e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a1a      	ldr	r2, [pc, #104]	@ (8000e94 <HAL_GPIO_Init+0x258>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d013      	beq.n	8000e56 <HAL_GPIO_Init+0x21a>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a19      	ldr	r2, [pc, #100]	@ (8000e98 <HAL_GPIO_Init+0x25c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_GPIO_Init+0x216>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a18      	ldr	r2, [pc, #96]	@ (8000e9c <HAL_GPIO_Init+0x260>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x212>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a17      	ldr	r2, [pc, #92]	@ (8000ea0 <HAL_GPIO_Init+0x264>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_GPIO_Init+0x20e>
 8000e46:	2309      	movs	r3, #9
 8000e48:	e02d      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e4a:	230a      	movs	r3, #10
 8000e4c:	e02b      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e4e:	2308      	movs	r3, #8
 8000e50:	e029      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e52:	2307      	movs	r3, #7
 8000e54:	e027      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e56:	2306      	movs	r3, #6
 8000e58:	e025      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	e023      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e5e:	2304      	movs	r3, #4
 8000e60:	e021      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e62:	2303      	movs	r3, #3
 8000e64:	e01f      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e66:	2302      	movs	r3, #2
 8000e68:	e01d      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e01b      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e6e:	bf00      	nop
 8000e70:	58000080 	.word	0x58000080
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58000400 	.word	0x58000400
 8000e7c:	58020000 	.word	0x58020000
 8000e80:	58020400 	.word	0x58020400
 8000e84:	58020800 	.word	0x58020800
 8000e88:	58020c00 	.word	0x58020c00
 8000e8c:	58021000 	.word	0x58021000
 8000e90:	58021400 	.word	0x58021400
 8000e94:	58021800 	.word	0x58021800
 8000e98:	58021c00 	.word	0x58021c00
 8000e9c:	58022000 	.word	0x58022000
 8000ea0:	58022400 	.word	0x58022400
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	f002 0203 	and.w	r2, r2, #3
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	4093      	lsls	r3, r2
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb6:	4938      	ldr	r1, [pc, #224]	@ (8000f98 <HAL_GPIO_Init+0x35c>)
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000eea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	3301      	adds	r3, #1
 8000f78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa22 f303 	lsr.w	r3, r2, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f47f ae63 	bne.w	8000c50 <HAL_GPIO_Init+0x14>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3724      	adds	r7, #36	@ 0x24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	58000400 	.word	0x58000400

08000f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000fb8:	e003      	b.n	8000fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fba:	887b      	ldrh	r3, [r7, #2]
 8000fbc:	041a      	lsls	r2, r3, #16
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b085      	sub	sp, #20
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fe0:	887a      	ldrh	r2, [r7, #2]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	041a      	lsls	r2, r3, #16
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	400b      	ands	r3, r1
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	619a      	str	r2, [r3, #24]
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af02      	add	r7, sp, #8
 8001008:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e0fe      	b.n	8001212 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d106      	bne.n	800102e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f007 faf3 	bl	8008614 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2203      	movs	r2, #3
 8001032:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f003 ff19 	bl	8004e72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7c1a      	ldrb	r2, [r3, #16]
 8001048:	f88d 2000 	strb.w	r2, [sp]
 800104c:	3304      	adds	r3, #4
 800104e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001050:	f003 fdea 	bl	8004c28 <USB_CoreInit>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d005      	beq.n	8001066 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2202      	movs	r2, #2
 800105e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e0d5      	b.n	8001212 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f003 ff11 	bl	8004e94 <USB_SetCurrentMode>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2202      	movs	r2, #2
 800107c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e0c6      	b.n	8001212 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	e04a      	b.n	8001120 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	4413      	add	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	3315      	adds	r3, #21
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	3314      	adds	r3, #20
 80010ae:	7bfa      	ldrb	r2, [r7, #15]
 80010b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	b298      	uxth	r0, r3
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	4413      	add	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	440b      	add	r3, r1
 80010c4:	332e      	adds	r3, #46	@ 0x2e
 80010c6:	4602      	mov	r2, r0
 80010c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	3318      	adds	r3, #24
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010de:	7bfa      	ldrb	r2, [r7, #15]
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	4413      	add	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	331c      	adds	r3, #28
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	3320      	adds	r3, #32
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	4413      	add	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	3324      	adds	r3, #36	@ 0x24
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	3301      	adds	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	791b      	ldrb	r3, [r3, #4]
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	429a      	cmp	r2, r3
 8001128:	d3af      	bcc.n	800108a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	e044      	b.n	80011ba <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001130:	7bfa      	ldrb	r2, [r7, #15]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4413      	add	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	4413      	add	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	440b      	add	r3, r1
 8001154:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	4613      	mov	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001172:	7bfa      	ldrb	r2, [r7, #15]
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	4413      	add	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	3301      	adds	r3, #1
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	791b      	ldrb	r3, [r3, #4]
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d3b5      	bcc.n	8001130 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7c1a      	ldrb	r2, [r3, #16]
 80011cc:	f88d 2000 	strb.w	r2, [sp]
 80011d0:	3304      	adds	r3, #4
 80011d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011d4:	f003 feaa 	bl	8004f2c <USB_DevInit>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2202      	movs	r2, #2
 80011e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e013      	b.n	8001212 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7b1b      	ldrb	r3, [r3, #12]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d102      	bne.n	8001206 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f001 f96f 	bl	80024e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f004 feed 	bl	8005fea <USB_DevDisconnect>

  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800122e:	2b01      	cmp	r3, #1
 8001230:	d101      	bne.n	8001236 <HAL_PCD_Start+0x1c>
 8001232:	2302      	movs	r3, #2
 8001234:	e022      	b.n	800127c <HAL_PCD_Start+0x62>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800124e:	2b01      	cmp	r3, #1
 8001250:	d105      	bne.n	800125e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001256:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f003 fdf4 	bl	8004e50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f004 fe9b 	bl	8005fa8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b08d      	sub	sp, #52	@ 0x34
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f004 ff59 	bl	8006152 <USB_GetMode>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f040 84b9 	bne.w	8001c1a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 febd 	bl	800602c <USB_ReadInterrupts>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 84af 	beq.w	8001c18 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f004 feaa 	bl	800602c <USB_ReadInterrupts>
 80012d8:	4603      	mov	r3, r0
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d107      	bne.n	80012f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	695a      	ldr	r2, [r3, #20]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f002 0202 	and.w	r2, r2, #2
 80012f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 fe98 	bl	800602c <USB_ReadInterrupts>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	2b10      	cmp	r3, #16
 8001304:	d161      	bne.n	80013ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	699a      	ldr	r2, [r3, #24]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0210 	bic.w	r2, r2, #16
 8001314:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	f003 020f 	and.w	r2, r3, #15
 8001322:	4613      	mov	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	3304      	adds	r3, #4
 8001334:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800133c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001340:	d124      	bne.n	800138c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001348:	4013      	ands	r3, r2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d035      	beq.n	80013ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135c:	b29b      	uxth	r3, r3
 800135e:	461a      	mov	r2, r3
 8001360:	6a38      	ldr	r0, [r7, #32]
 8001362:	f004 fccf 	bl	8005d04 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	68da      	ldr	r2, [r3, #12]
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001372:	441a      	add	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001384:	441a      	add	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	615a      	str	r2, [r3, #20]
 800138a:	e016      	b.n	80013ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001392:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001396:	d110      	bne.n	80013ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800139e:	2208      	movs	r2, #8
 80013a0:	4619      	mov	r1, r3
 80013a2:	6a38      	ldr	r0, [r7, #32]
 80013a4:	f004 fcae 	bl	8005d04 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	695a      	ldr	r2, [r3, #20]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b4:	441a      	add	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	699a      	ldr	r2, [r3, #24]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f042 0210 	orr.w	r2, r2, #16
 80013c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f004 fe2c 	bl	800602c <USB_ReadInterrupts>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80013de:	f040 80a7 	bne.w	8001530 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f004 fe31 	bl	8006052 <USB_ReadDevAllOutEpInterrupt>
 80013f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80013f2:	e099      	b.n	8001528 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 808e 	beq.w	800151c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f004 fe55 	bl	80060ba <USB_ReadDevOutEPInterrupt>
 8001410:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00c      	beq.n	8001436 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	015a      	lsls	r2, r3, #5
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	4413      	add	r3, r2
 8001424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001428:	461a      	mov	r2, r3
 800142a:	2301      	movs	r3, #1
 800142c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800142e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fed1 	bl	80021d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00c      	beq.n	800145a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001442:	015a      	lsls	r2, r3, #5
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	4413      	add	r3, r2
 8001448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800144c:	461a      	mov	r2, r3
 800144e:	2308      	movs	r3, #8
 8001450:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001452:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 ffa7 	bl	80023a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	2b00      	cmp	r3, #0
 8001462:	d008      	beq.n	8001476 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001466:	015a      	lsls	r2, r3, #5
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	4413      	add	r3, r2
 800146c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001470:	461a      	mov	r2, r3
 8001472:	2310      	movs	r3, #16
 8001474:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d030      	beq.n	80014e2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001488:	2b80      	cmp	r3, #128	@ 0x80
 800148a:	d109      	bne.n	80014a0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800149a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800149e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	3304      	adds	r3, #4
 80014b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	78db      	ldrb	r3, [r3, #3]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d108      	bne.n	80014d0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2200      	movs	r2, #0
 80014c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	4619      	mov	r1, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f007 f9d0 	bl	8008870 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	015a      	lsls	r2, r3, #5
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	4413      	add	r3, r2
 80014d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014dc:	461a      	mov	r2, r3
 80014de:	2302      	movs	r3, #2
 80014e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	f003 0320 	and.w	r3, r3, #32
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ee:	015a      	lsls	r2, r3, #5
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	4413      	add	r3, r2
 80014f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014f8:	461a      	mov	r2, r3
 80014fa:	2320      	movs	r3, #32
 80014fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d009      	beq.n	800151c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150a:	015a      	lsls	r2, r3, #5
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	4413      	add	r3, r2
 8001510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001514:	461a      	mov	r2, r3
 8001516:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800151a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	3301      	adds	r3, #1
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001524:	085b      	lsrs	r3, r3, #1
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800152a:	2b00      	cmp	r3, #0
 800152c:	f47f af62 	bne.w	80013f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f004 fd79 	bl	800602c <USB_ReadInterrupts>
 800153a:	4603      	mov	r3, r0
 800153c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001540:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001544:	f040 80db 	bne.w	80016fe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f004 fd9a 	bl	8006086 <USB_ReadDevAllInEpInterrupt>
 8001552:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001558:	e0cd      	b.n	80016f6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800155a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80c2 	beq.w	80016ea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f004 fdc0 	bl	80060f6 <USB_ReadDevInEPInterrupt>
 8001576:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d057      	beq.n	8001632 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	f003 030f 	and.w	r3, r3, #15
 8001588:	2201      	movs	r2, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43db      	mvns	r3, r3
 800159c:	69f9      	ldr	r1, [r7, #28]
 800159e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80015a2:	4013      	ands	r3, r2
 80015a4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	015a      	lsls	r2, r3, #5
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	4413      	add	r3, r2
 80015ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015b2:	461a      	mov	r2, r3
 80015b4:	2301      	movs	r3, #1
 80015b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	799b      	ldrb	r3, [r3, #6]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d132      	bne.n	8001626 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015c4:	4613      	mov	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	3320      	adds	r3, #32
 80015d0:	6819      	ldr	r1, [r3, #0]
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d6:	4613      	mov	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4403      	add	r3, r0
 80015e0:	331c      	adds	r3, #28
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4419      	add	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4403      	add	r3, r0
 80015f4:	3320      	adds	r3, #32
 80015f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d113      	bne.n	8001626 <HAL_PCD_IRQHandler+0x3a2>
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001602:	4613      	mov	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	3324      	adds	r3, #36	@ 0x24
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d108      	bne.n	8001626 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800161e:	461a      	mov	r2, r3
 8001620:	2101      	movs	r1, #1
 8001622:	f004 fdc9 	bl	80061b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4619      	mov	r1, r3
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f007 f89a 	bl	8008766 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	015a      	lsls	r2, r3, #5
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	4413      	add	r3, r2
 8001644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001648:	461a      	mov	r2, r3
 800164a:	2308      	movs	r3, #8
 800164c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	f003 0310 	and.w	r3, r3, #16
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	015a      	lsls	r2, r3, #5
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	4413      	add	r3, r2
 8001660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001664:	461a      	mov	r2, r3
 8001666:	2310      	movs	r3, #16
 8001668:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001676:	015a      	lsls	r2, r3, #5
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	4413      	add	r3, r2
 800167c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001680:	461a      	mov	r2, r3
 8001682:	2340      	movs	r3, #64	@ 0x40
 8001684:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d023      	beq.n	80016d8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001690:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001692:	6a38      	ldr	r0, [r7, #32]
 8001694:	f003 fda8 	bl	80051e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800169a:	4613      	mov	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	3310      	adds	r3, #16
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	3304      	adds	r3, #4
 80016aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	78db      	ldrb	r3, [r3, #3]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d108      	bne.n	80016c6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2200      	movs	r2, #0
 80016b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4619      	mov	r1, r3
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f007 f8e7 	bl	8008894 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	015a      	lsls	r2, r3, #5
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	4413      	add	r3, r2
 80016ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016d2:	461a      	mov	r2, r3
 80016d4:	2302      	movs	r3, #2
 80016d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 fcea 	bl	80020be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	3301      	adds	r3, #1
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80016f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80016f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f47f af2e 	bne.w	800155a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f004 fc92 	bl	800602c <USB_ReadInterrupts>
 8001708:	4603      	mov	r3, r0
 800170a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800170e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001712:	d122      	bne.n	800175a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001722:	f023 0301 	bic.w	r3, r3, #1
 8001726:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800172e:	2b01      	cmp	r3, #1
 8001730:	d108      	bne.n	8001744 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800173a:	2100      	movs	r1, #0
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 fef5 	bl	800252c <HAL_PCDEx_LPM_Callback>
 8001742:	e002      	b.n	800174a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f007 f885 	bl	8008854 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	695a      	ldr	r2, [r3, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001758:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f004 fc64 	bl	800602c <USB_ReadInterrupts>
 8001764:	4603      	mov	r3, r0
 8001766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800176a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800176e:	d112      	bne.n	8001796 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b01      	cmp	r3, #1
 800177e:	d102      	bne.n	8001786 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f007 f841 	bl	8008808 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001794:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f004 fc46 	bl	800602c <USB_ReadInterrupts>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80017aa:	d121      	bne.n	80017f0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80017ba:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d111      	bne.n	80017ea <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	f003 020f 	and.w	r2, r3, #15
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80017e0:	2101      	movs	r1, #1
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fea2 	bl	800252c <HAL_PCDEx_LPM_Callback>
 80017e8:	e002      	b.n	80017f0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f007 f80c 	bl	8008808 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f004 fc19 	bl	800602c <USB_ReadInterrupts>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001804:	f040 80b7 	bne.w	8001976 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001816:	f023 0301 	bic.w	r3, r3, #1
 800181a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2110      	movs	r1, #16
 8001822:	4618      	mov	r0, r3
 8001824:	f003 fce0 	bl	80051e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800182c:	e046      	b.n	80018bc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800182e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001830:	015a      	lsls	r2, r3, #5
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	4413      	add	r3, r2
 8001836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800183a:	461a      	mov	r2, r3
 800183c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001840:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001844:	015a      	lsls	r2, r3, #5
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	4413      	add	r3, r2
 800184a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001852:	0151      	lsls	r1, r2, #5
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	440a      	add	r2, r1
 8001858:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800185c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001860:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001864:	015a      	lsls	r2, r3, #5
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	4413      	add	r3, r2
 800186a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800186e:	461a      	mov	r2, r3
 8001870:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001874:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	4413      	add	r3, r2
 800187e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001886:	0151      	lsls	r1, r2, #5
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	440a      	add	r2, r1
 800188c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001890:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001894:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001898:	015a      	lsls	r2, r3, #5
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	4413      	add	r3, r2
 800189e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018a6:	0151      	lsls	r1, r2, #5
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	440a      	add	r2, r1
 80018ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b8:	3301      	adds	r3, #1
 80018ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	791b      	ldrb	r3, [r3, #4]
 80018c0:	461a      	mov	r2, r3
 80018c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d3b2      	bcc.n	800182e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018d6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80018da:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7bdb      	ldrb	r3, [r3, #15]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d016      	beq.n	8001912 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018f4:	f043 030b 	orr.w	r3, r3, #11
 80018f8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800190a:	f043 030b 	orr.w	r3, r3, #11
 800190e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001910:	e015      	b.n	800193e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001920:	4619      	mov	r1, r3
 8001922:	f242 032b 	movw	r3, #8235	@ 0x202b
 8001926:	4313      	orrs	r3, r2
 8001928:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001938:	f043 030b 	orr.w	r3, r3, #11
 800193c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800194c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001950:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001960:	461a      	mov	r2, r3
 8001962:	f004 fc29 	bl	80061b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001974:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f004 fb56 	bl	800602c <USB_ReadInterrupts>
 8001980:	4603      	mov	r3, r0
 8001982:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800198a:	d123      	bne.n	80019d4 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f004 fbed 	bl	8006170 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fc9d 	bl	80052da <USB_GetDevSpeed>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681c      	ldr	r4, [r3, #0]
 80019ac:	f001 fd9e 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 80019b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019b6:	461a      	mov	r2, r3
 80019b8:	4620      	mov	r0, r4
 80019ba:	f003 f9a7 	bl	8004d0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f006 fef9 	bl	80087b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80019d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f004 fb27 	bl	800602c <USB_ReadInterrupts>
 80019de:	4603      	mov	r3, r0
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d10a      	bne.n	80019fe <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f006 fed6 	bl	800879a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f002 0208 	and.w	r2, r2, #8
 80019fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f004 fb12 	bl	800602c <USB_ReadInterrupts>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a0e:	2b80      	cmp	r3, #128	@ 0x80
 8001a10:	d123      	bne.n	8001a5a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a1e:	2301      	movs	r3, #1
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a22:	e014      	b.n	8001a4e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d105      	bne.n	8001a48 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	4619      	mov	r1, r3
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 fb0a 	bl	800205c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	791b      	ldrb	r3, [r3, #4]
 8001a52:	461a      	mov	r2, r3
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d3e4      	bcc.n	8001a24 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f004 fae4 	bl	800602c <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a6e:	d13c      	bne.n	8001aea <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a70:	2301      	movs	r3, #1
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a74:	e02b      	b.n	8001ace <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	3318      	adds	r3, #24
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d115      	bne.n	8001ac8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a9c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	da12      	bge.n	8001ac8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	3317      	adds	r3, #23
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 faca 	bl	800205c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aca:	3301      	adds	r3, #1
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	791b      	ldrb	r3, [r3, #4]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d3cd      	bcc.n	8001a76 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f004 fa9c 	bl	800602c <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001afa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001afe:	d156      	bne.n	8001bae <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b00:	2301      	movs	r3, #1
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b04:	e045      	b.n	8001b92 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	015a      	lsls	r2, r3, #5
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4413      	add	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d12e      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b2e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	da2b      	bge.n	8001b8c <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	0c1a      	lsrs	r2, r3, #16
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b3e:	4053      	eors	r3, r2
 8001b40:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d121      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10a      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b88:	6053      	str	r3, [r2, #4]
            break;
 8001b8a:	e008      	b.n	8001b9e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8e:	3301      	adds	r3, #1
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	791b      	ldrb	r3, [r3, #4]
 8001b96:	461a      	mov	r2, r3
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d3b3      	bcc.n	8001b06 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695a      	ldr	r2, [r3, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f004 fa3a 	bl	800602c <USB_ReadInterrupts>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bc2:	d10a      	bne.n	8001bda <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f006 fe77 	bl	80088b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f004 fa24 	bl	800602c <USB_ReadInterrupts>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d115      	bne.n	8001c1a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f006 fe67 	bl	80088d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	e000      	b.n	8001c1a <HAL_PCD_IRQHandler+0x996>
      return;
 8001c18:	bf00      	nop
    }
  }
}
 8001c1a:	3734      	adds	r7, #52	@ 0x34
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd90      	pop	{r4, r7, pc}

08001c20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <HAL_PCD_SetAddress+0x1a>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e012      	b.n	8001c60 <HAL_PCD_SetAddress+0x40>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	78fa      	ldrb	r2, [r7, #3]
 8001c46:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	78fa      	ldrb	r2, [r7, #3]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f004 f983 	bl	8005f5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	4608      	mov	r0, r1
 8001c72:	4611      	mov	r1, r2
 8001c74:	461a      	mov	r2, r3
 8001c76:	4603      	mov	r3, r0
 8001c78:	70fb      	strb	r3, [r7, #3]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	803b      	strh	r3, [r7, #0]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	da0f      	bge.n	8001cae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	f003 020f 	and.w	r2, r3, #15
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	3310      	adds	r3, #16
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	705a      	strb	r2, [r3, #1]
 8001cac:	e00f      	b.n	8001cce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	f003 020f 	and.w	r2, r3, #15
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001cda:	883b      	ldrh	r3, [r7, #0]
 8001cdc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	78ba      	ldrb	r2, [r7, #2]
 8001ce8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	785b      	ldrb	r3, [r3, #1]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d004      	beq.n	8001cfc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cfc:	78bb      	ldrb	r3, [r7, #2]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d102      	bne.n	8001d08 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_PCD_EP_Open+0xae>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e00e      	b.n	8001d34 <HAL_PCD_EP_Open+0xcc>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68f9      	ldr	r1, [r7, #12]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 fafd 	bl	8005324 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d32:	7afb      	ldrb	r3, [r7, #11]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	da0f      	bge.n	8001d70 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	f003 020f 	and.w	r2, r3, #15
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	3310      	adds	r3, #16
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	3304      	adds	r3, #4
 8001d66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	705a      	strb	r2, [r3, #1]
 8001d6e:	e00f      	b.n	8001d90 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	f003 020f 	and.w	r2, r3, #15
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	3304      	adds	r3, #4
 8001d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_PCD_EP_Close+0x6e>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e00e      	b.n	8001dc8 <HAL_PCD_EP_Close+0x8c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68f9      	ldr	r1, [r7, #12]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 fb3b 	bl	8005434 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de0:	7afb      	ldrb	r3, [r7, #11]
 8001de2:	f003 020f 	and.w	r2, r3, #15
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4413      	add	r3, r2
 8001df6:	3304      	adds	r3, #4
 8001df8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e12:	7afb      	ldrb	r3, [r7, #11]
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	799b      	ldrb	r3, [r3, #6]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d102      	bne.n	8001e2c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	799b      	ldrb	r3, [r3, #6]
 8001e34:	461a      	mov	r2, r3
 8001e36:	6979      	ldr	r1, [r7, #20]
 8001e38:	f003 fbd8 	bl	80055ec <USB_EPStartXfer>

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	f003 020f 	and.w	r2, r3, #15
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001e68:	681b      	ldr	r3, [r3, #0]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	460b      	mov	r3, r1
 8001e84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e86:	7afb      	ldrb	r3, [r7, #11]
 8001e88:	f003 020f 	and.w	r2, r3, #15
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	3310      	adds	r3, #16
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4413      	add	r3, r2
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2200      	movs	r2, #0
 8001eae:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb6:	7afb      	ldrb	r3, [r7, #11]
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	799b      	ldrb	r3, [r3, #6]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d102      	bne.n	8001ed0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	799b      	ldrb	r3, [r3, #6]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	6979      	ldr	r1, [r7, #20]
 8001edc:	f003 fb86 	bl	80055ec <USB_EPStartXfer>

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	7912      	ldrb	r2, [r2, #4]
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e04f      	b.n	8001fa8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	da0f      	bge.n	8001f30 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	f003 020f 	and.w	r2, r3, #15
 8001f16:	4613      	mov	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	3310      	adds	r3, #16
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	3304      	adds	r3, #4
 8001f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	705a      	strb	r2, [r3, #1]
 8001f2e:	e00d      	b.n	8001f4c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	3304      	adds	r3, #4
 8001f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_PCD_EP_SetStall+0x82>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e01d      	b.n	8001fa8 <HAL_PCD_EP_SetStall+0xbe>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68f9      	ldr	r1, [r7, #12]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 ff1a 	bl	8005db4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d109      	bne.n	8001f9e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7999      	ldrb	r1, [r3, #6]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f004 f90d 	bl	80061b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	7912      	ldrb	r2, [r2, #4]
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e042      	b.n	8002054 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	da0f      	bge.n	8001ff6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 020f 	and.w	r2, r3, #15
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	3310      	adds	r3, #16
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	3304      	adds	r3, #4
 8001fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	705a      	strb	r2, [r3, #1]
 8001ff4:	e00f      	b.n	8002016 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 020f 	and.w	r2, r3, #15
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	3304      	adds	r3, #4
 800200e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	b2da      	uxtb	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_PCD_EP_ClrStall+0x86>
 8002032:	2302      	movs	r3, #2
 8002034:	e00e      	b.n	8002054 <HAL_PCD_EP_ClrStall+0xa4>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68f9      	ldr	r1, [r7, #12]
 8002044:	4618      	mov	r0, r3
 8002046:	f003 ff23 	bl	8005e90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800206c:	2b00      	cmp	r3, #0
 800206e:	da0c      	bge.n	800208a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	f003 020f 	and.w	r2, r3, #15
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	3310      	adds	r3, #16
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	4413      	add	r3, r2
 8002084:	3304      	adds	r3, #4
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	e00c      	b.n	80020a4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	f003 020f 	and.w	r2, r3, #15
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	3304      	adds	r3, #4
 80020a2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68f9      	ldr	r1, [r7, #12]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 fd42 	bl	8005b34 <USB_EPStopXfer>
 80020b0:	4603      	mov	r3, r0
 80020b2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020b4:	7afb      	ldrb	r3, [r7, #11]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b08a      	sub	sp, #40	@ 0x28
 80020c2:	af02      	add	r7, sp, #8
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	3310      	adds	r3, #16
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	3304      	adds	r3, #4
 80020e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d901      	bls.n	80020f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e06b      	b.n	80021ce <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	429a      	cmp	r2, r3
 800210a:	d902      	bls.n	8002112 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3303      	adds	r3, #3
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800211a:	e02a      	b.n	8002172 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	429a      	cmp	r2, r3
 8002130:	d902      	bls.n	8002138 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	3303      	adds	r3, #3
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	68d9      	ldr	r1, [r3, #12]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	4603      	mov	r3, r0
 8002154:	6978      	ldr	r0, [r7, #20]
 8002156:	f003 fd97 	bl	8005c88 <USB_WritePacket>

    ep->xfer_buff  += len;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	441a      	add	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	441a      	add	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	429a      	cmp	r2, r3
 8002186:	d809      	bhi.n	800219c <PCD_WriteEmptyTxFifo+0xde>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002190:	429a      	cmp	r2, r3
 8002192:	d203      	bcs.n	800219c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1bf      	bne.n	800211c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d811      	bhi.n	80021cc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	2201      	movs	r2, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	6939      	ldr	r1, [r7, #16]
 80021c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021c8:	4013      	ands	r3, r2
 80021ca:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3720      	adds	r7, #32
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	333c      	adds	r3, #60	@ 0x3c
 80021f0:	3304      	adds	r3, #4
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	799b      	ldrb	r3, [r3, #6]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d17b      	bne.n	8002306 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d015      	beq.n	8002244 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	4a61      	ldr	r2, [pc, #388]	@ (80023a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	f240 80b9 	bls.w	8002394 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80b3 	beq.w	8002394 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800223a:	461a      	mov	r2, r3
 800223c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002240:	6093      	str	r3, [r2, #8]
 8002242:	e0a7      	b.n	8002394 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800225a:	461a      	mov	r2, r3
 800225c:	2320      	movs	r3, #32
 800225e:	6093      	str	r3, [r2, #8]
 8002260:	e098      	b.n	8002394 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002268:	2b00      	cmp	r3, #0
 800226a:	f040 8093 	bne.w	8002394 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	4a4b      	ldr	r2, [pc, #300]	@ (80023a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d90f      	bls.n	8002296 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00a      	beq.n	8002296 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	4413      	add	r3, r2
 8002288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800228c:	461a      	mov	r2, r3
 800228e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002292:	6093      	str	r3, [r2, #8]
 8002294:	e07e      	b.n	8002394 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	3304      	adds	r3, #4
 80022aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a1a      	ldr	r2, [r3, #32]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	0159      	lsls	r1, r3, #5
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	440b      	add	r3, r1
 80022b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c2:	1ad2      	subs	r2, r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d114      	bne.n	80022f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022e0:	461a      	mov	r2, r3
 80022e2:	2101      	movs	r1, #1
 80022e4:	f003 ff68 	bl	80061b8 <USB_EP0_OutStart>
 80022e8:	e006      	b.n	80022f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	441a      	add	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	4619      	mov	r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f006 fa16 	bl	8008730 <HAL_PCD_DataOutStageCallback>
 8002304:	e046      	b.n	8002394 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	4a26      	ldr	r2, [pc, #152]	@ (80023a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d124      	bne.n	8002358 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002324:	461a      	mov	r2, r3
 8002326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800232a:	6093      	str	r3, [r2, #8]
 800232c:	e032      	b.n	8002394 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f003 0320 	and.w	r3, r3, #32
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	4413      	add	r3, r2
 8002340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002344:	461a      	mov	r2, r3
 8002346:	2320      	movs	r3, #32
 8002348:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	4619      	mov	r1, r3
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f006 f9ed 	bl	8008730 <HAL_PCD_DataOutStageCallback>
 8002356:	e01d      	b.n	8002394 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d114      	bne.n	8002388 <PCD_EP_OutXfrComplete_int+0x1b0>
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d108      	bne.n	8002388 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002380:	461a      	mov	r2, r3
 8002382:	2100      	movs	r1, #0
 8002384:	f003 ff18 	bl	80061b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	4619      	mov	r1, r3
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f006 f9ce 	bl	8008730 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3720      	adds	r7, #32
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	4f54300a 	.word	0x4f54300a
 80023a4:	4f54310a 	.word	0x4f54310a

080023a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	333c      	adds	r3, #60	@ 0x3c
 80023c0:	3304      	adds	r3, #4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4a15      	ldr	r2, [pc, #84]	@ (8002430 <PCD_EP_OutSetupPacket_int+0x88>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d90e      	bls.n	80023fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d009      	beq.n	80023fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023f4:	461a      	mov	r2, r3
 80023f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f006 f985 	bl	800870c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4a0a      	ldr	r2, [pc, #40]	@ (8002430 <PCD_EP_OutSetupPacket_int+0x88>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d90c      	bls.n	8002424 <PCD_EP_OutSetupPacket_int+0x7c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	799b      	ldrb	r3, [r3, #6]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d108      	bne.n	8002424 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800241c:	461a      	mov	r2, r3
 800241e:	2101      	movs	r1, #1
 8002420:	f003 feca 	bl	80061b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	4f54300a 	.word	0x4f54300a

08002434 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	70fb      	strb	r3, [r7, #3]
 8002440:	4613      	mov	r3, r2
 8002442:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d107      	bne.n	8002462 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002452:	883b      	ldrh	r3, [r7, #0]
 8002454:	0419      	lsls	r1, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	430a      	orrs	r2, r1
 800245e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002460:	e028      	b.n	80024b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	4413      	add	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002470:	2300      	movs	r3, #0
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	e00d      	b.n	8002492 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	3340      	adds	r3, #64	@ 0x40
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	0c1b      	lsrs	r3, r3, #16
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	4413      	add	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	3301      	adds	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	3b01      	subs	r3, #1
 8002498:	429a      	cmp	r2, r3
 800249a:	d3ec      	bcc.n	8002476 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800249c:	883b      	ldrh	r3, [r7, #0]
 800249e:	0418      	lsls	r0, r3, #16
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6819      	ldr	r1, [r3, #0]
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	4302      	orrs	r2, r0
 80024ac:	3340      	adds	r3, #64	@ 0x40
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002512:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <HAL_PCDEx_ActivateLPM+0x44>)
 8002514:	4313      	orrs	r3, r2
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	10000003 	.word	0x10000003

0800252c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800254c:	4b19      	ldr	r3, [pc, #100]	@ (80025b4 <HAL_PWREx_ConfigSupply+0x70>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b04      	cmp	r3, #4
 8002556:	d00a      	beq.n	800256e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002558:	4b16      	ldr	r3, [pc, #88]	@ (80025b4 <HAL_PWREx_ConfigSupply+0x70>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	429a      	cmp	r2, r3
 8002564:	d001      	beq.n	800256a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e01f      	b.n	80025aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	e01d      	b.n	80025aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800256e:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <HAL_PWREx_ConfigSupply+0x70>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f023 0207 	bic.w	r2, r3, #7
 8002576:	490f      	ldr	r1, [pc, #60]	@ (80025b4 <HAL_PWREx_ConfigSupply+0x70>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4313      	orrs	r3, r2
 800257c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800257e:	f7fe f999 	bl	80008b4 <HAL_GetTick>
 8002582:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002584:	e009      	b.n	800259a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002586:	f7fe f995 	bl	80008b4 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002594:	d901      	bls.n	800259a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e007      	b.n	80025aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800259a:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <HAL_PWREx_ConfigSupply+0x70>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025a6:	d1ee      	bne.n	8002586 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	58024800 	.word	0x58024800

080025b8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80025bc:	4b05      	ldr	r3, [pc, #20]	@ (80025d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4a04      	ldr	r2, [pc, #16]	@ (80025d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025c6:	60d3      	str	r3, [r2, #12]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	58024800 	.word	0x58024800

080025d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08c      	sub	sp, #48	@ 0x30
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d102      	bne.n	80025ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f000 bc48 	b.w	8002e7c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 8088 	beq.w	800270a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fa:	4b99      	ldr	r3, [pc, #612]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002602:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002604:	4b96      	ldr	r3, [pc, #600]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800260a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260c:	2b10      	cmp	r3, #16
 800260e:	d007      	beq.n	8002620 <HAL_RCC_OscConfig+0x48>
 8002610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002612:	2b18      	cmp	r3, #24
 8002614:	d111      	bne.n	800263a <HAL_RCC_OscConfig+0x62>
 8002616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d10c      	bne.n	800263a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	4b8f      	ldr	r3, [pc, #572]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d06d      	beq.n	8002708 <HAL_RCC_OscConfig+0x130>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d169      	bne.n	8002708 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	f000 bc21 	b.w	8002e7c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x7a>
 8002644:	4b86      	ldr	r3, [pc, #536]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a85      	ldr	r2, [pc, #532]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800264a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	e02e      	b.n	80026b0 <HAL_RCC_OscConfig+0xd8>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x9c>
 800265a:	4b81      	ldr	r3, [pc, #516]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a80      	ldr	r2, [pc, #512]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b7e      	ldr	r3, [pc, #504]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a7d      	ldr	r2, [pc, #500]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800266c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e01d      	b.n	80026b0 <HAL_RCC_OscConfig+0xd8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0xc0>
 800267e:	4b78      	ldr	r3, [pc, #480]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a77      	ldr	r2, [pc, #476]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b75      	ldr	r3, [pc, #468]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a74      	ldr	r2, [pc, #464]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0xd8>
 8002698:	4b71      	ldr	r3, [pc, #452]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a70      	ldr	r2, [pc, #448]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800269e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b6e      	ldr	r3, [pc, #440]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a6d      	ldr	r2, [pc, #436]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80026aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7fe f8fc 	bl	80008b4 <HAL_GetTick>
 80026bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c0:	f7fe f8f8 	bl	80008b4 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	@ 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e3d4      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026d2:	4b63      	ldr	r3, [pc, #396]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0xe8>
 80026de:	e014      	b.n	800270a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe f8e8 	bl	80008b4 <HAL_GetTick>
 80026e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7fe f8e4 	bl	80008b4 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	@ 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e3c0      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026fa:	4b59      	ldr	r3, [pc, #356]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x110>
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80ca 	beq.w	80028ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002718:	4b51      	ldr	r3, [pc, #324]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002720:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002722:	4b4f      	ldr	r3, [pc, #316]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002726:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d007      	beq.n	800273e <HAL_RCC_OscConfig+0x166>
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	2b18      	cmp	r3, #24
 8002732:	d156      	bne.n	80027e2 <HAL_RCC_OscConfig+0x20a>
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d151      	bne.n	80027e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800273e:	4b48      	ldr	r3, [pc, #288]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d005      	beq.n	8002756 <HAL_RCC_OscConfig+0x17e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e392      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002756:	4b42      	ldr	r3, [pc, #264]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 0219 	bic.w	r2, r3, #25
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	493f      	ldr	r1, [pc, #252]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7fe f8a4 	bl	80008b4 <HAL_GetTick>
 800276c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002770:	f7fe f8a0 	bl	80008b4 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e37c      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002782:	4b37      	ldr	r3, [pc, #220]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	f7fe f8c1 	bl	8000914 <HAL_GetREVID>
 8002792:	4603      	mov	r3, r0
 8002794:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002798:	4293      	cmp	r3, r2
 800279a:	d817      	bhi.n	80027cc <HAL_RCC_OscConfig+0x1f4>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2b40      	cmp	r3, #64	@ 0x40
 80027a2:	d108      	bne.n	80027b6 <HAL_RCC_OscConfig+0x1de>
 80027a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80027ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80027ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b4:	e07a      	b.n	80028ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	031b      	lsls	r3, r3, #12
 80027c4:	4926      	ldr	r1, [pc, #152]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ca:	e06f      	b.n	80028ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027cc:	4b24      	ldr	r3, [pc, #144]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	061b      	lsls	r3, r3, #24
 80027da:	4921      	ldr	r1, [pc, #132]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e0:	e064      	b.n	80028ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d047      	beq.n	800287a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0219 	bic.w	r2, r3, #25
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	491a      	ldr	r1, [pc, #104]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7fe f85a 	bl	80008b4 <HAL_GetTick>
 8002800:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002804:	f7fe f856 	bl	80008b4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e332      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002816:	4b12      	ldr	r3, [pc, #72]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002822:	f7fe f877 	bl	8000914 <HAL_GetREVID>
 8002826:	4603      	mov	r3, r0
 8002828:	f241 0203 	movw	r2, #4099	@ 0x1003
 800282c:	4293      	cmp	r3, r2
 800282e:	d819      	bhi.n	8002864 <HAL_RCC_OscConfig+0x28c>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2b40      	cmp	r3, #64	@ 0x40
 8002836:	d108      	bne.n	800284a <HAL_RCC_OscConfig+0x272>
 8002838:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002840:	4a07      	ldr	r2, [pc, #28]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002846:	6053      	str	r3, [r2, #4]
 8002848:	e030      	b.n	80028ac <HAL_RCC_OscConfig+0x2d4>
 800284a:	4b05      	ldr	r3, [pc, #20]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	031b      	lsls	r3, r3, #12
 8002858:	4901      	ldr	r1, [pc, #4]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800285a:	4313      	orrs	r3, r2
 800285c:	604b      	str	r3, [r1, #4]
 800285e:	e025      	b.n	80028ac <HAL_RCC_OscConfig+0x2d4>
 8002860:	58024400 	.word	0x58024400
 8002864:	4b9a      	ldr	r3, [pc, #616]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	061b      	lsls	r3, r3, #24
 8002872:	4997      	ldr	r1, [pc, #604]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
 8002878:	e018      	b.n	80028ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287a:	4b95      	ldr	r3, [pc, #596]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a94      	ldr	r2, [pc, #592]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7fe f815 	bl	80008b4 <HAL_GetTick>
 800288a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288e:	f7fe f811 	bl	80008b4 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e2ed      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028a0:	4b8b      	ldr	r3, [pc, #556]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80a9 	beq.w	8002a0c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ba:	4b85      	ldr	r3, [pc, #532]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028c4:	4b82      	ldr	r3, [pc, #520]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d007      	beq.n	80028e0 <HAL_RCC_OscConfig+0x308>
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2b18      	cmp	r3, #24
 80028d4:	d13a      	bne.n	800294c <HAL_RCC_OscConfig+0x374>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d135      	bne.n	800294c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028e0:	4b7b      	ldr	r3, [pc, #492]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_OscConfig+0x320>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	2b80      	cmp	r3, #128	@ 0x80
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e2c1      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028f8:	f7fe f80c 	bl	8000914 <HAL_GetREVID>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002902:	4293      	cmp	r3, r2
 8002904:	d817      	bhi.n	8002936 <HAL_RCC_OscConfig+0x35e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	2b20      	cmp	r3, #32
 800290c:	d108      	bne.n	8002920 <HAL_RCC_OscConfig+0x348>
 800290e:	4b70      	ldr	r3, [pc, #448]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002916:	4a6e      	ldr	r2, [pc, #440]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002918:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800291c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800291e:	e075      	b.n	8002a0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002920:	4b6b      	ldr	r3, [pc, #428]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	069b      	lsls	r3, r3, #26
 800292e:	4968      	ldr	r1, [pc, #416]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002934:	e06a      	b.n	8002a0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002936:	4b66      	ldr	r3, [pc, #408]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	061b      	lsls	r3, r3, #24
 8002944:	4962      	ldr	r1, [pc, #392]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002946:	4313      	orrs	r3, r2
 8002948:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800294a:	e05f      	b.n	8002a0c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d042      	beq.n	80029da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002954:	4b5e      	ldr	r3, [pc, #376]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a5d      	ldr	r2, [pc, #372]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 800295a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800295e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fd ffa8 	bl	80008b4 <HAL_GetTick>
 8002964:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002968:	f7fd ffa4 	bl	80008b4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e280      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800297a:	4b55      	ldr	r3, [pc, #340]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002986:	f7fd ffc5 	bl	8000914 <HAL_GetREVID>
 800298a:	4603      	mov	r3, r0
 800298c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002990:	4293      	cmp	r3, r2
 8002992:	d817      	bhi.n	80029c4 <HAL_RCC_OscConfig+0x3ec>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	2b20      	cmp	r3, #32
 800299a:	d108      	bne.n	80029ae <HAL_RCC_OscConfig+0x3d6>
 800299c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80029a4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80029a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029aa:	6053      	str	r3, [r2, #4]
 80029ac:	e02e      	b.n	8002a0c <HAL_RCC_OscConfig+0x434>
 80029ae:	4b48      	ldr	r3, [pc, #288]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	069b      	lsls	r3, r3, #26
 80029bc:	4944      	ldr	r1, [pc, #272]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
 80029c2:	e023      	b.n	8002a0c <HAL_RCC_OscConfig+0x434>
 80029c4:	4b42      	ldr	r3, [pc, #264]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	493f      	ldr	r1, [pc, #252]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60cb      	str	r3, [r1, #12]
 80029d8:	e018      	b.n	8002a0c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029da:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a3c      	ldr	r2, [pc, #240]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80029e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7fd ff65 	bl	80008b4 <HAL_GetTick>
 80029ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029ee:	f7fd ff61 	bl	80008b4 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e23d      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a00:	4b33      	ldr	r3, [pc, #204]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f0      	bne.n	80029ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d036      	beq.n	8002a86 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d019      	beq.n	8002a54 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a20:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a24:	4a2a      	ldr	r2, [pc, #168]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fd ff42 	bl	80008b4 <HAL_GetTick>
 8002a30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a34:	f7fd ff3e 	bl	80008b4 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e21a      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a46:	4b22      	ldr	r3, [pc, #136]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x45c>
 8002a52:	e018      	b.n	8002a86 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a54:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a58:	4a1d      	ldr	r2, [pc, #116]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002a5a:	f023 0301 	bic.w	r3, r3, #1
 8002a5e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7fd ff28 	bl	80008b4 <HAL_GetTick>
 8002a64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a68:	f7fd ff24 	bl	80008b4 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e200      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a7a:	4b15      	ldr	r3, [pc, #84]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d039      	beq.n	8002b06 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d01c      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002aa0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002aa4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002aa6:	f7fd ff05 	bl	80008b4 <HAL_GetTick>
 8002aaa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aae:	f7fd ff01 	bl	80008b4 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e1dd      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ac0:	4b03      	ldr	r3, [pc, #12]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x4d6>
 8002acc:	e01b      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
 8002ace:	bf00      	nop
 8002ad0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ad4:	4b9b      	ldr	r3, [pc, #620]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a9a      	ldr	r2, [pc, #616]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002ada:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ade:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ae0:	f7fd fee8 	bl	80008b4 <HAL_GetTick>
 8002ae4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ae8:	f7fd fee4 	bl	80008b4 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e1c0      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002afa:	4b92      	ldr	r3, [pc, #584]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8081 	beq.w	8002c16 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b14:	4b8c      	ldr	r3, [pc, #560]	@ (8002d48 <HAL_RCC_OscConfig+0x770>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a8b      	ldr	r2, [pc, #556]	@ (8002d48 <HAL_RCC_OscConfig+0x770>)
 8002b1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b20:	f7fd fec8 	bl	80008b4 <HAL_GetTick>
 8002b24:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b28:	f7fd fec4 	bl	80008b4 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	@ 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e1a0      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b3a:	4b83      	ldr	r3, [pc, #524]	@ (8002d48 <HAL_RCC_OscConfig+0x770>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d106      	bne.n	8002b5c <HAL_RCC_OscConfig+0x584>
 8002b4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b52:	4a7c      	ldr	r2, [pc, #496]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b5a:	e02d      	b.n	8002bb8 <HAL_RCC_OscConfig+0x5e0>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10c      	bne.n	8002b7e <HAL_RCC_OscConfig+0x5a6>
 8002b64:	4b77      	ldr	r3, [pc, #476]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b68:	4a76      	ldr	r2, [pc, #472]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b6a:	f023 0301 	bic.w	r3, r3, #1
 8002b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b70:	4b74      	ldr	r3, [pc, #464]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b74:	4a73      	ldr	r2, [pc, #460]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b76:	f023 0304 	bic.w	r3, r3, #4
 8002b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7c:	e01c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x5e0>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x5c8>
 8002b86:	4b6f      	ldr	r3, [pc, #444]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8a:	4a6e      	ldr	r2, [pc, #440]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b92:	4b6c      	ldr	r3, [pc, #432]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b96:	4a6b      	ldr	r2, [pc, #428]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b9e:	e00b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x5e0>
 8002ba0:	4b68      	ldr	r3, [pc, #416]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba4:	4a67      	ldr	r2, [pc, #412]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bac:	4b65      	ldr	r3, [pc, #404]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb0:	4a64      	ldr	r2, [pc, #400]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002bb2:	f023 0304 	bic.w	r3, r3, #4
 8002bb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d015      	beq.n	8002bec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7fd fe78 	bl	80008b4 <HAL_GetTick>
 8002bc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fd fe74 	bl	80008b4 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e14e      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bde:	4b59      	ldr	r3, [pc, #356]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0ee      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x5f0>
 8002bea:	e014      	b.n	8002c16 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7fd fe62 	bl	80008b4 <HAL_GetTick>
 8002bf0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf4:	f7fd fe5e 	bl	80008b4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e138      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c0a:	4b4e      	ldr	r3, [pc, #312]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1ee      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 812d 	beq.w	8002e7a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c20:	4b48      	ldr	r3, [pc, #288]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c28:	2b18      	cmp	r3, #24
 8002c2a:	f000 80bd 	beq.w	8002da8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	f040 809e 	bne.w	8002d74 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c38:	4b42      	ldr	r3, [pc, #264]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a41      	ldr	r2, [pc, #260]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002c3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fd fe36 	bl	80008b4 <HAL_GetTick>
 8002c48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fd fe32 	bl	80008b4 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e10e      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c5e:	4b39      	ldr	r3, [pc, #228]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6a:	4b36      	ldr	r3, [pc, #216]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002c6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c6e:	4b37      	ldr	r3, [pc, #220]	@ (8002d4c <HAL_RCC_OscConfig+0x774>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c7a:	0112      	lsls	r2, r2, #4
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	4931      	ldr	r1, [pc, #196]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	628b      	str	r3, [r1, #40]	@ 0x28
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c92:	3b01      	subs	r3, #1
 8002c94:	025b      	lsls	r3, r3, #9
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	041b      	lsls	r3, r3, #16
 8002ca2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cac:	3b01      	subs	r3, #1
 8002cae:	061b      	lsls	r3, r3, #24
 8002cb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002cb4:	4923      	ldr	r1, [pc, #140]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002cba:	4b22      	ldr	r3, [pc, #136]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbe:	4a21      	ldr	r2, [pc, #132]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002cc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cca:	4b21      	ldr	r3, [pc, #132]	@ (8002d50 <HAL_RCC_OscConfig+0x778>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002cd2:	00d2      	lsls	r2, r2, #3
 8002cd4:	491b      	ldr	r1, [pc, #108]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cda:	4b1a      	ldr	r3, [pc, #104]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cde:	f023 020c 	bic.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	4917      	ldr	r1, [pc, #92]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cec:	4b15      	ldr	r3, [pc, #84]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf0:	f023 0202 	bic.w	r2, r3, #2
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf8:	4912      	ldr	r1, [pc, #72]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cfe:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d02:	4a10      	ldr	r2, [pc, #64]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d16:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d22:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d26:	4a07      	ldr	r2, [pc, #28]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d2e:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a04      	ldr	r2, [pc, #16]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fd fdbb 	bl	80008b4 <HAL_GetTick>
 8002d3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d40:	e011      	b.n	8002d66 <HAL_RCC_OscConfig+0x78e>
 8002d42:	bf00      	nop
 8002d44:	58024400 	.word	0x58024400
 8002d48:	58024800 	.word	0x58024800
 8002d4c:	fffffc0c 	.word	0xfffffc0c
 8002d50:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d54:	f7fd fdae 	bl	80008b4 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e08a      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d66:	4b47      	ldr	r3, [pc, #284]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x77c>
 8002d72:	e082      	b.n	8002e7a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d74:	4b43      	ldr	r3, [pc, #268]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a42      	ldr	r2, [pc, #264]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002d7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fd fd98 	bl	80008b4 <HAL_GetTick>
 8002d84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fd fd94 	bl	80008b4 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e070      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x7b0>
 8002da6:	e068      	b.n	8002e7a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002da8:	4b36      	ldr	r3, [pc, #216]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002dae:	4b35      	ldr	r3, [pc, #212]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d031      	beq.n	8002e20 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	f003 0203 	and.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d12a      	bne.n	8002e20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d122      	bne.n	8002e20 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d11a      	bne.n	8002e20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	0a5b      	lsrs	r3, r3, #9
 8002dee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d111      	bne.n	8002e20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	0c1b      	lsrs	r3, r3, #16
 8002e00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d108      	bne.n	8002e20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	0e1b      	lsrs	r3, r3, #24
 8002e12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e02b      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e24:	4b17      	ldr	r3, [pc, #92]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e28:	08db      	lsrs	r3, r3, #3
 8002e2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e2e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d01f      	beq.n	8002e7a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e3a:	4b12      	ldr	r3, [pc, #72]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3e:	4a11      	ldr	r2, [pc, #68]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e46:	f7fd fd35 	bl	80008b4 <HAL_GetTick>
 8002e4a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e4c:	bf00      	nop
 8002e4e:	f7fd fd31 	bl	80008b4 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d0f9      	beq.n	8002e4e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002e5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <HAL_RCC_OscConfig+0x8b0>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e66:	00d2      	lsls	r2, r2, #3
 8002e68:	4906      	ldr	r1, [pc, #24]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e6e:	4b05      	ldr	r3, [pc, #20]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e72:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3730      	adds	r7, #48	@ 0x30
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	58024400 	.word	0x58024400
 8002e88:	ffff0007 	.word	0xffff0007

08002e8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e19c      	b.n	80031da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea0:	4b8a      	ldr	r3, [pc, #552]	@ (80030cc <HAL_RCC_ClockConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d910      	bls.n	8002ed0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eae:	4b87      	ldr	r3, [pc, #540]	@ (80030cc <HAL_RCC_ClockConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 020f 	bic.w	r2, r3, #15
 8002eb6:	4985      	ldr	r1, [pc, #532]	@ (80030cc <HAL_RCC_ClockConfig+0x240>)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b83      	ldr	r3, [pc, #524]	@ (80030cc <HAL_RCC_ClockConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e184      	b.n	80031da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d010      	beq.n	8002efe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	4b7b      	ldr	r3, [pc, #492]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d908      	bls.n	8002efe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002eec:	4b78      	ldr	r3, [pc, #480]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	4975      	ldr	r1, [pc, #468]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d010      	beq.n	8002f2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	4b70      	ldr	r3, [pc, #448]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d908      	bls.n	8002f2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	496a      	ldr	r1, [pc, #424]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d010      	beq.n	8002f5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699a      	ldr	r2, [r3, #24]
 8002f3c:	4b64      	ldr	r3, [pc, #400]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d908      	bls.n	8002f5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f48:	4b61      	ldr	r3, [pc, #388]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	495e      	ldr	r1, [pc, #376]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d010      	beq.n	8002f88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	4b59      	ldr	r3, [pc, #356]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d908      	bls.n	8002f88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f76:	4b56      	ldr	r3, [pc, #344]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	4953      	ldr	r1, [pc, #332]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d010      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	4b4d      	ldr	r3, [pc, #308]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d908      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa4:	4b4a      	ldr	r3, [pc, #296]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f023 020f 	bic.w	r2, r3, #15
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4947      	ldr	r1, [pc, #284]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d055      	beq.n	800306e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fc2:	4b43      	ldr	r3, [pc, #268]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	4940      	ldr	r1, [pc, #256]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d107      	bne.n	8002fec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fdc:	4b3c      	ldr	r3, [pc, #240]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d121      	bne.n	800302c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0f6      	b.n	80031da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d107      	bne.n	8003004 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ff4:	4b36      	ldr	r3, [pc, #216]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d115      	bne.n	800302c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0ea      	b.n	80031da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d107      	bne.n	800301c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800300c:	4b30      	ldr	r3, [pc, #192]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0de      	b.n	80031da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800301c:	4b2c      	ldr	r3, [pc, #176]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0d6      	b.n	80031da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800302c:	4b28      	ldr	r3, [pc, #160]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	f023 0207 	bic.w	r2, r3, #7
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4925      	ldr	r1, [pc, #148]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 800303a:	4313      	orrs	r3, r2
 800303c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800303e:	f7fd fc39 	bl	80008b4 <HAL_GetTick>
 8003042:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003044:	e00a      	b.n	800305c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003046:	f7fd fc35 	bl	80008b4 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0be      	b.n	80031da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305c:	4b1c      	ldr	r3, [pc, #112]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	429a      	cmp	r2, r3
 800306c:	d1eb      	bne.n	8003046 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d010      	beq.n	800309c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	4b14      	ldr	r3, [pc, #80]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	429a      	cmp	r2, r3
 8003088:	d208      	bcs.n	800309c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308a:	4b11      	ldr	r3, [pc, #68]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f023 020f 	bic.w	r2, r3, #15
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	490e      	ldr	r1, [pc, #56]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8003098:	4313      	orrs	r3, r2
 800309a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800309c:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <HAL_RCC_ClockConfig+0x240>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d214      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <HAL_RCC_ClockConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 020f 	bic.w	r2, r3, #15
 80030b2:	4906      	ldr	r1, [pc, #24]	@ (80030cc <HAL_RCC_ClockConfig+0x240>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b04      	ldr	r3, [pc, #16]	@ (80030cc <HAL_RCC_ClockConfig+0x240>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e086      	b.n	80031da <HAL_RCC_ClockConfig+0x34e>
 80030cc:	52002000 	.word	0x52002000
 80030d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d010      	beq.n	8003102 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	4b3f      	ldr	r3, [pc, #252]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d208      	bcs.n	8003102 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030f0:	4b3c      	ldr	r3, [pc, #240]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	4939      	ldr	r1, [pc, #228]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d010      	beq.n	8003130 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	4b34      	ldr	r3, [pc, #208]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800311a:	429a      	cmp	r2, r3
 800311c:	d208      	bcs.n	8003130 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800311e:	4b31      	ldr	r3, [pc, #196]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	492e      	ldr	r1, [pc, #184]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 800312c:	4313      	orrs	r3, r2
 800312e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b00      	cmp	r3, #0
 800313a:	d010      	beq.n	800315e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699a      	ldr	r2, [r3, #24]
 8003140:	4b28      	ldr	r3, [pc, #160]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003148:	429a      	cmp	r2, r3
 800314a:	d208      	bcs.n	800315e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800314c:	4b25      	ldr	r3, [pc, #148]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	4922      	ldr	r1, [pc, #136]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 800315a:	4313      	orrs	r3, r2
 800315c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d010      	beq.n	800318c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69da      	ldr	r2, [r3, #28]
 800316e:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003176:	429a      	cmp	r2, r3
 8003178:	d208      	bcs.n	800318c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800317a:	4b1a      	ldr	r3, [pc, #104]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	4917      	ldr	r1, [pc, #92]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 8003188:	4313      	orrs	r3, r2
 800318a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800318c:	f000 f834 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 8003190:	4602      	mov	r2, r0
 8003192:	4b14      	ldr	r3, [pc, #80]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	4912      	ldr	r1, [pc, #72]	@ (80031e8 <HAL_RCC_ClockConfig+0x35c>)
 800319e:	5ccb      	ldrb	r3, [r1, r3]
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
 80031a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031aa:	4b0e      	ldr	r3, [pc, #56]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	4a0d      	ldr	r2, [pc, #52]	@ (80031e8 <HAL_RCC_ClockConfig+0x35c>)
 80031b4:	5cd3      	ldrb	r3, [r2, r3]
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
 80031c0:	4a0a      	ldr	r2, [pc, #40]	@ (80031ec <HAL_RCC_ClockConfig+0x360>)
 80031c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031c4:	4a0a      	ldr	r2, [pc, #40]	@ (80031f0 <HAL_RCC_ClockConfig+0x364>)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80031ca:	4b0a      	ldr	r3, [pc, #40]	@ (80031f4 <HAL_RCC_ClockConfig+0x368>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd fb26 	bl	8000820 <HAL_InitTick>
 80031d4:	4603      	mov	r3, r0
 80031d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	58024400 	.word	0x58024400
 80031e8:	08008d4c 	.word	0x08008d4c
 80031ec:	24000008 	.word	0x24000008
 80031f0:	24000004 	.word	0x24000004
 80031f4:	2400000c 	.word	0x2400000c

080031f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	@ 0x24
 80031fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031fe:	4bb3      	ldr	r3, [pc, #716]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003206:	2b18      	cmp	r3, #24
 8003208:	f200 8155 	bhi.w	80034b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800320c:	a201      	add	r2, pc, #4	@ (adr r2, 8003214 <HAL_RCC_GetSysClockFreq+0x1c>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003279 	.word	0x08003279
 8003218:	080034b7 	.word	0x080034b7
 800321c:	080034b7 	.word	0x080034b7
 8003220:	080034b7 	.word	0x080034b7
 8003224:	080034b7 	.word	0x080034b7
 8003228:	080034b7 	.word	0x080034b7
 800322c:	080034b7 	.word	0x080034b7
 8003230:	080034b7 	.word	0x080034b7
 8003234:	0800329f 	.word	0x0800329f
 8003238:	080034b7 	.word	0x080034b7
 800323c:	080034b7 	.word	0x080034b7
 8003240:	080034b7 	.word	0x080034b7
 8003244:	080034b7 	.word	0x080034b7
 8003248:	080034b7 	.word	0x080034b7
 800324c:	080034b7 	.word	0x080034b7
 8003250:	080034b7 	.word	0x080034b7
 8003254:	080032a5 	.word	0x080032a5
 8003258:	080034b7 	.word	0x080034b7
 800325c:	080034b7 	.word	0x080034b7
 8003260:	080034b7 	.word	0x080034b7
 8003264:	080034b7 	.word	0x080034b7
 8003268:	080034b7 	.word	0x080034b7
 800326c:	080034b7 	.word	0x080034b7
 8003270:	080034b7 	.word	0x080034b7
 8003274:	080032ab 	.word	0x080032ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003278:	4b94      	ldr	r3, [pc, #592]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b00      	cmp	r3, #0
 8003282:	d009      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003284:	4b91      	ldr	r3, [pc, #580]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	08db      	lsrs	r3, r3, #3
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	4a90      	ldr	r2, [pc, #576]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
 8003294:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003296:	e111      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003298:	4b8d      	ldr	r3, [pc, #564]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800329a:	61bb      	str	r3, [r7, #24]
      break;
 800329c:	e10e      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800329e:	4b8d      	ldr	r3, [pc, #564]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032a0:	61bb      	str	r3, [r7, #24]
      break;
 80032a2:	e10b      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80032a4:	4b8c      	ldr	r3, [pc, #560]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032a6:	61bb      	str	r3, [r7, #24]
      break;
 80032a8:	e108      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032aa:	4b88      	ldr	r3, [pc, #544]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80032b4:	4b85      	ldr	r3, [pc, #532]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032c0:	4b82      	ldr	r3, [pc, #520]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80032ca:	4b80      	ldr	r3, [pc, #512]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ce:	08db      	lsrs	r3, r3, #3
 80032d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	fb02 f303 	mul.w	r3, r2, r3
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80e1 	beq.w	80034b0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	f000 8083 	beq.w	80033fc <HAL_RCC_GetSysClockFreq+0x204>
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	f200 80a1 	bhi.w	8003440 <HAL_RCC_GetSysClockFreq+0x248>
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x114>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d056      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800330a:	e099      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800330c:	4b6f      	ldr	r3, [pc, #444]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d02d      	beq.n	8003374 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003318:	4b6c      	ldr	r3, [pc, #432]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	08db      	lsrs	r3, r3, #3
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	4a6b      	ldr	r2, [pc, #428]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
 8003328:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	ee07 3a90 	vmov	s15, r3
 8003330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003342:	4b62      	ldr	r3, [pc, #392]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003352:	ed97 6a02 	vldr	s12, [r7, #8]
 8003356:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80034dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800335a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800335e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800336a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003372:	e087      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80034e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003386:	4b51      	ldr	r3, [pc, #324]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003396:	ed97 6a02 	vldr	s12, [r7, #8]
 800339a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80034dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800339e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033b6:	e065      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80034e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ca:	4b40      	ldr	r3, [pc, #256]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d2:	ee07 3a90 	vmov	s15, r3
 80033d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033da:	ed97 6a02 	vldr	s12, [r7, #8]
 80033de:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80034dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80033e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033fa:	e043      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003406:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80034e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800340a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340e:	4b2f      	ldr	r3, [pc, #188]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003422:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80034dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800342a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800343e:	e021      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80034e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800344e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003452:	4b1e      	ldr	r3, [pc, #120]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003462:	ed97 6a02 	vldr	s12, [r7, #8]
 8003466:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80034dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800346a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800346e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800347a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003482:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003484:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003488:	0a5b      	lsrs	r3, r3, #9
 800348a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800348e:	3301      	adds	r3, #1
 8003490:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	ee07 3a90 	vmov	s15, r3
 8003498:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800349c:	edd7 6a07 	vldr	s13, [r7, #28]
 80034a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034a8:	ee17 3a90 	vmov	r3, s15
 80034ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80034ae:	e005      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61bb      	str	r3, [r7, #24]
      break;
 80034b4:	e002      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80034b6:	4b07      	ldr	r3, [pc, #28]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034b8:	61bb      	str	r3, [r7, #24]
      break;
 80034ba:	bf00      	nop
  }

  return sysclockfreq;
 80034bc:	69bb      	ldr	r3, [r7, #24]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3724      	adds	r7, #36	@ 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	58024400 	.word	0x58024400
 80034d0:	03d09000 	.word	0x03d09000
 80034d4:	003d0900 	.word	0x003d0900
 80034d8:	017d7840 	.word	0x017d7840
 80034dc:	46000000 	.word	0x46000000
 80034e0:	4c742400 	.word	0x4c742400
 80034e4:	4a742400 	.word	0x4a742400
 80034e8:	4bbebc20 	.word	0x4bbebc20

080034ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034f2:	f7ff fe81 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80034f6:	4602      	mov	r2, r0
 80034f8:	4b10      	ldr	r3, [pc, #64]	@ (800353c <HAL_RCC_GetHCLKFreq+0x50>)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	0a1b      	lsrs	r3, r3, #8
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	490f      	ldr	r1, [pc, #60]	@ (8003540 <HAL_RCC_GetHCLKFreq+0x54>)
 8003504:	5ccb      	ldrb	r3, [r1, r3]
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	fa22 f303 	lsr.w	r3, r2, r3
 800350e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003510:	4b0a      	ldr	r3, [pc, #40]	@ (800353c <HAL_RCC_GetHCLKFreq+0x50>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	4a09      	ldr	r2, [pc, #36]	@ (8003540 <HAL_RCC_GetHCLKFreq+0x54>)
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	fa22 f303 	lsr.w	r3, r2, r3
 8003526:	4a07      	ldr	r2, [pc, #28]	@ (8003544 <HAL_RCC_GetHCLKFreq+0x58>)
 8003528:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800352a:	4a07      	ldr	r2, [pc, #28]	@ (8003548 <HAL_RCC_GetHCLKFreq+0x5c>)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003530:	4b04      	ldr	r3, [pc, #16]	@ (8003544 <HAL_RCC_GetHCLKFreq+0x58>)
 8003532:	681b      	ldr	r3, [r3, #0]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	58024400 	.word	0x58024400
 8003540:	08008d4c 	.word	0x08008d4c
 8003544:	24000008 	.word	0x24000008
 8003548:	24000004 	.word	0x24000004

0800354c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800354c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003550:	b0ca      	sub	sp, #296	@ 0x128
 8003552:	af00      	add	r7, sp, #0
 8003554:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003558:	2300      	movs	r3, #0
 800355a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800355e:	2300      	movs	r3, #0
 8003560:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003570:	2500      	movs	r5, #0
 8003572:	ea54 0305 	orrs.w	r3, r4, r5
 8003576:	d049      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800357c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800357e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003582:	d02f      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003584:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003588:	d828      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800358a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800358e:	d01a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003590:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003594:	d822      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800359a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800359e:	d007      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035a0:	e01c      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a2:	4bb8      	ldr	r3, [pc, #736]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a6:	4ab7      	ldr	r2, [pc, #732]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035ae:	e01a      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b4:	3308      	adds	r3, #8
 80035b6:	2102      	movs	r1, #2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 f9d1 	bl	8004960 <RCCEx_PLL2_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035c4:	e00f      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ca:	3328      	adds	r3, #40	@ 0x28
 80035cc:	2102      	movs	r1, #2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f001 fa78 	bl	8004ac4 <RCCEx_PLL3_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035da:	e004      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035e2:	e000      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80035e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035ee:	4ba5      	ldr	r3, [pc, #660]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80035f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035fc:	4aa1      	ldr	r2, [pc, #644]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035fe:	430b      	orrs	r3, r1
 8003600:	6513      	str	r3, [r2, #80]	@ 0x50
 8003602:	e003      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003604:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003608:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003618:	f04f 0900 	mov.w	r9, #0
 800361c:	ea58 0309 	orrs.w	r3, r8, r9
 8003620:	d047      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003628:	2b04      	cmp	r3, #4
 800362a:	d82a      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800362c:	a201      	add	r2, pc, #4	@ (adr r2, 8003634 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	08003649 	.word	0x08003649
 8003638:	08003657 	.word	0x08003657
 800363c:	0800366d 	.word	0x0800366d
 8003640:	0800368b 	.word	0x0800368b
 8003644:	0800368b 	.word	0x0800368b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003648:	4b8e      	ldr	r3, [pc, #568]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364c:	4a8d      	ldr	r2, [pc, #564]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800364e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003654:	e01a      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365a:	3308      	adds	r3, #8
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f001 f97e 	bl	8004960 <RCCEx_PLL2_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800366a:	e00f      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800366c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003670:	3328      	adds	r3, #40	@ 0x28
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f001 fa25 	bl	8004ac4 <RCCEx_PLL3_Config>
 800367a:	4603      	mov	r3, r0
 800367c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003680:	e004      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003688:	e000      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800368a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800368c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003694:	4b7b      	ldr	r3, [pc, #492]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003698:	f023 0107 	bic.w	r1, r3, #7
 800369c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a2:	4a78      	ldr	r2, [pc, #480]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80036a8:	e003      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80036be:	f04f 0b00 	mov.w	fp, #0
 80036c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80036c6:	d04c      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80036c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036d2:	d030      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80036d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036d8:	d829      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036da:	2bc0      	cmp	r3, #192	@ 0xc0
 80036dc:	d02d      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80036de:	2bc0      	cmp	r3, #192	@ 0xc0
 80036e0:	d825      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036e2:	2b80      	cmp	r3, #128	@ 0x80
 80036e4:	d018      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80036e6:	2b80      	cmp	r3, #128	@ 0x80
 80036e8:	d821      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80036ee:	2b40      	cmp	r3, #64	@ 0x40
 80036f0:	d007      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80036f2:	e01c      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f4:	4b63      	ldr	r3, [pc, #396]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f8:	4a62      	ldr	r2, [pc, #392]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003700:	e01c      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003706:	3308      	adds	r3, #8
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f001 f928 	bl	8004960 <RCCEx_PLL2_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003716:	e011      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371c:	3328      	adds	r3, #40	@ 0x28
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f001 f9cf 	bl	8004ac4 <RCCEx_PLL3_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800372c:	e006      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003734:	e002      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800373a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800373c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003744:	4b4f      	ldr	r3, [pc, #316]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003748:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003752:	4a4c      	ldr	r2, [pc, #304]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003754:	430b      	orrs	r3, r1
 8003756:	6513      	str	r3, [r2, #80]	@ 0x50
 8003758:	e003      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800375e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800376e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003772:	2300      	movs	r3, #0
 8003774:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003778:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800377c:	460b      	mov	r3, r1
 800377e:	4313      	orrs	r3, r2
 8003780:	d053      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003786:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800378a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800378e:	d035      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003790:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003794:	d82e      	bhi.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003796:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800379a:	d031      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800379c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80037a0:	d828      	bhi.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037a6:	d01a      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x292>
 80037a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ac:	d822      	bhi.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80037b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037b6:	d007      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80037b8:	e01c      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ba:	4b32      	ldr	r3, [pc, #200]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	4a31      	ldr	r2, [pc, #196]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037c6:	e01c      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037cc:	3308      	adds	r3, #8
 80037ce:	2100      	movs	r1, #0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f001 f8c5 	bl	8004960 <RCCEx_PLL2_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037dc:	e011      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e2:	3328      	adds	r3, #40	@ 0x28
 80037e4:	2100      	movs	r1, #0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 f96c 	bl	8004ac4 <RCCEx_PLL3_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037f2:	e006      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037fa:	e002      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037fc:	bf00      	nop
 80037fe:	e000      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10b      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800380a:	4b1e      	ldr	r3, [pc, #120]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003816:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800381a:	4a1a      	ldr	r2, [pc, #104]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800381c:	430b      	orrs	r3, r1
 800381e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003820:	e003      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800382a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003836:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800383a:	2300      	movs	r3, #0
 800383c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003840:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003844:	460b      	mov	r3, r1
 8003846:	4313      	orrs	r3, r2
 8003848:	d056      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003852:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003856:	d038      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003858:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800385c:	d831      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800385e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003862:	d034      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003864:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003868:	d82b      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800386a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800386e:	d01d      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003870:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003874:	d825      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d006      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800387a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800387e:	d00a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003880:	e01f      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003882:	bf00      	nop
 8003884:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003888:	4ba2      	ldr	r3, [pc, #648]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	4aa1      	ldr	r2, [pc, #644]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800388e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003892:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003894:	e01c      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389a:	3308      	adds	r3, #8
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f001 f85e 	bl	8004960 <RCCEx_PLL2_Config>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038aa:	e011      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b0:	3328      	adds	r3, #40	@ 0x28
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f001 f905 	bl	8004ac4 <RCCEx_PLL3_Config>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038c0:	e006      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038c8:	e002      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038ca:	bf00      	nop
 80038cc:	e000      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10b      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038e8:	4a8a      	ldr	r2, [pc, #552]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ea:	430b      	orrs	r3, r1
 80038ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80038ee:	e003      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003900:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003904:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003908:	2300      	movs	r3, #0
 800390a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800390e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003912:	460b      	mov	r3, r1
 8003914:	4313      	orrs	r3, r2
 8003916:	d03a      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391e:	2b30      	cmp	r3, #48	@ 0x30
 8003920:	d01f      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003922:	2b30      	cmp	r3, #48	@ 0x30
 8003924:	d819      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003926:	2b20      	cmp	r3, #32
 8003928:	d00c      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800392a:	2b20      	cmp	r3, #32
 800392c:	d815      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d019      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003932:	2b10      	cmp	r3, #16
 8003934:	d111      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003936:	4b77      	ldr	r3, [pc, #476]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393a:	4a76      	ldr	r2, [pc, #472]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800393c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003940:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003942:	e011      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003948:	3308      	adds	r3, #8
 800394a:	2102      	movs	r1, #2
 800394c:	4618      	mov	r0, r3
 800394e:	f001 f807 	bl	8004960 <RCCEx_PLL2_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003958:	e006      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003960:	e002      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003962:	bf00      	nop
 8003964:	e000      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003970:	4b68      	ldr	r3, [pc, #416]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003974:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397e:	4a65      	ldr	r2, [pc, #404]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003980:	430b      	orrs	r3, r1
 8003982:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003984:	e003      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800398a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800399a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800399e:	2300      	movs	r3, #0
 80039a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80039a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4313      	orrs	r3, r2
 80039ac:	d051      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80039ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039b8:	d035      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80039ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039be:	d82e      	bhi.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039c4:	d031      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80039c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039ca:	d828      	bhi.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039d0:	d01a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80039d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039d6:	d822      	bhi.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80039dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039e0:	d007      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80039e2:	e01c      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039f0:	e01c      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f6:	3308      	adds	r3, #8
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 ffb0 	bl	8004960 <RCCEx_PLL2_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a06:	e011      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0c:	3328      	adds	r3, #40	@ 0x28
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 f857 	bl	8004ac4 <RCCEx_PLL3_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a1c:	e006      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a24:	e002      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a34:	4b37      	ldr	r3, [pc, #220]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a38:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a42:	4a34      	ldr	r2, [pc, #208]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a44:	430b      	orrs	r3, r1
 8003a46:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a48:	e003      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a62:	2300      	movs	r3, #0
 8003a64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a68:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	d056      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a7c:	d033      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a82:	d82c      	bhi.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a88:	d02f      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a8e:	d826      	bhi.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a94:	d02b      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a9a:	d820      	bhi.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aa0:	d012      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003aa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aa6:	d81a      	bhi.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d022      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab0:	d115      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	2101      	movs	r1, #1
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 ff50 	bl	8004960 <RCCEx_PLL2_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ac6:	e015      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003acc:	3328      	adds	r3, #40	@ 0x28
 8003ace:	2101      	movs	r1, #1
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fff7 	bl	8004ac4 <RCCEx_PLL3_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003adc:	e00a      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ae4:	e006      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ae6:	bf00      	nop
 8003ae8:	e004      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003aea:	bf00      	nop
 8003aec:	e002      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003aee:	bf00      	nop
 8003af0:	e000      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10d      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003afc:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b00:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b0a:	4a02      	ldr	r2, [pc, #8]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b10:	e006      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b12:	bf00      	nop
 8003b14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b36:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	d055      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b4c:	d033      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b52:	d82c      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b58:	d02f      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5e:	d826      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b64:	d02b      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b6a:	d820      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b70:	d012      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b76:	d81a      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d022      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b80:	d115      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b86:	3308      	adds	r3, #8
 8003b88:	2101      	movs	r1, #1
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fee8 	bl	8004960 <RCCEx_PLL2_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b96:	e015      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9c:	3328      	adds	r3, #40	@ 0x28
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 ff8f 	bl	8004ac4 <RCCEx_PLL3_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bb4:	e006      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bb6:	bf00      	nop
 8003bb8:	e004      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bba:	bf00      	nop
 8003bbc:	e002      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10b      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bcc:	4ba3      	ldr	r3, [pc, #652]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bdc:	4a9f      	ldr	r2, [pc, #636]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bde:	430b      	orrs	r3, r1
 8003be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003be2:	e003      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c06:	460b      	mov	r3, r1
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	d037      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c16:	d00e      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c1c:	d816      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d018      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c26:	d111      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c28:	4b8c      	ldr	r3, [pc, #560]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2c:	4a8b      	ldr	r2, [pc, #556]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c34:	e00f      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3a:	3308      	adds	r3, #8
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fe8e 	bl	8004960 <RCCEx_PLL2_Config>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c4a:	e004      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c52:	e000      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c5e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c62:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6c:	4a7b      	ldr	r2, [pc, #492]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c6e:	430b      	orrs	r3, r1
 8003c70:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c72:	e003      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	d039      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d81c      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cac:	08003ce9 	.word	0x08003ce9
 8003cb0:	08003cbd 	.word	0x08003cbd
 8003cb4:	08003ccb 	.word	0x08003ccb
 8003cb8:	08003ce9 	.word	0x08003ce9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cbc:	4b67      	ldr	r3, [pc, #412]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc0:	4a66      	ldr	r2, [pc, #408]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cc8:	e00f      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cce:	3308      	adds	r3, #8
 8003cd0:	2102      	movs	r1, #2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fe44 	bl	8004960 <RCCEx_PLL2_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cde:	e004      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ce6:	e000      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cf2:	4b5a      	ldr	r3, [pc, #360]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf6:	f023 0103 	bic.w	r1, r3, #3
 8003cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d00:	4a56      	ldr	r2, [pc, #344]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d02:	430b      	orrs	r3, r1
 8003d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d06:	e003      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f000 809f 	beq.w	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d32:	4b4b      	ldr	r3, [pc, #300]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a4a      	ldr	r2, [pc, #296]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d3e:	f7fc fdb9 	bl	80008b4 <HAL_GetTick>
 8003d42:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d46:	e00b      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d48:	f7fc fdb4 	bl	80008b4 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b64      	cmp	r3, #100	@ 0x64
 8003d56:	d903      	bls.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d5e:	e005      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d60:	4b3f      	ldr	r3, [pc, #252]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ed      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d179      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d74:	4b39      	ldr	r3, [pc, #228]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d80:	4053      	eors	r3, r2
 8003d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d015      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d8a:	4b34      	ldr	r3, [pc, #208]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d96:	4b31      	ldr	r3, [pc, #196]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9a:	4a30      	ldr	r2, [pc, #192]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003da2:	4b2e      	ldr	r3, [pc, #184]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da6:	4a2d      	ldr	r2, [pc, #180]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003dae:	4a2b      	ldr	r2, [pc, #172]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003db4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dc2:	d118      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fc fd76 	bl	80008b4 <HAL_GetTick>
 8003dc8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dcc:	e00d      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fc fd71 	bl	80008b4 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003dd8:	1ad2      	subs	r2, r2, r3
 8003dda:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d903      	bls.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003de8:	e005      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dea:	4b1c      	ldr	r3, [pc, #112]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0eb      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d129      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e0e:	d10e      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003e10:	4b12      	ldr	r3, [pc, #72]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e20:	091a      	lsrs	r2, r3, #4
 8003e22:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	4a0d      	ldr	r2, [pc, #52]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	6113      	str	r3, [r2, #16]
 8003e2c:	e005      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	4a0a      	ldr	r2, [pc, #40]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e38:	6113      	str	r3, [r2, #16]
 8003e3a:	4b08      	ldr	r3, [pc, #32]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e3c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e4a:	4a04      	ldr	r2, [pc, #16]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e50:	e00e      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003e5a:	e009      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e5c:	58024400 	.word	0x58024400
 8003e60:	58024800 	.word	0x58024800
 8003e64:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e78:	f002 0301 	and.w	r3, r2, #1
 8003e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e80:	2300      	movs	r3, #0
 8003e82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f000 8089 	beq.w	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e98:	2b28      	cmp	r3, #40	@ 0x28
 8003e9a:	d86b      	bhi.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003f7d 	.word	0x08003f7d
 8003ea8:	08003f75 	.word	0x08003f75
 8003eac:	08003f75 	.word	0x08003f75
 8003eb0:	08003f75 	.word	0x08003f75
 8003eb4:	08003f75 	.word	0x08003f75
 8003eb8:	08003f75 	.word	0x08003f75
 8003ebc:	08003f75 	.word	0x08003f75
 8003ec0:	08003f75 	.word	0x08003f75
 8003ec4:	08003f49 	.word	0x08003f49
 8003ec8:	08003f75 	.word	0x08003f75
 8003ecc:	08003f75 	.word	0x08003f75
 8003ed0:	08003f75 	.word	0x08003f75
 8003ed4:	08003f75 	.word	0x08003f75
 8003ed8:	08003f75 	.word	0x08003f75
 8003edc:	08003f75 	.word	0x08003f75
 8003ee0:	08003f75 	.word	0x08003f75
 8003ee4:	08003f5f 	.word	0x08003f5f
 8003ee8:	08003f75 	.word	0x08003f75
 8003eec:	08003f75 	.word	0x08003f75
 8003ef0:	08003f75 	.word	0x08003f75
 8003ef4:	08003f75 	.word	0x08003f75
 8003ef8:	08003f75 	.word	0x08003f75
 8003efc:	08003f75 	.word	0x08003f75
 8003f00:	08003f75 	.word	0x08003f75
 8003f04:	08003f7d 	.word	0x08003f7d
 8003f08:	08003f75 	.word	0x08003f75
 8003f0c:	08003f75 	.word	0x08003f75
 8003f10:	08003f75 	.word	0x08003f75
 8003f14:	08003f75 	.word	0x08003f75
 8003f18:	08003f75 	.word	0x08003f75
 8003f1c:	08003f75 	.word	0x08003f75
 8003f20:	08003f75 	.word	0x08003f75
 8003f24:	08003f7d 	.word	0x08003f7d
 8003f28:	08003f75 	.word	0x08003f75
 8003f2c:	08003f75 	.word	0x08003f75
 8003f30:	08003f75 	.word	0x08003f75
 8003f34:	08003f75 	.word	0x08003f75
 8003f38:	08003f75 	.word	0x08003f75
 8003f3c:	08003f75 	.word	0x08003f75
 8003f40:	08003f75 	.word	0x08003f75
 8003f44:	08003f7d 	.word	0x08003f7d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	2101      	movs	r1, #1
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fd05 	bl	8004960 <RCCEx_PLL2_Config>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f5c:	e00f      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f62:	3328      	adds	r3, #40	@ 0x28
 8003f64:	2101      	movs	r1, #1
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fdac 	bl	8004ac4 <RCCEx_PLL3_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f72:	e004      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f7a:	e000      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10a      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f86:	4bbf      	ldr	r3, [pc, #764]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f94:	4abb      	ldr	r2, [pc, #748]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f96:	430b      	orrs	r3, r1
 8003f98:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f9a:	e003      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	f002 0302 	and.w	r3, r2, #2
 8003fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003fba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	d041      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d824      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003fce:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08004021 	.word	0x08004021
 8003fd8:	08003fed 	.word	0x08003fed
 8003fdc:	08004003 	.word	0x08004003
 8003fe0:	08004021 	.word	0x08004021
 8003fe4:	08004021 	.word	0x08004021
 8003fe8:	08004021 	.word	0x08004021
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fcb3 	bl	8004960 <RCCEx_PLL2_Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004000:	e00f      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004006:	3328      	adds	r3, #40	@ 0x28
 8004008:	2101      	movs	r1, #1
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fd5a 	bl	8004ac4 <RCCEx_PLL3_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004016:	e004      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800401e:	e000      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10a      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800402a:	4b96      	ldr	r3, [pc, #600]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800402c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402e:	f023 0107 	bic.w	r1, r3, #7
 8004032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004036:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004038:	4a92      	ldr	r2, [pc, #584]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800403a:	430b      	orrs	r3, r1
 800403c:	6553      	str	r3, [r2, #84]	@ 0x54
 800403e:	e003      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004044:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f002 0304 	and.w	r3, r2, #4
 8004054:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004058:	2300      	movs	r3, #0
 800405a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800405e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004062:	460b      	mov	r3, r1
 8004064:	4313      	orrs	r3, r2
 8004066:	d044      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004070:	2b05      	cmp	r3, #5
 8004072:	d825      	bhi.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004074:	a201      	add	r2, pc, #4	@ (adr r2, 800407c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407a:	bf00      	nop
 800407c:	080040c9 	.word	0x080040c9
 8004080:	08004095 	.word	0x08004095
 8004084:	080040ab 	.word	0x080040ab
 8004088:	080040c9 	.word	0x080040c9
 800408c:	080040c9 	.word	0x080040c9
 8004090:	080040c9 	.word	0x080040c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004098:	3308      	adds	r3, #8
 800409a:	2101      	movs	r1, #1
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fc5f 	bl	8004960 <RCCEx_PLL2_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040a8:	e00f      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ae:	3328      	adds	r3, #40	@ 0x28
 80040b0:	2101      	movs	r1, #1
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fd06 	bl	8004ac4 <RCCEx_PLL3_Config>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040be:	e004      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040c6:	e000      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80040c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040d2:	4b6c      	ldr	r3, [pc, #432]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d6:	f023 0107 	bic.w	r1, r3, #7
 80040da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040e2:	4a68      	ldr	r2, [pc, #416]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040e8:	e003      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fa:	f002 0320 	and.w	r3, r2, #32
 80040fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004102:	2300      	movs	r3, #0
 8004104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004108:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800410c:	460b      	mov	r3, r1
 800410e:	4313      	orrs	r3, r2
 8004110:	d055      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800411e:	d033      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004124:	d82c      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800412a:	d02f      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800412c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004130:	d826      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004132:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004136:	d02b      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004138:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800413c:	d820      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800413e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004142:	d012      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004148:	d81a      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800414a:	2b00      	cmp	r3, #0
 800414c:	d022      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800414e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004152:	d115      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004158:	3308      	adds	r3, #8
 800415a:	2100      	movs	r1, #0
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fbff 	bl	8004960 <RCCEx_PLL2_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004168:	e015      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416e:	3328      	adds	r3, #40	@ 0x28
 8004170:	2102      	movs	r1, #2
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fca6 	bl	8004ac4 <RCCEx_PLL3_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800417e:	e00a      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004186:	e006      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004188:	bf00      	nop
 800418a:	e004      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800418c:	bf00      	nop
 800418e:	e002      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004190:	bf00      	nop
 8004192:	e000      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800419e:	4b39      	ldr	r3, [pc, #228]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ae:	4a35      	ldr	r2, [pc, #212]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041b0:	430b      	orrs	r3, r1
 80041b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80041b4:	e003      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80041ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041ce:	2300      	movs	r3, #0
 80041d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80041d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80041d8:	460b      	mov	r3, r1
 80041da:	4313      	orrs	r3, r2
 80041dc:	d058      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041e6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041ea:	d033      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80041ec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041f0:	d82c      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f6:	d02f      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80041f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041fc:	d826      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004202:	d02b      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004204:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004208:	d820      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800420a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800420e:	d012      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004214:	d81a      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004216:	2b00      	cmp	r3, #0
 8004218:	d022      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800421a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800421e:	d115      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004224:	3308      	adds	r3, #8
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fb99 	bl	8004960 <RCCEx_PLL2_Config>
 800422e:	4603      	mov	r3, r0
 8004230:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004234:	e015      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423a:	3328      	adds	r3, #40	@ 0x28
 800423c:	2102      	movs	r1, #2
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fc40 	bl	8004ac4 <RCCEx_PLL3_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800424a:	e00a      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004252:	e006      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004254:	bf00      	nop
 8004256:	e004      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004258:	bf00      	nop
 800425a:	e002      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800425c:	bf00      	nop
 800425e:	e000      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10e      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800426a:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800426c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004276:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800427a:	4a02      	ldr	r2, [pc, #8]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800427c:	430b      	orrs	r3, r1
 800427e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004280:	e006      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004282:	bf00      	nop
 8004284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800428c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800429c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042a0:	2300      	movs	r3, #0
 80042a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80042aa:	460b      	mov	r3, r1
 80042ac:	4313      	orrs	r3, r2
 80042ae:	d055      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80042b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042b8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042bc:	d033      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80042be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042c2:	d82c      	bhi.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042c8:	d02f      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80042ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ce:	d826      	bhi.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042d0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042d4:	d02b      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80042d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042da:	d820      	bhi.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042e0:	d012      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80042e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042e6:	d81a      	bhi.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d022      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80042ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042f0:	d115      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f6:	3308      	adds	r3, #8
 80042f8:	2100      	movs	r1, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fb30 	bl	8004960 <RCCEx_PLL2_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004306:	e015      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430c:	3328      	adds	r3, #40	@ 0x28
 800430e:	2102      	movs	r1, #2
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fbd7 	bl	8004ac4 <RCCEx_PLL3_Config>
 8004316:	4603      	mov	r3, r0
 8004318:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800431c:	e00a      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004324:	e006      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004326:	bf00      	nop
 8004328:	e004      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800432a:	bf00      	nop
 800432c:	e002      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800433c:	4ba1      	ldr	r3, [pc, #644]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004340:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004348:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800434c:	4a9d      	ldr	r2, [pc, #628]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800434e:	430b      	orrs	r3, r1
 8004350:	6593      	str	r3, [r2, #88]	@ 0x58
 8004352:	e003      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f002 0308 	and.w	r3, r2, #8
 8004368:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004372:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004376:	460b      	mov	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	d01e      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004388:	d10c      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800438a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438e:	3328      	adds	r3, #40	@ 0x28
 8004390:	2102      	movs	r1, #2
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fb96 	bl	8004ac4 <RCCEx_PLL3_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043a4:	4b87      	ldr	r3, [pc, #540]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043b4:	4a83      	ldr	r2, [pc, #524]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043b6:	430b      	orrs	r3, r1
 80043b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	f002 0310 	and.w	r3, r2, #16
 80043c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043ca:	2300      	movs	r3, #0
 80043cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80043d4:	460b      	mov	r3, r1
 80043d6:	4313      	orrs	r3, r2
 80043d8:	d01e      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043e6:	d10c      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ec:	3328      	adds	r3, #40	@ 0x28
 80043ee:	2102      	movs	r1, #2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fb67 	bl	8004ac4 <RCCEx_PLL3_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004402:	4b70      	ldr	r3, [pc, #448]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004406:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800440a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004412:	4a6c      	ldr	r2, [pc, #432]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004414:	430b      	orrs	r3, r1
 8004416:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004424:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004428:	2300      	movs	r3, #0
 800442a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800442e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004432:	460b      	mov	r3, r1
 8004434:	4313      	orrs	r3, r2
 8004436:	d03e      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004444:	d022      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004446:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800444a:	d81b      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004454:	d00b      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004456:	e015      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445c:	3308      	adds	r3, #8
 800445e:	2100      	movs	r1, #0
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fa7d 	bl	8004960 <RCCEx_PLL2_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800446c:	e00f      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800446e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004472:	3328      	adds	r3, #40	@ 0x28
 8004474:	2102      	movs	r1, #2
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fb24 	bl	8004ac4 <RCCEx_PLL3_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004482:	e004      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800448a:	e000      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800448c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10b      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004496:	4b4b      	ldr	r3, [pc, #300]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044a6:	4a47      	ldr	r2, [pc, #284]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80044ac:	e003      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80044c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044c4:	2300      	movs	r3, #0
 80044c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80044cc:	460b      	mov	r3, r1
 80044ce:	4313      	orrs	r3, r2
 80044d0:	d03b      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044de:	d01f      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80044e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044e4:	d818      	bhi.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80044e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044ea:	d003      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80044ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044f0:	d007      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80044f2:	e011      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f4:	4b33      	ldr	r3, [pc, #204]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f8:	4a32      	ldr	r2, [pc, #200]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004500:	e00f      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004506:	3328      	adds	r3, #40	@ 0x28
 8004508:	2101      	movs	r1, #1
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fada 	bl	8004ac4 <RCCEx_PLL3_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004516:	e004      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800451e:	e000      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10b      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800452a:	4b26      	ldr	r3, [pc, #152]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800452c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453a:	4a22      	ldr	r2, [pc, #136]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800453c:	430b      	orrs	r3, r1
 800453e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004540:	e003      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004546:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004556:	673b      	str	r3, [r7, #112]	@ 0x70
 8004558:	2300      	movs	r3, #0
 800455a:	677b      	str	r3, [r7, #116]	@ 0x74
 800455c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004560:	460b      	mov	r3, r1
 8004562:	4313      	orrs	r3, r2
 8004564:	d034      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004574:	d007      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004576:	e011      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004578:	4b12      	ldr	r3, [pc, #72]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457c:	4a11      	ldr	r2, [pc, #68]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800457e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004584:	e00e      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458a:	3308      	adds	r3, #8
 800458c:	2102      	movs	r1, #2
 800458e:	4618      	mov	r0, r3
 8004590:	f000 f9e6 	bl	8004960 <RCCEx_PLL2_Config>
 8004594:	4603      	mov	r3, r0
 8004596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800459a:	e003      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10d      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045ac:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ba:	4a02      	ldr	r2, [pc, #8]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045bc:	430b      	orrs	r3, r1
 80045be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045c0:	e006      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80045c2:	bf00      	nop
 80045c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80045dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045de:	2300      	movs	r3, #0
 80045e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80045e6:	460b      	mov	r3, r1
 80045e8:	4313      	orrs	r3, r2
 80045ea:	d00c      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f0:	3328      	adds	r3, #40	@ 0x28
 80045f2:	2102      	movs	r1, #2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fa65 	bl	8004ac4 <RCCEx_PLL3_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004612:	663b      	str	r3, [r7, #96]	@ 0x60
 8004614:	2300      	movs	r3, #0
 8004616:	667b      	str	r3, [r7, #100]	@ 0x64
 8004618:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800461c:	460b      	mov	r3, r1
 800461e:	4313      	orrs	r3, r2
 8004620:	d038      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800462a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800462e:	d018      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004630:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004634:	d811      	bhi.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004636:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800463a:	d014      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800463c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004640:	d80b      	bhi.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d011      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800464a:	d106      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800464c:	4bc3      	ldr	r3, [pc, #780]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800464e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004650:	4ac2      	ldr	r2, [pc, #776]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004656:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004658:	e008      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004660:	e004      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004662:	bf00      	nop
 8004664:	e002      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004666:	bf00      	nop
 8004668:	e000      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800466a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800466c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10b      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004674:	4bb9      	ldr	r3, [pc, #740]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004678:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800467c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004684:	4ab5      	ldr	r2, [pc, #724]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004686:	430b      	orrs	r3, r1
 8004688:	6553      	str	r3, [r2, #84]	@ 0x54
 800468a:	e003      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004690:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80046a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046a2:	2300      	movs	r3, #0
 80046a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80046aa:	460b      	mov	r3, r1
 80046ac:	4313      	orrs	r3, r2
 80046ae:	d009      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046b0:	4baa      	ldr	r3, [pc, #680]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80046b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046be:	4aa7      	ldr	r2, [pc, #668]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c0:	430b      	orrs	r3, r1
 80046c2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80046d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80046d2:	2300      	movs	r3, #0
 80046d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80046d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80046da:	460b      	mov	r3, r1
 80046dc:	4313      	orrs	r3, r2
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80046e0:	4b9e      	ldr	r3, [pc, #632]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80046f0:	4a9a      	ldr	r2, [pc, #616]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f2:	430b      	orrs	r3, r1
 80046f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004702:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004704:	2300      	movs	r3, #0
 8004706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004708:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800470c:	460b      	mov	r3, r1
 800470e:	4313      	orrs	r3, r2
 8004710:	d009      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004712:	4b92      	ldr	r3, [pc, #584]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004716:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004720:	4a8e      	ldr	r2, [pc, #568]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004722:	430b      	orrs	r3, r1
 8004724:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004732:	643b      	str	r3, [r7, #64]	@ 0x40
 8004734:	2300      	movs	r3, #0
 8004736:	647b      	str	r3, [r7, #68]	@ 0x44
 8004738:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800473c:	460b      	mov	r3, r1
 800473e:	4313      	orrs	r3, r2
 8004740:	d00e      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004742:	4b86      	ldr	r3, [pc, #536]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	4a85      	ldr	r2, [pc, #532]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004748:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800474c:	6113      	str	r3, [r2, #16]
 800474e:	4b83      	ldr	r3, [pc, #524]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004750:	6919      	ldr	r1, [r3, #16]
 8004752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004756:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800475a:	4a80      	ldr	r2, [pc, #512]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800475c:	430b      	orrs	r3, r1
 800475e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800476c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800476e:	2300      	movs	r3, #0
 8004770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004772:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004776:	460b      	mov	r3, r1
 8004778:	4313      	orrs	r3, r2
 800477a:	d009      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800477c:	4b77      	ldr	r3, [pc, #476]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800477e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004780:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478a:	4a74      	ldr	r2, [pc, #464]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800478c:	430b      	orrs	r3, r1
 800478e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004798:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800479c:	633b      	str	r3, [r7, #48]	@ 0x30
 800479e:	2300      	movs	r3, #0
 80047a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80047a6:	460b      	mov	r3, r1
 80047a8:	4313      	orrs	r3, r2
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047ac:	4b6b      	ldr	r3, [pc, #428]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80047b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047bc:	4a67      	ldr	r2, [pc, #412]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047be:	430b      	orrs	r3, r1
 80047c0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80047c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ca:	2100      	movs	r1, #0
 80047cc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80047d8:	460b      	mov	r3, r1
 80047da:	4313      	orrs	r3, r2
 80047dc:	d011      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e2:	3308      	adds	r3, #8
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f8ba 	bl	8004960 <RCCEx_PLL2_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	2100      	movs	r1, #0
 800480c:	6239      	str	r1, [r7, #32]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	627b      	str	r3, [r7, #36]	@ 0x24
 8004814:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004818:	460b      	mov	r3, r1
 800481a:	4313      	orrs	r3, r2
 800481c:	d011      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800481e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004822:	3308      	adds	r3, #8
 8004824:	2101      	movs	r1, #1
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f89a 	bl	8004960 <RCCEx_PLL2_Config>
 800482c:	4603      	mov	r3, r0
 800482e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800483e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	2100      	movs	r1, #0
 800484c:	61b9      	str	r1, [r7, #24]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004858:	460b      	mov	r3, r1
 800485a:	4313      	orrs	r3, r2
 800485c:	d011      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800485e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004862:	3308      	adds	r3, #8
 8004864:	2102      	movs	r1, #2
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f87a 	bl	8004960 <RCCEx_PLL2_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800487e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488a:	2100      	movs	r1, #0
 800488c:	6139      	str	r1, [r7, #16]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004898:	460b      	mov	r3, r1
 800489a:	4313      	orrs	r3, r2
 800489c:	d011      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800489e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a2:	3328      	adds	r3, #40	@ 0x28
 80048a4:	2100      	movs	r1, #0
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f90c 	bl	8004ac4 <RCCEx_PLL3_Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80048b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80048c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	2100      	movs	r1, #0
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	f003 0310 	and.w	r3, r3, #16
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80048d8:	460b      	mov	r3, r1
 80048da:	4313      	orrs	r3, r2
 80048dc:	d011      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e2:	3328      	adds	r3, #40	@ 0x28
 80048e4:	2101      	movs	r1, #1
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 f8ec 	bl	8004ac4 <RCCEx_PLL3_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	2100      	movs	r1, #0
 800490c:	6039      	str	r1, [r7, #0]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	607b      	str	r3, [r7, #4]
 8004914:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004918:	460b      	mov	r3, r1
 800491a:	4313      	orrs	r3, r2
 800491c:	d011      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004922:	3328      	adds	r3, #40	@ 0x28
 8004924:	2102      	movs	r1, #2
 8004926:	4618      	mov	r0, r3
 8004928:	f000 f8cc 	bl	8004ac4 <RCCEx_PLL3_Config>
 800492c:	4603      	mov	r3, r0
 800492e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800493e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004942:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	e000      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
}
 8004950:	4618      	mov	r0, r3
 8004952:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004956:	46bd      	mov	sp, r7
 8004958:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800495c:	58024400 	.word	0x58024400

08004960 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800496e:	4b53      	ldr	r3, [pc, #332]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b03      	cmp	r3, #3
 8004978:	d101      	bne.n	800497e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e099      	b.n	8004ab2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800497e:	4b4f      	ldr	r3, [pc, #316]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a4e      	ldr	r2, [pc, #312]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004984:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498a:	f7fb ff93 	bl	80008b4 <HAL_GetTick>
 800498e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004990:	e008      	b.n	80049a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004992:	f7fb ff8f 	bl	80008b4 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e086      	b.n	8004ab2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049a4:	4b45      	ldr	r3, [pc, #276]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1f0      	bne.n	8004992 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80049b0:	4b42      	ldr	r3, [pc, #264]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	031b      	lsls	r3, r3, #12
 80049be:	493f      	ldr	r1, [pc, #252]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	025b      	lsls	r3, r3, #9
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	3b01      	subs	r3, #1
 80049e0:	041b      	lsls	r3, r3, #16
 80049e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	061b      	lsls	r3, r3, #24
 80049f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80049f4:	4931      	ldr	r1, [pc, #196]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80049fa:	4b30      	ldr	r3, [pc, #192]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 80049fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	492d      	ldr	r1, [pc, #180]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	f023 0220 	bic.w	r2, r3, #32
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	4928      	ldr	r1, [pc, #160]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a1e:	4b27      	ldr	r3, [pc, #156]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a22:	4a26      	ldr	r2, [pc, #152]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a24:	f023 0310 	bic.w	r3, r3, #16
 8004a28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a2a:	4b24      	ldr	r3, [pc, #144]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a2e:	4b24      	ldr	r3, [pc, #144]	@ (8004ac0 <RCCEx_PLL2_Config+0x160>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	69d2      	ldr	r2, [r2, #28]
 8004a36:	00d2      	lsls	r2, r2, #3
 8004a38:	4920      	ldr	r1, [pc, #128]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	4a1e      	ldr	r2, [pc, #120]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a44:	f043 0310 	orr.w	r3, r3, #16
 8004a48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d106      	bne.n	8004a5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a50:	4b1a      	ldr	r3, [pc, #104]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a54:	4a19      	ldr	r2, [pc, #100]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a5c:	e00f      	b.n	8004a7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d106      	bne.n	8004a72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a64:	4b15      	ldr	r3, [pc, #84]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a68:	4a14      	ldr	r2, [pc, #80]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a70:	e005      	b.n	8004a7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a72:	4b12      	ldr	r3, [pc, #72]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a76:	4a11      	ldr	r2, [pc, #68]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a0e      	ldr	r2, [pc, #56]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8a:	f7fb ff13 	bl	80008b4 <HAL_GetTick>
 8004a8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a90:	e008      	b.n	8004aa4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a92:	f7fb ff0f 	bl	80008b4 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e006      	b.n	8004ab2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004aa4:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	58024400 	.word	0x58024400
 8004ac0:	ffff0007 	.word	0xffff0007

08004ac4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ad2:	4b53      	ldr	r3, [pc, #332]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d101      	bne.n	8004ae2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e099      	b.n	8004c16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a4e      	ldr	r2, [pc, #312]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004ae8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aee:	f7fb fee1 	bl	80008b4 <HAL_GetTick>
 8004af2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004af4:	e008      	b.n	8004b08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004af6:	f7fb fedd 	bl	80008b4 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e086      	b.n	8004c16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b08:	4b45      	ldr	r3, [pc, #276]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f0      	bne.n	8004af6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b14:	4b42      	ldr	r3, [pc, #264]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b18:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	051b      	lsls	r3, r3, #20
 8004b22:	493f      	ldr	r1, [pc, #252]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	025b      	lsls	r3, r3, #9
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	041b      	lsls	r3, r3, #16
 8004b46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	061b      	lsls	r3, r3, #24
 8004b54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b58:	4931      	ldr	r1, [pc, #196]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b5e:	4b30      	ldr	r3, [pc, #192]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b62:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	492d      	ldr	r1, [pc, #180]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b70:	4b2b      	ldr	r3, [pc, #172]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b74:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	4928      	ldr	r1, [pc, #160]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b82:	4b27      	ldr	r3, [pc, #156]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	4a26      	ldr	r2, [pc, #152]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b8e:	4b24      	ldr	r3, [pc, #144]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b92:	4b24      	ldr	r3, [pc, #144]	@ (8004c24 <RCCEx_PLL3_Config+0x160>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	69d2      	ldr	r2, [r2, #28]
 8004b9a:	00d2      	lsls	r2, r2, #3
 8004b9c:	4920      	ldr	r1, [pc, #128]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d106      	bne.n	8004bc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb8:	4a19      	ldr	r2, [pc, #100]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004bba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004bbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004bc0:	e00f      	b.n	8004be2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d106      	bne.n	8004bd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004bc8:	4b15      	ldr	r3, [pc, #84]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bcc:	4a14      	ldr	r2, [pc, #80]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004bce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004bd4:	e005      	b.n	8004be2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004bd6:	4b12      	ldr	r3, [pc, #72]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	4a11      	ldr	r2, [pc, #68]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004bdc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004be0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004be2:	4b0f      	ldr	r3, [pc, #60]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a0e      	ldr	r2, [pc, #56]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bee:	f7fb fe61 	bl	80008b4 <HAL_GetTick>
 8004bf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bf4:	e008      	b.n	8004c08 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004bf6:	f7fb fe5d 	bl	80008b4 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e006      	b.n	8004c16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c08:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f0      	beq.n	8004bf6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	58024400 	.word	0x58024400
 8004c24:	ffff0007 	.word	0xffff0007

08004c28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c28:	b084      	sub	sp, #16
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	f107 001c 	add.w	r0, r7, #28
 8004c36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d121      	bne.n	8004c86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	4b2c      	ldr	r3, [pc, #176]	@ (8004d04 <USB_CoreInit+0xdc>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d105      	bne.n	8004c7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f001 fafa 	bl	8006274 <USB_CoreReset>
 8004c80:	4603      	mov	r3, r0
 8004c82:	73fb      	strb	r3, [r7, #15]
 8004c84:	e01b      	b.n	8004cbe <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f001 faee 	bl	8006274 <USB_CoreReset>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d106      	bne.n	8004cb2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	639a      	str	r2, [r3, #56]	@ 0x38
 8004cb0:	e005      	b.n	8004cbe <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004cbe:	7fbb      	ldrb	r3, [r7, #30]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d116      	bne.n	8004cf2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d08 <USB_CoreInit+0xe0>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f043 0206 	orr.w	r2, r3, #6
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f043 0220 	orr.w	r2, r3, #32
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cfe:	b004      	add	sp, #16
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	ffbdffbf 	.word	0xffbdffbf
 8004d08:	03ee0000 	.word	0x03ee0000

08004d0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	4613      	mov	r3, r2
 8004d18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d165      	bne.n	8004dec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4a41      	ldr	r2, [pc, #260]	@ (8004e28 <USB_SetTurnaroundTime+0x11c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d906      	bls.n	8004d36 <USB_SetTurnaroundTime+0x2a>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4a40      	ldr	r2, [pc, #256]	@ (8004e2c <USB_SetTurnaroundTime+0x120>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d202      	bcs.n	8004d36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d30:	230f      	movs	r3, #15
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	e062      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	4a3c      	ldr	r2, [pc, #240]	@ (8004e2c <USB_SetTurnaroundTime+0x120>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d306      	bcc.n	8004d4c <USB_SetTurnaroundTime+0x40>
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	4a3b      	ldr	r2, [pc, #236]	@ (8004e30 <USB_SetTurnaroundTime+0x124>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d202      	bcs.n	8004d4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d46:	230e      	movs	r3, #14
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	e057      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4a38      	ldr	r2, [pc, #224]	@ (8004e30 <USB_SetTurnaroundTime+0x124>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d306      	bcc.n	8004d62 <USB_SetTurnaroundTime+0x56>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4a37      	ldr	r2, [pc, #220]	@ (8004e34 <USB_SetTurnaroundTime+0x128>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d202      	bcs.n	8004d62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d5c:	230d      	movs	r3, #13
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	e04c      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4a33      	ldr	r2, [pc, #204]	@ (8004e34 <USB_SetTurnaroundTime+0x128>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d306      	bcc.n	8004d78 <USB_SetTurnaroundTime+0x6c>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	4a32      	ldr	r2, [pc, #200]	@ (8004e38 <USB_SetTurnaroundTime+0x12c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d802      	bhi.n	8004d78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d72:	230c      	movs	r3, #12
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	e041      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4a2f      	ldr	r2, [pc, #188]	@ (8004e38 <USB_SetTurnaroundTime+0x12c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d906      	bls.n	8004d8e <USB_SetTurnaroundTime+0x82>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4a2e      	ldr	r2, [pc, #184]	@ (8004e3c <USB_SetTurnaroundTime+0x130>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d802      	bhi.n	8004d8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d88:	230b      	movs	r3, #11
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	e036      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	4a2a      	ldr	r2, [pc, #168]	@ (8004e3c <USB_SetTurnaroundTime+0x130>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d906      	bls.n	8004da4 <USB_SetTurnaroundTime+0x98>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4a29      	ldr	r2, [pc, #164]	@ (8004e40 <USB_SetTurnaroundTime+0x134>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d802      	bhi.n	8004da4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d9e:	230a      	movs	r3, #10
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	e02b      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	4a26      	ldr	r2, [pc, #152]	@ (8004e40 <USB_SetTurnaroundTime+0x134>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d906      	bls.n	8004dba <USB_SetTurnaroundTime+0xae>
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4a25      	ldr	r2, [pc, #148]	@ (8004e44 <USB_SetTurnaroundTime+0x138>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d202      	bcs.n	8004dba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004db4:	2309      	movs	r3, #9
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	e020      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	4a21      	ldr	r2, [pc, #132]	@ (8004e44 <USB_SetTurnaroundTime+0x138>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d306      	bcc.n	8004dd0 <USB_SetTurnaroundTime+0xc4>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4a20      	ldr	r2, [pc, #128]	@ (8004e48 <USB_SetTurnaroundTime+0x13c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d802      	bhi.n	8004dd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004dca:	2308      	movs	r3, #8
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	e015      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8004e48 <USB_SetTurnaroundTime+0x13c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d906      	bls.n	8004de6 <USB_SetTurnaroundTime+0xda>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4a1c      	ldr	r2, [pc, #112]	@ (8004e4c <USB_SetTurnaroundTime+0x140>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d202      	bcs.n	8004de6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004de0:	2307      	movs	r3, #7
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	e00a      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004de6:	2306      	movs	r3, #6
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e007      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d102      	bne.n	8004df8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004df2:	2309      	movs	r3, #9
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	e001      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004df8:	2309      	movs	r3, #9
 8004dfa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	029b      	lsls	r3, r3, #10
 8004e10:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004e14:	431a      	orrs	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	00d8acbf 	.word	0x00d8acbf
 8004e2c:	00e4e1c0 	.word	0x00e4e1c0
 8004e30:	00f42400 	.word	0x00f42400
 8004e34:	01067380 	.word	0x01067380
 8004e38:	011a499f 	.word	0x011a499f
 8004e3c:	01312cff 	.word	0x01312cff
 8004e40:	014ca43f 	.word	0x014ca43f
 8004e44:	016e3600 	.word	0x016e3600
 8004e48:	01a6ab1f 	.word	0x01a6ab1f
 8004e4c:	01e84800 	.word	0x01e84800

08004e50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f043 0201 	orr.w	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f023 0201 	bic.w	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d115      	bne.n	8004ee2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ec2:	200a      	movs	r0, #10
 8004ec4:	f7fb fd02 	bl	80008cc <HAL_Delay>
      ms += 10U;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	330a      	adds	r3, #10
 8004ecc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f001 f93f 	bl	8006152 <USB_GetMode>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d01e      	beq.n	8004f18 <USB_SetCurrentMode+0x84>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ede:	d9f0      	bls.n	8004ec2 <USB_SetCurrentMode+0x2e>
 8004ee0:	e01a      	b.n	8004f18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d115      	bne.n	8004f14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ef4:	200a      	movs	r0, #10
 8004ef6:	f7fb fce9 	bl	80008cc <HAL_Delay>
      ms += 10U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	330a      	adds	r3, #10
 8004efe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f001 f926 	bl	8006152 <USB_GetMode>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <USB_SetCurrentMode+0x84>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f10:	d9f0      	bls.n	8004ef4 <USB_SetCurrentMode+0x60>
 8004f12:	e001      	b.n	8004f18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e005      	b.n	8004f24 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f1c:	d101      	bne.n	8004f22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b086      	sub	sp, #24
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f46:	2300      	movs	r3, #0
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	e009      	b.n	8004f60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	3340      	adds	r3, #64	@ 0x40
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	2200      	movs	r2, #0
 8004f58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2b0e      	cmp	r3, #14
 8004f64:	d9f2      	bls.n	8004f4c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f66:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d11c      	bne.n	8004fa8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f7c:	f043 0302 	orr.w	r3, r3, #2
 8004f80:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f86:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e005      	b.n	8004fb4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004fba:	461a      	mov	r2, r3
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fc0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d10d      	bne.n	8004fe4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d104      	bne.n	8004fda <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f968 	bl	80052a8 <USB_SetDevSpeed>
 8004fd8:	e008      	b.n	8004fec <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fda:	2101      	movs	r1, #1
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f963 	bl	80052a8 <USB_SetDevSpeed>
 8004fe2:	e003      	b.n	8004fec <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fe4:	2103      	movs	r1, #3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f95e 	bl	80052a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fec:	2110      	movs	r1, #16
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f8fa 	bl	80051e8 <USB_FlushTxFifo>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f924 	bl	800524c <USB_FlushRxFifo>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005014:	461a      	mov	r2, r3
 8005016:	2300      	movs	r3, #0
 8005018:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005020:	461a      	mov	r2, r3
 8005022:	2300      	movs	r3, #0
 8005024:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800502c:	461a      	mov	r2, r3
 800502e:	2300      	movs	r3, #0
 8005030:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005032:	2300      	movs	r3, #0
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	e043      	b.n	80050c0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800504a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800504e:	d118      	bne.n	8005082 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10a      	bne.n	800506c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005062:	461a      	mov	r2, r3
 8005064:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	e013      	b.n	8005094 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005078:	461a      	mov	r2, r3
 800507a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	e008      	b.n	8005094 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800508e:	461a      	mov	r2, r3
 8005090:	2300      	movs	r3, #0
 8005092:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050a0:	461a      	mov	r2, r3
 80050a2:	2300      	movs	r3, #0
 80050a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b2:	461a      	mov	r2, r3
 80050b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	3301      	adds	r3, #1
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80050c4:	461a      	mov	r2, r3
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d3b5      	bcc.n	8005038 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050cc:	2300      	movs	r3, #0
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	e043      	b.n	800515a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050e8:	d118      	bne.n	800511c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fc:	461a      	mov	r2, r3
 80050fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e013      	b.n	800512e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005112:	461a      	mov	r2, r3
 8005114:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e008      	b.n	800512e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005128:	461a      	mov	r2, r3
 800512a:	2300      	movs	r3, #0
 800512c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800513a:	461a      	mov	r2, r3
 800513c:	2300      	movs	r3, #0
 800513e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800514c:	461a      	mov	r2, r3
 800514e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005152:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	3301      	adds	r3, #1
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800515e:	461a      	mov	r2, r3
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4293      	cmp	r3, r2
 8005164:	d3b5      	bcc.n	80050d2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005178:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005186:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005188:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800518c:	2b00      	cmp	r3, #0
 800518e:	d105      	bne.n	800519c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f043 0210 	orr.w	r2, r3, #16
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699a      	ldr	r2, [r3, #24]
 80051a0:	4b0f      	ldr	r3, [pc, #60]	@ (80051e0 <USB_DevInit+0x2b4>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	f043 0208 	orr.w	r2, r3, #8
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d105      	bne.n	80051d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699a      	ldr	r2, [r3, #24]
 80051c8:	4b06      	ldr	r3, [pc, #24]	@ (80051e4 <USB_DevInit+0x2b8>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3718      	adds	r7, #24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051dc:	b004      	add	sp, #16
 80051de:	4770      	bx	lr
 80051e0:	803c3800 	.word	0x803c3800
 80051e4:	40000004 	.word	0x40000004

080051e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3301      	adds	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005202:	d901      	bls.n	8005208 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e01b      	b.n	8005240 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	daf2      	bge.n	80051f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	019b      	lsls	r3, r3, #6
 8005218:	f043 0220 	orr.w	r2, r3, #32
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3301      	adds	r3, #1
 8005224:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800522c:	d901      	bls.n	8005232 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e006      	b.n	8005240 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b20      	cmp	r3, #32
 800523c:	d0f0      	beq.n	8005220 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005264:	d901      	bls.n	800526a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e018      	b.n	800529c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	daf2      	bge.n	8005258 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2210      	movs	r2, #16
 800527a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3301      	adds	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005288:	d901      	bls.n	800528e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e006      	b.n	800529c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	2b10      	cmp	r3, #16
 8005298:	d0f0      	beq.n	800527c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	68f9      	ldr	r1, [r7, #12]
 80052c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052c8:	4313      	orrs	r3, r2
 80052ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80052da:	b480      	push	{r7}
 80052dc:	b087      	sub	sp, #28
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 0306 	and.w	r3, r3, #6
 80052f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d102      	bne.n	8005300 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052fa:	2300      	movs	r3, #0
 80052fc:	75fb      	strb	r3, [r7, #23]
 80052fe:	e00a      	b.n	8005316 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d002      	beq.n	800530c <USB_GetDevSpeed+0x32>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b06      	cmp	r3, #6
 800530a:	d102      	bne.n	8005312 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800530c:	2302      	movs	r3, #2
 800530e:	75fb      	strb	r3, [r7, #23]
 8005310:	e001      	b.n	8005316 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005312:	230f      	movs	r3, #15
 8005314:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005316:	7dfb      	ldrb	r3, [r7, #23]
}
 8005318:	4618      	mov	r0, r3
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	785b      	ldrb	r3, [r3, #1]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d139      	bne.n	80053b4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005346:	69da      	ldr	r2, [r3, #28]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	2101      	movs	r1, #1
 8005352:	fa01 f303 	lsl.w	r3, r1, r3
 8005356:	b29b      	uxth	r3, r3
 8005358:	68f9      	ldr	r1, [r7, #12]
 800535a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800535e:	4313      	orrs	r3, r2
 8005360:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d153      	bne.n	8005420 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	791b      	ldrb	r3, [r3, #4]
 8005392:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005394:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	059b      	lsls	r3, r3, #22
 800539a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800539c:	431a      	orrs	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	0159      	lsls	r1, r3, #5
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	440b      	add	r3, r1
 80053a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053aa:	4619      	mov	r1, r3
 80053ac:	4b20      	ldr	r3, [pc, #128]	@ (8005430 <USB_ActivateEndpoint+0x10c>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	600b      	str	r3, [r1, #0]
 80053b2:	e035      	b.n	8005420 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ba:	69da      	ldr	r2, [r3, #28]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	2101      	movs	r1, #1
 80053c6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ca:	041b      	lsls	r3, r3, #16
 80053cc:	68f9      	ldr	r1, [r7, #12]
 80053ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053d2:	4313      	orrs	r3, r2
 80053d4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d119      	bne.n	8005420 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	791b      	ldrb	r3, [r3, #4]
 8005406:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005408:	430b      	orrs	r3, r1
 800540a:	431a      	orrs	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	0159      	lsls	r1, r3, #5
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	440b      	add	r3, r1
 8005414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005418:	4619      	mov	r1, r3
 800541a:	4b05      	ldr	r3, [pc, #20]	@ (8005430 <USB_ActivateEndpoint+0x10c>)
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	10008000 	.word	0x10008000

08005434 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	785b      	ldrb	r3, [r3, #1]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d161      	bne.n	8005514 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005462:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005466:	d11f      	bne.n	80054a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	0151      	lsls	r1, r2, #5
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	440a      	add	r2, r1
 800547e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005482:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005486:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	0151      	lsls	r1, r2, #5
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	440a      	add	r2, r1
 800549e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	2101      	movs	r1, #1
 80054ba:	fa01 f303 	lsl.w	r3, r1, r3
 80054be:	b29b      	uxth	r3, r3
 80054c0:	43db      	mvns	r3, r3
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054c8:	4013      	ands	r3, r2
 80054ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	2101      	movs	r1, #1
 80054de:	fa01 f303 	lsl.w	r3, r1, r3
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	43db      	mvns	r3, r3
 80054e6:	68f9      	ldr	r1, [r7, #12]
 80054e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054ec:	4013      	ands	r3, r2
 80054ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	0159      	lsls	r1, r3, #5
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	440b      	add	r3, r1
 8005506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800550a:	4619      	mov	r1, r3
 800550c:	4b35      	ldr	r3, [pc, #212]	@ (80055e4 <USB_DeactivateEndpoint+0x1b0>)
 800550e:	4013      	ands	r3, r2
 8005510:	600b      	str	r3, [r1, #0]
 8005512:	e060      	b.n	80055d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005526:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800552a:	d11f      	bne.n	800556c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	440a      	add	r2, r1
 8005542:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005546:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800554a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	440a      	add	r2, r1
 8005562:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005566:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800556a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005572:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	2101      	movs	r1, #1
 800557e:	fa01 f303 	lsl.w	r3, r1, r3
 8005582:	041b      	lsls	r3, r3, #16
 8005584:	43db      	mvns	r3, r3
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800558c:	4013      	ands	r3, r2
 800558e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005596:	69da      	ldr	r2, [r3, #28]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	2101      	movs	r1, #1
 80055a2:	fa01 f303 	lsl.w	r3, r1, r3
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	43db      	mvns	r3, r3
 80055aa:	68f9      	ldr	r1, [r7, #12]
 80055ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055b0:	4013      	ands	r3, r2
 80055b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	0159      	lsls	r1, r3, #5
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	440b      	add	r3, r1
 80055ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ce:	4619      	mov	r1, r3
 80055d0:	4b05      	ldr	r3, [pc, #20]	@ (80055e8 <USB_DeactivateEndpoint+0x1b4>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	ec337800 	.word	0xec337800
 80055e8:	eff37800 	.word	0xeff37800

080055ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	@ 0x28
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	4613      	mov	r3, r2
 80055f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	785b      	ldrb	r3, [r3, #1]
 8005608:	2b01      	cmp	r3, #1
 800560a:	f040 8185 	bne.w	8005918 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d132      	bne.n	800567c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	0159      	lsls	r1, r3, #5
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	440b      	add	r3, r1
 800562c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005630:	4619      	mov	r1, r3
 8005632:	4ba7      	ldr	r3, [pc, #668]	@ (80058d0 <USB_EPStartXfer+0x2e4>)
 8005634:	4013      	ands	r3, r2
 8005636:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	0151      	lsls	r1, r2, #5
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	440a      	add	r2, r1
 800564e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005652:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005656:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	0159      	lsls	r1, r3, #5
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	440b      	add	r3, r1
 800566e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005672:	4619      	mov	r1, r3
 8005674:	4b97      	ldr	r3, [pc, #604]	@ (80058d4 <USB_EPStartXfer+0x2e8>)
 8005676:	4013      	ands	r3, r2
 8005678:	610b      	str	r3, [r1, #16]
 800567a:	e097      	b.n	80057ac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	0159      	lsls	r1, r3, #5
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	440b      	add	r3, r1
 8005692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005696:	4619      	mov	r1, r3
 8005698:	4b8e      	ldr	r3, [pc, #568]	@ (80058d4 <USB_EPStartXfer+0x2e8>)
 800569a:	4013      	ands	r3, r2
 800569c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	0159      	lsls	r1, r3, #5
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	440b      	add	r3, r1
 80056b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b8:	4619      	mov	r1, r3
 80056ba:	4b85      	ldr	r3, [pc, #532]	@ (80058d0 <USB_EPStartXfer+0x2e4>)
 80056bc:	4013      	ands	r3, r2
 80056be:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d11a      	bne.n	80056fc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	691a      	ldr	r2, [r3, #16]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d903      	bls.n	80056da <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	0151      	lsls	r1, r2, #5
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	440a      	add	r2, r1
 80056f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056f8:	6113      	str	r3, [r2, #16]
 80056fa:	e044      	b.n	8005786 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	4413      	add	r3, r2
 8005706:	1e5a      	subs	r2, r3, #1
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005710:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	8afb      	ldrh	r3, [r7, #22]
 8005722:	04d9      	lsls	r1, r3, #19
 8005724:	4b6c      	ldr	r3, [pc, #432]	@ (80058d8 <USB_EPStartXfer+0x2ec>)
 8005726:	400b      	ands	r3, r1
 8005728:	69b9      	ldr	r1, [r7, #24]
 800572a:	0148      	lsls	r0, r1, #5
 800572c:	69f9      	ldr	r1, [r7, #28]
 800572e:	4401      	add	r1, r0
 8005730:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005734:	4313      	orrs	r3, r2
 8005736:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	791b      	ldrb	r3, [r3, #4]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d122      	bne.n	8005786 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	440a      	add	r2, r1
 8005756:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800575a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800575e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800576c:	691a      	ldr	r2, [r3, #16]
 800576e:	8afb      	ldrh	r3, [r7, #22]
 8005770:	075b      	lsls	r3, r3, #29
 8005772:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005776:	69b9      	ldr	r1, [r7, #24]
 8005778:	0148      	lsls	r0, r1, #5
 800577a:	69f9      	ldr	r1, [r7, #28]
 800577c:	4401      	add	r1, r0
 800577e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005782:	4313      	orrs	r3, r2
 8005784:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800579c:	69b9      	ldr	r1, [r7, #24]
 800579e:	0148      	lsls	r0, r1, #5
 80057a0:	69f9      	ldr	r1, [r7, #28]
 80057a2:	4401      	add	r1, r0
 80057a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80057a8:	4313      	orrs	r3, r2
 80057aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d14b      	bne.n	800584a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d009      	beq.n	80057ce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c6:	461a      	mov	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	791b      	ldrb	r3, [r3, #4]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d128      	bne.n	8005828 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d110      	bne.n	8005808 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005800:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	e00f      	b.n	8005828 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	0151      	lsls	r1, r2, #5
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	440a      	add	r2, r1
 800581e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005826:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	0151      	lsls	r1, r2, #5
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	440a      	add	r2, r1
 800583e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005842:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	e169      	b.n	8005b1e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	0151      	lsls	r1, r2, #5
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	440a      	add	r2, r1
 8005860:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005864:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005868:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	791b      	ldrb	r3, [r3, #4]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d015      	beq.n	800589e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 8151 	beq.w	8005b1e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005882:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	2101      	movs	r1, #1
 800588e:	fa01 f303 	lsl.w	r3, r1, r3
 8005892:	69f9      	ldr	r1, [r7, #28]
 8005894:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005898:	4313      	orrs	r3, r2
 800589a:	634b      	str	r3, [r1, #52]	@ 0x34
 800589c:	e13f      	b.n	8005b1e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d116      	bne.n	80058dc <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	e015      	b.n	80058fc <USB_EPStartXfer+0x310>
 80058d0:	e007ffff 	.word	0xe007ffff
 80058d4:	fff80000 	.word	0xfff80000
 80058d8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	0151      	lsls	r1, r2, #5
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	440a      	add	r2, r1
 80058f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058fa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	68d9      	ldr	r1, [r3, #12]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	781a      	ldrb	r2, [r3, #0]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	b298      	uxth	r0, r3
 800590a:	79fb      	ldrb	r3, [r7, #7]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	4603      	mov	r3, r0
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 f9b9 	bl	8005c88 <USB_WritePacket>
 8005916:	e102      	b.n	8005b1e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	0159      	lsls	r1, r3, #5
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	440b      	add	r3, r1
 800592e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005932:	4619      	mov	r1, r3
 8005934:	4b7c      	ldr	r3, [pc, #496]	@ (8005b28 <USB_EPStartXfer+0x53c>)
 8005936:	4013      	ands	r3, r2
 8005938:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	0159      	lsls	r1, r3, #5
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	440b      	add	r3, r1
 8005950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005954:	4619      	mov	r1, r3
 8005956:	4b75      	ldr	r3, [pc, #468]	@ (8005b2c <USB_EPStartXfer+0x540>)
 8005958:	4013      	ands	r3, r2
 800595a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d12f      	bne.n	80059c2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005990:	69b9      	ldr	r1, [r7, #24]
 8005992:	0148      	lsls	r0, r1, #5
 8005994:	69f9      	ldr	r1, [r7, #28]
 8005996:	4401      	add	r1, r0
 8005998:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800599c:	4313      	orrs	r3, r2
 800599e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059be:	6113      	str	r3, [r2, #16]
 80059c0:	e05f      	b.n	8005a82 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d123      	bne.n	8005a12 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e0:	69b9      	ldr	r1, [r7, #24]
 80059e2:	0148      	lsls	r0, r1, #5
 80059e4:	69f9      	ldr	r1, [r7, #28]
 80059e6:	4401      	add	r1, r0
 80059e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80059ec:	4313      	orrs	r3, r2
 80059ee:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	69fa      	ldr	r2, [r7, #28]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a0e:	6113      	str	r3, [r2, #16]
 8005a10:	e037      	b.n	8005a82 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	1e5a      	subs	r2, r3, #1
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a26:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	8afa      	ldrh	r2, [r7, #22]
 8005a2e:	fb03 f202 	mul.w	r2, r3, r2
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	8afb      	ldrh	r3, [r7, #22]
 8005a46:	04d9      	lsls	r1, r3, #19
 8005a48:	4b39      	ldr	r3, [pc, #228]	@ (8005b30 <USB_EPStartXfer+0x544>)
 8005a4a:	400b      	ands	r3, r1
 8005a4c:	69b9      	ldr	r1, [r7, #24]
 8005a4e:	0148      	lsls	r0, r1, #5
 8005a50:	69f9      	ldr	r1, [r7, #28]
 8005a52:	4401      	add	r1, r0
 8005a54:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a72:	69b9      	ldr	r1, [r7, #24]
 8005a74:	0148      	lsls	r0, r1, #5
 8005a76:	69f9      	ldr	r1, [r7, #28]
 8005a78:	4401      	add	r1, r0
 8005a7a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d10d      	bne.n	8005aa4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d009      	beq.n	8005aa4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	68d9      	ldr	r1, [r3, #12]
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa0:	460a      	mov	r2, r1
 8005aa2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	791b      	ldrb	r3, [r3, #4]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d128      	bne.n	8005afe <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d110      	bne.n	8005ade <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	0151      	lsls	r1, r2, #5
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	440a      	add	r2, r1
 8005ad2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ad6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	e00f      	b.n	8005afe <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	0151      	lsls	r1, r2, #5
 8005af0:	69fa      	ldr	r2, [r7, #28]
 8005af2:	440a      	add	r2, r1
 8005af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005afc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b18:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3720      	adds	r7, #32
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	fff80000 	.word	0xfff80000
 8005b2c:	e007ffff 	.word	0xe007ffff
 8005b30:	1ff80000 	.word	0x1ff80000

08005b34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d14a      	bne.n	8005be8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b6a:	f040 8086 	bne.w	8005c7a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	7812      	ldrb	r2, [r2, #0]
 8005b82:	0151      	lsls	r1, r2, #5
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	440a      	add	r2, r1
 8005b88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	7812      	ldrb	r2, [r2, #0]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d902      	bls.n	8005bcc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8005bca:	e056      	b.n	8005c7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005be0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005be4:	d0e7      	beq.n	8005bb6 <USB_EPStopXfer+0x82>
 8005be6:	e048      	b.n	8005c7a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c00:	d13b      	bne.n	8005c7a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c24:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	7812      	ldrb	r2, [r2, #0]
 8005c3a:	0151      	lsls	r1, r2, #5
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	440a      	add	r2, r1
 8005c40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d902      	bls.n	8005c60 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c5e:	e00c      	b.n	8005c7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c78:	d0e7      	beq.n	8005c4a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b089      	sub	sp, #36	@ 0x24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	4611      	mov	r1, r2
 8005c94:	461a      	mov	r2, r3
 8005c96:	460b      	mov	r3, r1
 8005c98:	71fb      	strb	r3, [r7, #7]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d123      	bne.n	8005cf6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005cae:	88bb      	ldrh	r3, [r7, #4]
 8005cb0:	3303      	adds	r3, #3
 8005cb2:	089b      	lsrs	r3, r3, #2
 8005cb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	e018      	b.n	8005cee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	031a      	lsls	r2, r3, #12
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cc8:	461a      	mov	r2, r3
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	3301      	adds	r3, #1
 8005cec:	61bb      	str	r3, [r7, #24]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d3e2      	bcc.n	8005cbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3724      	adds	r7, #36	@ 0x24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b08b      	sub	sp, #44	@ 0x2c
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	089b      	lsrs	r3, r3, #2
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	623b      	str	r3, [r7, #32]
 8005d2e:	e014      	b.n	8005d5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3e:	3301      	adds	r3, #1
 8005d40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	3301      	adds	r3, #1
 8005d46:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d50:	3301      	adds	r3, #1
 8005d52:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	3301      	adds	r3, #1
 8005d58:	623b      	str	r3, [r7, #32]
 8005d5a:	6a3a      	ldr	r2, [r7, #32]
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d3e6      	bcc.n	8005d30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d62:	8bfb      	ldrh	r3, [r7, #30]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01e      	beq.n	8005da6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d72:	461a      	mov	r2, r3
 8005d74:	f107 0310 	add.w	r3, r7, #16
 8005d78:	6812      	ldr	r2, [r2, #0]
 8005d7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	fa22 f303 	lsr.w	r3, r2, r3
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8c:	701a      	strb	r2, [r3, #0]
      i++;
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	3301      	adds	r3, #1
 8005d92:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	3301      	adds	r3, #1
 8005d98:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005d9a:	8bfb      	ldrh	r3, [r7, #30]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005da0:	8bfb      	ldrh	r3, [r7, #30]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1ea      	bne.n	8005d7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	372c      	adds	r7, #44	@ 0x2c
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d12c      	bne.n	8005e2a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	db12      	blt.n	8005e08 <USB_EPSetStall+0x54>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00f      	beq.n	8005e08 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e02:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e06:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	e02b      	b.n	8005e82 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	db12      	blt.n	8005e62 <USB_EPSetStall+0xae>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00f      	beq.n	8005e62 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e60:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d128      	bne.n	8005efe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ec6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005eca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	791b      	ldrb	r3, [r3, #4]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d003      	beq.n	8005edc <USB_EPClearStall+0x4c>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	791b      	ldrb	r3, [r3, #4]
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d138      	bne.n	8005f4e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	0151      	lsls	r1, r2, #5
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	440a      	add	r2, r1
 8005ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	e027      	b.n	8005f4e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	0151      	lsls	r1, r2, #5
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	440a      	add	r2, r1
 8005f14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	791b      	ldrb	r3, [r3, #4]
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d003      	beq.n	8005f2e <USB_EPClearStall+0x9e>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	791b      	ldrb	r3, [r3, #4]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d10f      	bne.n	8005f4e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f4c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	460b      	mov	r3, r1
 8005f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f7a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005f7e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005f90:	68f9      	ldr	r1, [r7, #12]
 8005f92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f96:	4313      	orrs	r3, r2
 8005f98:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005fc2:	f023 0303 	bic.w	r3, r3, #3
 8005fc6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fd6:	f023 0302 	bic.w	r3, r3, #2
 8005fda:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006004:	f023 0303 	bic.w	r3, r3, #3
 8006008:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006018:	f043 0302 	orr.w	r3, r3, #2
 800601c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4013      	ands	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006044:	68fb      	ldr	r3, [r7, #12]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006052:	b480      	push	{r7}
 8006054:	b085      	sub	sp, #20
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	4013      	ands	r3, r2
 8006074:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	0c1b      	lsrs	r3, r3, #16
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	4013      	ands	r3, r2
 80060a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	b29b      	uxth	r3, r3
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	460b      	mov	r3, r1
 80060c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	4013      	ands	r3, r2
 80060e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060e8:	68bb      	ldr	r3, [r7, #8]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b087      	sub	sp, #28
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	460b      	mov	r3, r1
 8006100:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006118:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	fa22 f303 	lsr.w	r3, r2, r3
 8006126:	01db      	lsls	r3, r3, #7
 8006128:	b2db      	uxtb	r3, r3
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	4313      	orrs	r3, r2
 800612e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4013      	ands	r3, r2
 8006142:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006144:	68bb      	ldr	r3, [r7, #8]
}
 8006146:	4618      	mov	r0, r3
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	f003 0301 	and.w	r3, r3, #1
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800618a:	4619      	mov	r1, r3
 800618c:	4b09      	ldr	r3, [pc, #36]	@ (80061b4 <USB_ActivateSetup+0x44>)
 800618e:	4013      	ands	r3, r2
 8006190:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	fffff800 	.word	0xfffff800

080061b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	460b      	mov	r3, r1
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	333c      	adds	r3, #60	@ 0x3c
 80061ce:	3304      	adds	r3, #4
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	4a26      	ldr	r2, [pc, #152]	@ (8006270 <USB_EP0_OutStart+0xb8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d90a      	bls.n	80061f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061ec:	d101      	bne.n	80061f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e037      	b.n	8006262 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f8:	461a      	mov	r2, r3
 80061fa:	2300      	movs	r3, #0
 80061fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800620c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006210:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006220:	f043 0318 	orr.w	r3, r3, #24
 8006224:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006234:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006238:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800623a:	7afb      	ldrb	r3, [r7, #11]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d10f      	bne.n	8006260 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800625a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800625e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	4f54300a 	.word	0x4f54300a

08006274 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800628c:	d901      	bls.n	8006292 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e01b      	b.n	80062ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	daf2      	bge.n	8006280 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f043 0201 	orr.w	r2, r3, #1
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3301      	adds	r3, #1
 80062ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062b6:	d901      	bls.n	80062bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e006      	b.n	80062ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d0f0      	beq.n	80062aa <USB_CoreReset+0x36>

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	460b      	mov	r3, r1
 80062e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80062e4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80062e8:	f002 fc90 	bl	8008c0c <USBD_static_malloc>
 80062ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d109      	bne.n	8006308 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	32b0      	adds	r2, #176	@ 0xb0
 80062fe:	2100      	movs	r1, #0
 8006300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006304:	2302      	movs	r3, #2
 8006306:	e0d4      	b.n	80064b2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006308:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800630c:	2100      	movs	r1, #0
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f002 fcc0 	bl	8008c94 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	32b0      	adds	r2, #176	@ 0xb0
 800631e:	68f9      	ldr	r1, [r7, #12]
 8006320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	32b0      	adds	r2, #176	@ 0xb0
 800632e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	7c1b      	ldrb	r3, [r3, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d138      	bne.n	80063b2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006340:	4b5e      	ldr	r3, [pc, #376]	@ (80064bc <USBD_CDC_Init+0x1e4>)
 8006342:	7819      	ldrb	r1, [r3, #0]
 8006344:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006348:	2202      	movs	r2, #2
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f002 fb3b 	bl	80089c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006350:	4b5a      	ldr	r3, [pc, #360]	@ (80064bc <USBD_CDC_Init+0x1e4>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	f003 020f 	and.w	r2, r3, #15
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	440b      	add	r3, r1
 8006364:	3324      	adds	r3, #36	@ 0x24
 8006366:	2201      	movs	r2, #1
 8006368:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800636a:	4b55      	ldr	r3, [pc, #340]	@ (80064c0 <USBD_CDC_Init+0x1e8>)
 800636c:	7819      	ldrb	r1, [r3, #0]
 800636e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006372:	2202      	movs	r2, #2
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f002 fb26 	bl	80089c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800637a:	4b51      	ldr	r3, [pc, #324]	@ (80064c0 <USBD_CDC_Init+0x1e8>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	f003 020f 	and.w	r2, r3, #15
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	440b      	add	r3, r1
 800638e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006392:	2201      	movs	r2, #1
 8006394:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006396:	4b4b      	ldr	r3, [pc, #300]	@ (80064c4 <USBD_CDC_Init+0x1ec>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	f003 020f 	and.w	r2, r3, #15
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	3326      	adds	r3, #38	@ 0x26
 80063ac:	2210      	movs	r2, #16
 80063ae:	801a      	strh	r2, [r3, #0]
 80063b0:	e035      	b.n	800641e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80063b2:	4b42      	ldr	r3, [pc, #264]	@ (80064bc <USBD_CDC_Init+0x1e4>)
 80063b4:	7819      	ldrb	r1, [r3, #0]
 80063b6:	2340      	movs	r3, #64	@ 0x40
 80063b8:	2202      	movs	r2, #2
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f002 fb03 	bl	80089c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80063c0:	4b3e      	ldr	r3, [pc, #248]	@ (80064bc <USBD_CDC_Init+0x1e4>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	f003 020f 	and.w	r2, r3, #15
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	440b      	add	r3, r1
 80063d4:	3324      	adds	r3, #36	@ 0x24
 80063d6:	2201      	movs	r2, #1
 80063d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80063da:	4b39      	ldr	r3, [pc, #228]	@ (80064c0 <USBD_CDC_Init+0x1e8>)
 80063dc:	7819      	ldrb	r1, [r3, #0]
 80063de:	2340      	movs	r3, #64	@ 0x40
 80063e0:	2202      	movs	r2, #2
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f002 faef 	bl	80089c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80063e8:	4b35      	ldr	r3, [pc, #212]	@ (80064c0 <USBD_CDC_Init+0x1e8>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	f003 020f 	and.w	r2, r3, #15
 80063f0:	6879      	ldr	r1, [r7, #4]
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	440b      	add	r3, r1
 80063fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006400:	2201      	movs	r2, #1
 8006402:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006404:	4b2f      	ldr	r3, [pc, #188]	@ (80064c4 <USBD_CDC_Init+0x1ec>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	f003 020f 	and.w	r2, r3, #15
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	4613      	mov	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	3326      	adds	r3, #38	@ 0x26
 800641a:	2210      	movs	r2, #16
 800641c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800641e:	4b29      	ldr	r3, [pc, #164]	@ (80064c4 <USBD_CDC_Init+0x1ec>)
 8006420:	7819      	ldrb	r1, [r3, #0]
 8006422:	2308      	movs	r3, #8
 8006424:	2203      	movs	r2, #3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f002 facd 	bl	80089c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800642c:	4b25      	ldr	r3, [pc, #148]	@ (80064c4 <USBD_CDC_Init+0x1ec>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	f003 020f 	and.w	r2, r3, #15
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	440b      	add	r3, r1
 8006440:	3324      	adds	r3, #36	@ 0x24
 8006442:	2201      	movs	r2, #1
 8006444:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	33b0      	adds	r3, #176	@ 0xb0
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800647c:	2302      	movs	r3, #2
 800647e:	e018      	b.n	80064b2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	7c1b      	ldrb	r3, [r3, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006488:	4b0d      	ldr	r3, [pc, #52]	@ (80064c0 <USBD_CDC_Init+0x1e8>)
 800648a:	7819      	ldrb	r1, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006492:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f002 fb84 	bl	8008ba4 <USBD_LL_PrepareReceive>
 800649c:	e008      	b.n	80064b0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800649e:	4b08      	ldr	r3, [pc, #32]	@ (80064c0 <USBD_CDC_Init+0x1e8>)
 80064a0:	7819      	ldrb	r1, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80064a8:	2340      	movs	r3, #64	@ 0x40
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f002 fb7a 	bl	8008ba4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	2400009b 	.word	0x2400009b
 80064c0:	2400009c 	.word	0x2400009c
 80064c4:	2400009d 	.word	0x2400009d

080064c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80064d4:	4b3a      	ldr	r3, [pc, #232]	@ (80065c0 <USBD_CDC_DeInit+0xf8>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f002 fa99 	bl	8008a12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80064e0:	4b37      	ldr	r3, [pc, #220]	@ (80065c0 <USBD_CDC_DeInit+0xf8>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	f003 020f 	and.w	r2, r3, #15
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	440b      	add	r3, r1
 80064f4:	3324      	adds	r3, #36	@ 0x24
 80064f6:	2200      	movs	r2, #0
 80064f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80064fa:	4b32      	ldr	r3, [pc, #200]	@ (80065c4 <USBD_CDC_DeInit+0xfc>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f002 fa86 	bl	8008a12 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006506:	4b2f      	ldr	r3, [pc, #188]	@ (80065c4 <USBD_CDC_DeInit+0xfc>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	f003 020f 	and.w	r2, r3, #15
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800651e:	2200      	movs	r2, #0
 8006520:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006522:	4b29      	ldr	r3, [pc, #164]	@ (80065c8 <USBD_CDC_DeInit+0x100>)
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f002 fa72 	bl	8008a12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800652e:	4b26      	ldr	r3, [pc, #152]	@ (80065c8 <USBD_CDC_DeInit+0x100>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	f003 020f 	and.w	r2, r3, #15
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	4613      	mov	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	440b      	add	r3, r1
 8006542:	3324      	adds	r3, #36	@ 0x24
 8006544:	2200      	movs	r2, #0
 8006546:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006548:	4b1f      	ldr	r3, [pc, #124]	@ (80065c8 <USBD_CDC_DeInit+0x100>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	f003 020f 	and.w	r2, r3, #15
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	440b      	add	r3, r1
 800655c:	3326      	adds	r3, #38	@ 0x26
 800655e:	2200      	movs	r2, #0
 8006560:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	32b0      	adds	r2, #176	@ 0xb0
 800656c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01f      	beq.n	80065b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	33b0      	adds	r3, #176	@ 0xb0
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	32b0      	adds	r2, #176	@ 0xb0
 8006592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006596:	4618      	mov	r0, r3
 8006598:	f002 fb46 	bl	8008c28 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	32b0      	adds	r2, #176	@ 0xb0
 80065a6:	2100      	movs	r1, #0
 80065a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	2400009b 	.word	0x2400009b
 80065c4:	2400009c 	.word	0x2400009c
 80065c8:	2400009d 	.word	0x2400009d

080065cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	32b0      	adds	r2, #176	@ 0xb0
 80065e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e0bf      	b.n	800677c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006604:	2b00      	cmp	r3, #0
 8006606:	d050      	beq.n	80066aa <USBD_CDC_Setup+0xde>
 8006608:	2b20      	cmp	r3, #32
 800660a:	f040 80af 	bne.w	800676c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	88db      	ldrh	r3, [r3, #6]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d03a      	beq.n	800668c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	b25b      	sxtb	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	da1b      	bge.n	8006658 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	33b0      	adds	r3, #176	@ 0xb0
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006636:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	88d2      	ldrh	r2, [r2, #6]
 800663c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	88db      	ldrh	r3, [r3, #6]
 8006642:	2b07      	cmp	r3, #7
 8006644:	bf28      	it	cs
 8006646:	2307      	movcs	r3, #7
 8006648:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	89fa      	ldrh	r2, [r7, #14]
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f001 fd7d 	bl	8008150 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006656:	e090      	b.n	800677a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	785a      	ldrb	r2, [r3, #1]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	88db      	ldrh	r3, [r3, #6]
 8006666:	2b3f      	cmp	r3, #63	@ 0x3f
 8006668:	d803      	bhi.n	8006672 <USBD_CDC_Setup+0xa6>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	88db      	ldrh	r3, [r3, #6]
 800666e:	b2da      	uxtb	r2, r3
 8006670:	e000      	b.n	8006674 <USBD_CDC_Setup+0xa8>
 8006672:	2240      	movs	r2, #64	@ 0x40
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800667a:	6939      	ldr	r1, [r7, #16]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006682:	461a      	mov	r2, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f001 fd8f 	bl	80081a8 <USBD_CtlPrepareRx>
      break;
 800668a:	e076      	b.n	800677a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	33b0      	adds	r3, #176	@ 0xb0
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	7850      	ldrb	r0, [r2, #1]
 80066a2:	2200      	movs	r2, #0
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	4798      	blx	r3
      break;
 80066a8:	e067      	b.n	800677a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	785b      	ldrb	r3, [r3, #1]
 80066ae:	2b0b      	cmp	r3, #11
 80066b0:	d851      	bhi.n	8006756 <USBD_CDC_Setup+0x18a>
 80066b2:	a201      	add	r2, pc, #4	@ (adr r2, 80066b8 <USBD_CDC_Setup+0xec>)
 80066b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b8:	080066e9 	.word	0x080066e9
 80066bc:	08006765 	.word	0x08006765
 80066c0:	08006757 	.word	0x08006757
 80066c4:	08006757 	.word	0x08006757
 80066c8:	08006757 	.word	0x08006757
 80066cc:	08006757 	.word	0x08006757
 80066d0:	08006757 	.word	0x08006757
 80066d4:	08006757 	.word	0x08006757
 80066d8:	08006757 	.word	0x08006757
 80066dc:	08006757 	.word	0x08006757
 80066e0:	08006713 	.word	0x08006713
 80066e4:	0800673d 	.word	0x0800673d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d107      	bne.n	8006704 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80066f4:	f107 030a 	add.w	r3, r7, #10
 80066f8:	2202      	movs	r2, #2
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 fd27 	bl	8008150 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006702:	e032      	b.n	800676a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f001 fca5 	bl	8008056 <USBD_CtlError>
            ret = USBD_FAIL;
 800670c:	2303      	movs	r3, #3
 800670e:	75fb      	strb	r3, [r7, #23]
          break;
 8006710:	e02b      	b.n	800676a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b03      	cmp	r3, #3
 800671c:	d107      	bne.n	800672e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800671e:	f107 030d 	add.w	r3, r7, #13
 8006722:	2201      	movs	r2, #1
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f001 fd12 	bl	8008150 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800672c:	e01d      	b.n	800676a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 fc90 	bl	8008056 <USBD_CtlError>
            ret = USBD_FAIL;
 8006736:	2303      	movs	r3, #3
 8006738:	75fb      	strb	r3, [r7, #23]
          break;
 800673a:	e016      	b.n	800676a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b03      	cmp	r3, #3
 8006746:	d00f      	beq.n	8006768 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f001 fc83 	bl	8008056 <USBD_CtlError>
            ret = USBD_FAIL;
 8006750:	2303      	movs	r3, #3
 8006752:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006754:	e008      	b.n	8006768 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 fc7c 	bl	8008056 <USBD_CtlError>
          ret = USBD_FAIL;
 800675e:	2303      	movs	r3, #3
 8006760:	75fb      	strb	r3, [r7, #23]
          break;
 8006762:	e002      	b.n	800676a <USBD_CDC_Setup+0x19e>
          break;
 8006764:	bf00      	nop
 8006766:	e008      	b.n	800677a <USBD_CDC_Setup+0x1ae>
          break;
 8006768:	bf00      	nop
      }
      break;
 800676a:	e006      	b.n	800677a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f001 fc71 	bl	8008056 <USBD_CtlError>
      ret = USBD_FAIL;
 8006774:	2303      	movs	r3, #3
 8006776:	75fb      	strb	r3, [r7, #23]
      break;
 8006778:	bf00      	nop
  }

  return (uint8_t)ret;
 800677a:	7dfb      	ldrb	r3, [r7, #23]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006796:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	32b0      	adds	r2, #176	@ 0xb0
 80067a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e065      	b.n	800687a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	32b0      	adds	r2, #176	@ 0xb0
 80067b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80067be:	78fb      	ldrb	r3, [r7, #3]
 80067c0:	f003 020f 	and.w	r2, r3, #15
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	4613      	mov	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	440b      	add	r3, r1
 80067d0:	3318      	adds	r3, #24
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d02f      	beq.n	8006838 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	f003 020f 	and.w	r2, r3, #15
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	4613      	mov	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	440b      	add	r3, r1
 80067ea:	3318      	adds	r3, #24
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	78fb      	ldrb	r3, [r7, #3]
 80067f0:	f003 010f 	and.w	r1, r3, #15
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	460b      	mov	r3, r1
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	440b      	add	r3, r1
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4403      	add	r3, r0
 8006800:	331c      	adds	r3, #28
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	fbb2 f1f3 	udiv	r1, r2, r3
 8006808:	fb01 f303 	mul.w	r3, r1, r3
 800680c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800680e:	2b00      	cmp	r3, #0
 8006810:	d112      	bne.n	8006838 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	f003 020f 	and.w	r2, r3, #15
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	3318      	adds	r3, #24
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800682a:	78f9      	ldrb	r1, [r7, #3]
 800682c:	2300      	movs	r3, #0
 800682e:	2200      	movs	r2, #0
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f002 f996 	bl	8008b62 <USBD_LL_Transmit>
 8006836:	e01f      	b.n	8006878 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	33b0      	adds	r3, #176	@ 0xb0
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d010      	beq.n	8006878 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	33b0      	adds	r3, #176	@ 0xb0
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006874:	78fa      	ldrb	r2, [r7, #3]
 8006876:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	32b0      	adds	r2, #176	@ 0xb0
 8006898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800689c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	32b0      	adds	r2, #176	@ 0xb0
 80068a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e01a      	b.n	80068ea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	4619      	mov	r1, r3
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f002 f994 	bl	8008be6 <USBD_LL_GetRxDataSize>
 80068be:	4602      	mov	r2, r0
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	33b0      	adds	r3, #176	@ 0xb0
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80068e4:	4611      	mov	r1, r2
 80068e6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	32b0      	adds	r2, #176	@ 0xb0
 8006904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006908:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006910:	2303      	movs	r3, #3
 8006912:	e024      	b.n	800695e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	33b0      	adds	r3, #176	@ 0xb0
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d019      	beq.n	800695c <USBD_CDC_EP0_RxReady+0x6a>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800692e:	2bff      	cmp	r3, #255	@ 0xff
 8006930:	d014      	beq.n	800695c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	33b0      	adds	r3, #176	@ 0xb0
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800694a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006952:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	22ff      	movs	r2, #255	@ 0xff
 8006958:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006970:	2182      	movs	r1, #130	@ 0x82
 8006972:	4818      	ldr	r0, [pc, #96]	@ (80069d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006974:	f000 fd0f 	bl	8007396 <USBD_GetEpDesc>
 8006978:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800697a:	2101      	movs	r1, #1
 800697c:	4815      	ldr	r0, [pc, #84]	@ (80069d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800697e:	f000 fd0a 	bl	8007396 <USBD_GetEpDesc>
 8006982:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006984:	2181      	movs	r1, #129	@ 0x81
 8006986:	4813      	ldr	r0, [pc, #76]	@ (80069d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006988:	f000 fd05 	bl	8007396 <USBD_GetEpDesc>
 800698c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2210      	movs	r2, #16
 8006998:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d006      	beq.n	80069ae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069a8:	711a      	strb	r2, [r3, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d006      	beq.n	80069c2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069bc:	711a      	strb	r2, [r3, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2243      	movs	r2, #67	@ 0x43
 80069c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069c8:	4b02      	ldr	r3, [pc, #8]	@ (80069d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	24000058 	.word	0x24000058

080069d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069e0:	2182      	movs	r1, #130	@ 0x82
 80069e2:	4818      	ldr	r0, [pc, #96]	@ (8006a44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069e4:	f000 fcd7 	bl	8007396 <USBD_GetEpDesc>
 80069e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069ea:	2101      	movs	r1, #1
 80069ec:	4815      	ldr	r0, [pc, #84]	@ (8006a44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069ee:	f000 fcd2 	bl	8007396 <USBD_GetEpDesc>
 80069f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069f4:	2181      	movs	r1, #129	@ 0x81
 80069f6:	4813      	ldr	r0, [pc, #76]	@ (8006a44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069f8:	f000 fccd 	bl	8007396 <USBD_GetEpDesc>
 80069fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	2210      	movs	r2, #16
 8006a08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d006      	beq.n	8006a1e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2200      	movs	r2, #0
 8006a14:	711a      	strb	r2, [r3, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f042 0202 	orr.w	r2, r2, #2
 8006a1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d006      	beq.n	8006a32 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	711a      	strb	r2, [r3, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f042 0202 	orr.w	r2, r2, #2
 8006a30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2243      	movs	r2, #67	@ 0x43
 8006a36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a38:	4b02      	ldr	r3, [pc, #8]	@ (8006a44 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	24000058 	.word	0x24000058

08006a48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a50:	2182      	movs	r1, #130	@ 0x82
 8006a52:	4818      	ldr	r0, [pc, #96]	@ (8006ab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a54:	f000 fc9f 	bl	8007396 <USBD_GetEpDesc>
 8006a58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	4815      	ldr	r0, [pc, #84]	@ (8006ab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a5e:	f000 fc9a 	bl	8007396 <USBD_GetEpDesc>
 8006a62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a64:	2181      	movs	r1, #129	@ 0x81
 8006a66:	4813      	ldr	r0, [pc, #76]	@ (8006ab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a68:	f000 fc95 	bl	8007396 <USBD_GetEpDesc>
 8006a6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2210      	movs	r2, #16
 8006a78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d006      	beq.n	8006a8e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a88:	711a      	strb	r2, [r3, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d006      	beq.n	8006aa2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a9c:	711a      	strb	r2, [r3, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2243      	movs	r2, #67	@ 0x43
 8006aa6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006aa8:	4b02      	ldr	r3, [pc, #8]	@ (8006ab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	24000058 	.word	0x24000058

08006ab8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	220a      	movs	r2, #10
 8006ac4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006ac6:	4b03      	ldr	r3, [pc, #12]	@ (8006ad4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	24000014 	.word	0x24000014

08006ad8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e009      	b.n	8006b00 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	33b0      	adds	r3, #176	@ 0xb0
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	32b0      	adds	r2, #176	@ 0xb0
 8006b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b26:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e008      	b.n	8006b44 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	371c      	adds	r7, #28
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	32b0      	adds	r2, #176	@ 0xb0
 8006b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e004      	b.n	8006b7e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	32b0      	adds	r2, #176	@ 0xb0
 8006b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	32b0      	adds	r2, #176	@ 0xb0
 8006bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e018      	b.n	8006bec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	7c1b      	ldrb	r3, [r3, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf4 <USBD_CDC_ReceivePacket+0x68>)
 8006bc4:	7819      	ldrb	r1, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006bcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 ffe7 	bl	8008ba4 <USBD_LL_PrepareReceive>
 8006bd6:	e008      	b.n	8006bea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bd8:	4b06      	ldr	r3, [pc, #24]	@ (8006bf4 <USBD_CDC_ReceivePacket+0x68>)
 8006bda:	7819      	ldrb	r1, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006be2:	2340      	movs	r3, #64	@ 0x40
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 ffdd 	bl	8008ba4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	2400009c 	.word	0x2400009c

08006bf8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	4613      	mov	r3, r2
 8006c04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e01f      	b.n	8006c50 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	79fa      	ldrb	r2, [r7, #7]
 8006c42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f001 fe53 	bl	80088f0 <USBD_LL_Init>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c62:	2300      	movs	r3, #0
 8006c64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e025      	b.n	8006cbc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	32ae      	adds	r2, #174	@ 0xae
 8006c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00f      	beq.n	8006cac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	32ae      	adds	r2, #174	@ 0xae
 8006c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9c:	f107 020e 	add.w	r2, r7, #14
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4798      	blx	r3
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fe5f 	bl	8008990 <USBD_LL_Start>
 8006cd2:	4603      	mov	r3, r0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ce4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d009      	beq.n	8006d20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	78fa      	ldrb	r2, [r7, #3]
 8006d16:	4611      	mov	r1, r2
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	4798      	blx	r3
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b084      	sub	sp, #16
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	78fa      	ldrb	r2, [r7, #3]
 8006d44:	4611      	mov	r1, r2
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	4798      	blx	r3
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006d50:	2303      	movs	r3, #3
 8006d52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 f936 	bl	8007fe2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006d84:	461a      	mov	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006d92:	f003 031f 	and.w	r3, r3, #31
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d01a      	beq.n	8006dd0 <USBD_LL_SetupStage+0x72>
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d822      	bhi.n	8006de4 <USBD_LL_SetupStage+0x86>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <USBD_LL_SetupStage+0x4a>
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d00a      	beq.n	8006dbc <USBD_LL_SetupStage+0x5e>
 8006da6:	e01d      	b.n	8006de4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fb63 	bl	800747c <USBD_StdDevReq>
 8006db6:	4603      	mov	r3, r0
 8006db8:	73fb      	strb	r3, [r7, #15]
      break;
 8006dba:	e020      	b.n	8006dfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fbcb 	bl	8007560 <USBD_StdItfReq>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8006dce:	e016      	b.n	8006dfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fc2d 	bl	8007638 <USBD_StdEPReq>
 8006dde:	4603      	mov	r3, r0
 8006de0:	73fb      	strb	r3, [r7, #15]
      break;
 8006de2:	e00c      	b.n	8006dfe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006dea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 fe2c 	bl	8008a50 <USBD_LL_StallEP>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8006dfc:	bf00      	nop
  }

  return ret;
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	460b      	mov	r3, r1
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006e1a:	7afb      	ldrb	r3, [r7, #11]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d16e      	bne.n	8006efe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006e26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	f040 8098 	bne.w	8006f64 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d913      	bls.n	8006e68 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	1ad2      	subs	r2, r2, r3
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	4293      	cmp	r3, r2
 8006e58:	bf28      	it	cs
 8006e5a:	4613      	movcs	r3, r2
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f001 f9be 	bl	80081e2 <USBD_CtlContinueRx>
 8006e66:	e07d      	b.n	8006f64 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006e6e:	f003 031f 	and.w	r3, r3, #31
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d014      	beq.n	8006ea0 <USBD_LL_DataOutStage+0x98>
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d81d      	bhi.n	8006eb6 <USBD_LL_DataOutStage+0xae>
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <USBD_LL_DataOutStage+0x7c>
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d003      	beq.n	8006e8a <USBD_LL_DataOutStage+0x82>
 8006e82:	e018      	b.n	8006eb6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	75bb      	strb	r3, [r7, #22]
            break;
 8006e88:	e018      	b.n	8006ebc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	4619      	mov	r1, r3
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 fa64 	bl	8007362 <USBD_CoreFindIF>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	75bb      	strb	r3, [r7, #22]
            break;
 8006e9e:	e00d      	b.n	8006ebc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 fa66 	bl	800737c <USBD_CoreFindEP>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	75bb      	strb	r3, [r7, #22]
            break;
 8006eb4:	e002      	b.n	8006ebc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	75bb      	strb	r3, [r7, #22]
            break;
 8006eba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006ebc:	7dbb      	ldrb	r3, [r7, #22]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d119      	bne.n	8006ef6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d113      	bne.n	8006ef6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006ece:	7dba      	ldrb	r2, [r7, #22]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	32ae      	adds	r2, #174	@ 0xae
 8006ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00b      	beq.n	8006ef6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006ede:	7dba      	ldrb	r2, [r7, #22]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006ee6:	7dba      	ldrb	r2, [r7, #22]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	32ae      	adds	r2, #174	@ 0xae
 8006eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f001 f984 	bl	8008204 <USBD_CtlSendStatus>
 8006efc:	e032      	b.n	8006f64 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006efe:	7afb      	ldrb	r3, [r7, #11]
 8006f00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	4619      	mov	r1, r3
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 fa37 	bl	800737c <USBD_CoreFindEP>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f12:	7dbb      	ldrb	r3, [r7, #22]
 8006f14:	2bff      	cmp	r3, #255	@ 0xff
 8006f16:	d025      	beq.n	8006f64 <USBD_LL_DataOutStage+0x15c>
 8006f18:	7dbb      	ldrb	r3, [r7, #22]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d122      	bne.n	8006f64 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d117      	bne.n	8006f5a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f2a:	7dba      	ldrb	r2, [r7, #22]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	32ae      	adds	r2, #174	@ 0xae
 8006f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00f      	beq.n	8006f5a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006f3a:	7dba      	ldrb	r2, [r7, #22]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006f42:	7dba      	ldrb	r2, [r7, #22]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	32ae      	adds	r2, #174	@ 0xae
 8006f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	7afa      	ldrb	r2, [r7, #11]
 8006f50:	4611      	mov	r1, r2
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	4798      	blx	r3
 8006f56:	4603      	mov	r3, r0
 8006f58:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	e000      	b.n	8006f66 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b086      	sub	sp, #24
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	60f8      	str	r0, [r7, #12]
 8006f76:	460b      	mov	r3, r1
 8006f78:	607a      	str	r2, [r7, #4]
 8006f7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006f7c:	7afb      	ldrb	r3, [r7, #11]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d16f      	bne.n	8007062 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3314      	adds	r3, #20
 8006f86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d15a      	bne.n	8007048 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d914      	bls.n	8006fc8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	1ad2      	subs	r2, r2, r3
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f001 f8e6 	bl	8008186 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f001 fdef 	bl	8008ba4 <USBD_LL_PrepareReceive>
 8006fc6:	e03f      	b.n	8007048 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d11c      	bne.n	800700e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d316      	bcc.n	800700e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d20f      	bcs.n	800700e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f001 f8c7 	bl	8008186 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007000:	2300      	movs	r3, #0
 8007002:	2200      	movs	r2, #0
 8007004:	2100      	movs	r1, #0
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f001 fdcc 	bl	8008ba4 <USBD_LL_PrepareReceive>
 800700c:	e01c      	b.n	8007048 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b03      	cmp	r3, #3
 8007018:	d10f      	bne.n	800703a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d009      	beq.n	800703a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800703a:	2180      	movs	r1, #128	@ 0x80
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f001 fd07 	bl	8008a50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f001 f8f1 	bl	800822a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d03a      	beq.n	80070c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f7ff fe42 	bl	8006cdc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007060:	e032      	b.n	80070c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007062:	7afb      	ldrb	r3, [r7, #11]
 8007064:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007068:	b2db      	uxtb	r3, r3
 800706a:	4619      	mov	r1, r3
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 f985 	bl	800737c <USBD_CoreFindEP>
 8007072:	4603      	mov	r3, r0
 8007074:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007076:	7dfb      	ldrb	r3, [r7, #23]
 8007078:	2bff      	cmp	r3, #255	@ 0xff
 800707a:	d025      	beq.n	80070c8 <USBD_LL_DataInStage+0x15a>
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d122      	bne.n	80070c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b03      	cmp	r3, #3
 800708c:	d11c      	bne.n	80070c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800708e:	7dfa      	ldrb	r2, [r7, #23]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	32ae      	adds	r2, #174	@ 0xae
 8007094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d014      	beq.n	80070c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800709e:	7dfa      	ldrb	r2, [r7, #23]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80070a6:	7dfa      	ldrb	r2, [r7, #23]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	32ae      	adds	r2, #174	@ 0xae
 80070ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	7afa      	ldrb	r2, [r7, #11]
 80070b4:	4611      	mov	r1, r2
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	4798      	blx	r3
 80070ba:	4603      	mov	r3, r0
 80070bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80070be:	7dbb      	ldrb	r3, [r7, #22]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80070c4:	7dbb      	ldrb	r3, [r7, #22]
 80070c6:	e000      	b.n	80070ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d014      	beq.n	8007138 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00e      	beq.n	8007138 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	6852      	ldr	r2, [r2, #4]
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	4611      	mov	r1, r2
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	4798      	blx	r3
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007134:	2303      	movs	r3, #3
 8007136:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007138:	2340      	movs	r3, #64	@ 0x40
 800713a:	2200      	movs	r2, #0
 800713c:	2100      	movs	r1, #0
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f001 fc41 	bl	80089c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2240      	movs	r2, #64	@ 0x40
 8007150:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007154:	2340      	movs	r3, #64	@ 0x40
 8007156:	2200      	movs	r2, #0
 8007158:	2180      	movs	r1, #128	@ 0x80
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 fc33 	bl	80089c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2240      	movs	r2, #64	@ 0x40
 800716a:	621a      	str	r2, [r3, #32]

  return ret;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	460b      	mov	r3, r1
 8007180:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	78fa      	ldrb	r2, [r7, #3]
 8007186:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d006      	beq.n	80071b8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2204      	movs	r2, #4
 80071bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d106      	bne.n	80071f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b03      	cmp	r3, #3
 8007210:	d110      	bne.n	8007234 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00b      	beq.n	8007234 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d005      	beq.n	8007234 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	32ae      	adds	r2, #174	@ 0xae
 8007254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800725c:	2303      	movs	r3, #3
 800725e:	e01c      	b.n	800729a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b03      	cmp	r3, #3
 800726a:	d115      	bne.n	8007298 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	32ae      	adds	r2, #174	@ 0xae
 8007276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	32ae      	adds	r2, #174	@ 0xae
 800728a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	78fa      	ldrb	r2, [r7, #3]
 8007292:	4611      	mov	r1, r2
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b082      	sub	sp, #8
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	460b      	mov	r3, r1
 80072ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	32ae      	adds	r2, #174	@ 0xae
 80072b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e01c      	b.n	80072fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d115      	bne.n	80072fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	32ae      	adds	r2, #174	@ 0xae
 80072da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00b      	beq.n	80072fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	32ae      	adds	r2, #174	@ 0xae
 80072ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f4:	78fa      	ldrb	r2, [r7, #3]
 80072f6:	4611      	mov	r1, r2
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007306:	b480      	push	{r7}
 8007308:	b083      	sub	sp, #12
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00e      	beq.n	8007358 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6852      	ldr	r2, [r2, #4]
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	4611      	mov	r1, r2
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	4798      	blx	r3
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007354:	2303      	movs	r3, #3
 8007356:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	460b      	mov	r3, r1
 800736c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800736e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007370:	4618      	mov	r0, r3
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007388:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800738a:	4618      	mov	r0, r3
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b086      	sub	sp, #24
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	460b      	mov	r3, r1
 80073a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	885b      	ldrh	r3, [r3, #2]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	7812      	ldrb	r2, [r2, #0]
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d91f      	bls.n	80073fc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80073c2:	e013      	b.n	80073ec <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80073c4:	f107 030a 	add.w	r3, r7, #10
 80073c8:	4619      	mov	r1, r3
 80073ca:	6978      	ldr	r0, [r7, #20]
 80073cc:	f000 f81b 	bl	8007406 <USBD_GetNextDesc>
 80073d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	2b05      	cmp	r3, #5
 80073d8:	d108      	bne.n	80073ec <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	789b      	ldrb	r3, [r3, #2]
 80073e2:	78fa      	ldrb	r2, [r7, #3]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d008      	beq.n	80073fa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80073e8:	2300      	movs	r3, #0
 80073ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	885b      	ldrh	r3, [r3, #2]
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	897b      	ldrh	r3, [r7, #10]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d8e5      	bhi.n	80073c4 <USBD_GetEpDesc+0x2e>
 80073f8:	e000      	b.n	80073fc <USBD_GetEpDesc+0x66>
          break;
 80073fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80073fc:	693b      	ldr	r3, [r7, #16]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007406:	b480      	push	{r7}
 8007408:	b085      	sub	sp, #20
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	881b      	ldrh	r3, [r3, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	7812      	ldrb	r2, [r2, #0]
 800741c:	4413      	add	r3, r2
 800741e:	b29a      	uxth	r2, r3
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4413      	add	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007430:	68fb      	ldr	r3, [r7, #12]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800743e:	b480      	push	{r7}
 8007440:	b087      	sub	sp, #28
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	3301      	adds	r3, #1
 8007454:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800745c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	b21a      	sxth	r2, r3
 8007464:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007468:	4313      	orrs	r3, r2
 800746a:	b21b      	sxth	r3, r3
 800746c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800746e:	89fb      	ldrh	r3, [r7, #14]
}
 8007470:	4618      	mov	r0, r3
 8007472:	371c      	adds	r7, #28
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007492:	2b40      	cmp	r3, #64	@ 0x40
 8007494:	d005      	beq.n	80074a2 <USBD_StdDevReq+0x26>
 8007496:	2b40      	cmp	r3, #64	@ 0x40
 8007498:	d857      	bhi.n	800754a <USBD_StdDevReq+0xce>
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00f      	beq.n	80074be <USBD_StdDevReq+0x42>
 800749e:	2b20      	cmp	r3, #32
 80074a0:	d153      	bne.n	800754a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	32ae      	adds	r2, #174	@ 0xae
 80074ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	4798      	blx	r3
 80074b8:	4603      	mov	r3, r0
 80074ba:	73fb      	strb	r3, [r7, #15]
      break;
 80074bc:	e04a      	b.n	8007554 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	785b      	ldrb	r3, [r3, #1]
 80074c2:	2b09      	cmp	r3, #9
 80074c4:	d83b      	bhi.n	800753e <USBD_StdDevReq+0xc2>
 80074c6:	a201      	add	r2, pc, #4	@ (adr r2, 80074cc <USBD_StdDevReq+0x50>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	08007521 	.word	0x08007521
 80074d0:	08007535 	.word	0x08007535
 80074d4:	0800753f 	.word	0x0800753f
 80074d8:	0800752b 	.word	0x0800752b
 80074dc:	0800753f 	.word	0x0800753f
 80074e0:	080074ff 	.word	0x080074ff
 80074e4:	080074f5 	.word	0x080074f5
 80074e8:	0800753f 	.word	0x0800753f
 80074ec:	08007517 	.word	0x08007517
 80074f0:	08007509 	.word	0x08007509
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fa3c 	bl	8007974 <USBD_GetDescriptor>
          break;
 80074fc:	e024      	b.n	8007548 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fbcb 	bl	8007c9c <USBD_SetAddress>
          break;
 8007506:	e01f      	b.n	8007548 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fc0a 	bl	8007d24 <USBD_SetConfig>
 8007510:	4603      	mov	r3, r0
 8007512:	73fb      	strb	r3, [r7, #15]
          break;
 8007514:	e018      	b.n	8007548 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fcad 	bl	8007e78 <USBD_GetConfig>
          break;
 800751e:	e013      	b.n	8007548 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fcde 	bl	8007ee4 <USBD_GetStatus>
          break;
 8007528:	e00e      	b.n	8007548 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fd0d 	bl	8007f4c <USBD_SetFeature>
          break;
 8007532:	e009      	b.n	8007548 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fd31 	bl	8007f9e <USBD_ClrFeature>
          break;
 800753c:	e004      	b.n	8007548 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fd88 	bl	8008056 <USBD_CtlError>
          break;
 8007546:	bf00      	nop
      }
      break;
 8007548:	e004      	b.n	8007554 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fd82 	bl	8008056 <USBD_CtlError>
      break;
 8007552:	bf00      	nop
  }

  return ret;
 8007554:	7bfb      	ldrb	r3, [r7, #15]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop

08007560 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007576:	2b40      	cmp	r3, #64	@ 0x40
 8007578:	d005      	beq.n	8007586 <USBD_StdItfReq+0x26>
 800757a:	2b40      	cmp	r3, #64	@ 0x40
 800757c:	d852      	bhi.n	8007624 <USBD_StdItfReq+0xc4>
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <USBD_StdItfReq+0x26>
 8007582:	2b20      	cmp	r3, #32
 8007584:	d14e      	bne.n	8007624 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800758c:	b2db      	uxtb	r3, r3
 800758e:	3b01      	subs	r3, #1
 8007590:	2b02      	cmp	r3, #2
 8007592:	d840      	bhi.n	8007616 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	889b      	ldrh	r3, [r3, #4]
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b01      	cmp	r3, #1
 800759c:	d836      	bhi.n	800760c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	889b      	ldrh	r3, [r3, #4]
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7ff fedb 	bl	8007362 <USBD_CoreFindIF>
 80075ac:	4603      	mov	r3, r0
 80075ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2bff      	cmp	r3, #255	@ 0xff
 80075b4:	d01d      	beq.n	80075f2 <USBD_StdItfReq+0x92>
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d11a      	bne.n	80075f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80075bc:	7bba      	ldrb	r2, [r7, #14]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	32ae      	adds	r2, #174	@ 0xae
 80075c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00f      	beq.n	80075ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80075cc:	7bba      	ldrb	r2, [r7, #14]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075d4:	7bba      	ldrb	r2, [r7, #14]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	32ae      	adds	r2, #174	@ 0xae
 80075da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	4798      	blx	r3
 80075e6:	4603      	mov	r3, r0
 80075e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075ea:	e004      	b.n	80075f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80075ec:	2303      	movs	r3, #3
 80075ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075f0:	e001      	b.n	80075f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80075f2:	2303      	movs	r3, #3
 80075f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	88db      	ldrh	r3, [r3, #6]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d110      	bne.n	8007620 <USBD_StdItfReq+0xc0>
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10d      	bne.n	8007620 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fdfd 	bl	8008204 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800760a:	e009      	b.n	8007620 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fd21 	bl	8008056 <USBD_CtlError>
          break;
 8007614:	e004      	b.n	8007620 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fd1c 	bl	8008056 <USBD_CtlError>
          break;
 800761e:	e000      	b.n	8007622 <USBD_StdItfReq+0xc2>
          break;
 8007620:	bf00      	nop
      }
      break;
 8007622:	e004      	b.n	800762e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fd15 	bl	8008056 <USBD_CtlError>
      break;
 800762c:	bf00      	nop
  }

  return ret;
 800762e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	889b      	ldrh	r3, [r3, #4]
 800764a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007654:	2b40      	cmp	r3, #64	@ 0x40
 8007656:	d007      	beq.n	8007668 <USBD_StdEPReq+0x30>
 8007658:	2b40      	cmp	r3, #64	@ 0x40
 800765a:	f200 817f 	bhi.w	800795c <USBD_StdEPReq+0x324>
 800765e:	2b00      	cmp	r3, #0
 8007660:	d02a      	beq.n	80076b8 <USBD_StdEPReq+0x80>
 8007662:	2b20      	cmp	r3, #32
 8007664:	f040 817a 	bne.w	800795c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7ff fe85 	bl	800737c <USBD_CoreFindEP>
 8007672:	4603      	mov	r3, r0
 8007674:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007676:	7b7b      	ldrb	r3, [r7, #13]
 8007678:	2bff      	cmp	r3, #255	@ 0xff
 800767a:	f000 8174 	beq.w	8007966 <USBD_StdEPReq+0x32e>
 800767e:	7b7b      	ldrb	r3, [r7, #13]
 8007680:	2b00      	cmp	r3, #0
 8007682:	f040 8170 	bne.w	8007966 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007686:	7b7a      	ldrb	r2, [r7, #13]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800768e:	7b7a      	ldrb	r2, [r7, #13]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	32ae      	adds	r2, #174	@ 0xae
 8007694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 8163 	beq.w	8007966 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80076a0:	7b7a      	ldrb	r2, [r7, #13]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	32ae      	adds	r2, #174	@ 0xae
 80076a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	4798      	blx	r3
 80076b2:	4603      	mov	r3, r0
 80076b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076b6:	e156      	b.n	8007966 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	785b      	ldrb	r3, [r3, #1]
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d008      	beq.n	80076d2 <USBD_StdEPReq+0x9a>
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	f300 8145 	bgt.w	8007950 <USBD_StdEPReq+0x318>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 809b 	beq.w	8007802 <USBD_StdEPReq+0x1ca>
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d03c      	beq.n	800774a <USBD_StdEPReq+0x112>
 80076d0:	e13e      	b.n	8007950 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d002      	beq.n	80076e4 <USBD_StdEPReq+0xac>
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d016      	beq.n	8007710 <USBD_StdEPReq+0xd8>
 80076e2:	e02c      	b.n	800773e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00d      	beq.n	8007706 <USBD_StdEPReq+0xce>
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	2b80      	cmp	r3, #128	@ 0x80
 80076ee:	d00a      	beq.n	8007706 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f001 f9ab 	bl	8008a50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076fa:	2180      	movs	r1, #128	@ 0x80
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f001 f9a7 	bl	8008a50 <USBD_LL_StallEP>
 8007702:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007704:	e020      	b.n	8007748 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fca4 	bl	8008056 <USBD_CtlError>
              break;
 800770e:	e01b      	b.n	8007748 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	885b      	ldrh	r3, [r3, #2]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10e      	bne.n	8007736 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00b      	beq.n	8007736 <USBD_StdEPReq+0xfe>
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	2b80      	cmp	r3, #128	@ 0x80
 8007722:	d008      	beq.n	8007736 <USBD_StdEPReq+0xfe>
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	88db      	ldrh	r3, [r3, #6]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d104      	bne.n	8007736 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 f98d 	bl	8008a50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fd64 	bl	8008204 <USBD_CtlSendStatus>

              break;
 800773c:	e004      	b.n	8007748 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fc88 	bl	8008056 <USBD_CtlError>
              break;
 8007746:	bf00      	nop
          }
          break;
 8007748:	e107      	b.n	800795a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b02      	cmp	r3, #2
 8007754:	d002      	beq.n	800775c <USBD_StdEPReq+0x124>
 8007756:	2b03      	cmp	r3, #3
 8007758:	d016      	beq.n	8007788 <USBD_StdEPReq+0x150>
 800775a:	e04b      	b.n	80077f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00d      	beq.n	800777e <USBD_StdEPReq+0x146>
 8007762:	7bbb      	ldrb	r3, [r7, #14]
 8007764:	2b80      	cmp	r3, #128	@ 0x80
 8007766:	d00a      	beq.n	800777e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 f96f 	bl	8008a50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007772:	2180      	movs	r1, #128	@ 0x80
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 f96b 	bl	8008a50 <USBD_LL_StallEP>
 800777a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800777c:	e040      	b.n	8007800 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fc68 	bl	8008056 <USBD_CtlError>
              break;
 8007786:	e03b      	b.n	8007800 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	885b      	ldrh	r3, [r3, #2]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d136      	bne.n	80077fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007796:	2b00      	cmp	r3, #0
 8007798:	d004      	beq.n	80077a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 f975 	bl	8008a8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fd2d 	bl	8008204 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7ff fde4 	bl	800737c <USBD_CoreFindEP>
 80077b4:	4603      	mov	r3, r0
 80077b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077b8:	7b7b      	ldrb	r3, [r7, #13]
 80077ba:	2bff      	cmp	r3, #255	@ 0xff
 80077bc:	d01f      	beq.n	80077fe <USBD_StdEPReq+0x1c6>
 80077be:	7b7b      	ldrb	r3, [r7, #13]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d11c      	bne.n	80077fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80077c4:	7b7a      	ldrb	r2, [r7, #13]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80077cc:	7b7a      	ldrb	r2, [r7, #13]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	32ae      	adds	r2, #174	@ 0xae
 80077d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d010      	beq.n	80077fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80077dc:	7b7a      	ldrb	r2, [r7, #13]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	32ae      	adds	r2, #174	@ 0xae
 80077e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	4798      	blx	r3
 80077ee:	4603      	mov	r3, r0
 80077f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80077f2:	e004      	b.n	80077fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fc2d 	bl	8008056 <USBD_CtlError>
              break;
 80077fc:	e000      	b.n	8007800 <USBD_StdEPReq+0x1c8>
              break;
 80077fe:	bf00      	nop
          }
          break;
 8007800:	e0ab      	b.n	800795a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b02      	cmp	r3, #2
 800780c:	d002      	beq.n	8007814 <USBD_StdEPReq+0x1dc>
 800780e:	2b03      	cmp	r3, #3
 8007810:	d032      	beq.n	8007878 <USBD_StdEPReq+0x240>
 8007812:	e097      	b.n	8007944 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d007      	beq.n	800782a <USBD_StdEPReq+0x1f2>
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	2b80      	cmp	r3, #128	@ 0x80
 800781e:	d004      	beq.n	800782a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fc17 	bl	8008056 <USBD_CtlError>
                break;
 8007828:	e091      	b.n	800794e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800782a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800782e:	2b00      	cmp	r3, #0
 8007830:	da0b      	bge.n	800784a <USBD_StdEPReq+0x212>
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007838:	4613      	mov	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	3310      	adds	r3, #16
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	4413      	add	r3, r2
 8007846:	3304      	adds	r3, #4
 8007848:	e00b      	b.n	8007862 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007850:	4613      	mov	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	4413      	add	r3, r2
 8007860:	3304      	adds	r3, #4
 8007862:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2200      	movs	r2, #0
 8007868:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2202      	movs	r2, #2
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fc6d 	bl	8008150 <USBD_CtlSendData>
              break;
 8007876:	e06a      	b.n	800794e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800787c:	2b00      	cmp	r3, #0
 800787e:	da11      	bge.n	80078a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	f003 020f 	and.w	r2, r3, #15
 8007886:	6879      	ldr	r1, [r7, #4]
 8007888:	4613      	mov	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	440b      	add	r3, r1
 8007892:	3324      	adds	r3, #36	@ 0x24
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d117      	bne.n	80078ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fbda 	bl	8008056 <USBD_CtlError>
                  break;
 80078a2:	e054      	b.n	800794e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078a4:	7bbb      	ldrb	r3, [r7, #14]
 80078a6:	f003 020f 	and.w	r2, r3, #15
 80078aa:	6879      	ldr	r1, [r7, #4]
 80078ac:	4613      	mov	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	440b      	add	r3, r1
 80078b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d104      	bne.n	80078ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fbc7 	bl	8008056 <USBD_CtlError>
                  break;
 80078c8:	e041      	b.n	800794e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	da0b      	bge.n	80078ea <USBD_StdEPReq+0x2b2>
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80078d8:	4613      	mov	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4413      	add	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	3310      	adds	r3, #16
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	4413      	add	r3, r2
 80078e6:	3304      	adds	r3, #4
 80078e8:	e00b      	b.n	8007902 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078f0:	4613      	mov	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	4413      	add	r3, r2
 8007900:	3304      	adds	r3, #4
 8007902:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <USBD_StdEPReq+0x2d8>
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	2b80      	cmp	r3, #128	@ 0x80
 800790e:	d103      	bne.n	8007918 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	e00e      	b.n	8007936 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 f8d5 	bl	8008acc <USBD_LL_IsStallEP>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2201      	movs	r2, #1
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	e002      	b.n	8007936 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2200      	movs	r2, #0
 8007934:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2202      	movs	r2, #2
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fc07 	bl	8008150 <USBD_CtlSendData>
              break;
 8007942:	e004      	b.n	800794e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fb85 	bl	8008056 <USBD_CtlError>
              break;
 800794c:	bf00      	nop
          }
          break;
 800794e:	e004      	b.n	800795a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fb7f 	bl	8008056 <USBD_CtlError>
          break;
 8007958:	bf00      	nop
      }
      break;
 800795a:	e005      	b.n	8007968 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fb79 	bl	8008056 <USBD_CtlError>
      break;
 8007964:	e000      	b.n	8007968 <USBD_StdEPReq+0x330>
      break;
 8007966:	bf00      	nop
  }

  return ret;
 8007968:	7bfb      	ldrb	r3, [r7, #15]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007982:	2300      	movs	r3, #0
 8007984:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007986:	2300      	movs	r3, #0
 8007988:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	885b      	ldrh	r3, [r3, #2]
 800798e:	0a1b      	lsrs	r3, r3, #8
 8007990:	b29b      	uxth	r3, r3
 8007992:	3b01      	subs	r3, #1
 8007994:	2b0e      	cmp	r3, #14
 8007996:	f200 8152 	bhi.w	8007c3e <USBD_GetDescriptor+0x2ca>
 800799a:	a201      	add	r2, pc, #4	@ (adr r2, 80079a0 <USBD_GetDescriptor+0x2c>)
 800799c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a0:	08007a11 	.word	0x08007a11
 80079a4:	08007a29 	.word	0x08007a29
 80079a8:	08007a69 	.word	0x08007a69
 80079ac:	08007c3f 	.word	0x08007c3f
 80079b0:	08007c3f 	.word	0x08007c3f
 80079b4:	08007bdf 	.word	0x08007bdf
 80079b8:	08007c0b 	.word	0x08007c0b
 80079bc:	08007c3f 	.word	0x08007c3f
 80079c0:	08007c3f 	.word	0x08007c3f
 80079c4:	08007c3f 	.word	0x08007c3f
 80079c8:	08007c3f 	.word	0x08007c3f
 80079cc:	08007c3f 	.word	0x08007c3f
 80079d0:	08007c3f 	.word	0x08007c3f
 80079d4:	08007c3f 	.word	0x08007c3f
 80079d8:	080079dd 	.word	0x080079dd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00b      	beq.n	8007a00 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	7c12      	ldrb	r2, [r2, #16]
 80079f4:	f107 0108 	add.w	r1, r7, #8
 80079f8:	4610      	mov	r0, r2
 80079fa:	4798      	blx	r3
 80079fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079fe:	e126      	b.n	8007c4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fb27 	bl	8008056 <USBD_CtlError>
        err++;
 8007a08:	7afb      	ldrb	r3, [r7, #11]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	72fb      	strb	r3, [r7, #11]
      break;
 8007a0e:	e11e      	b.n	8007c4e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	7c12      	ldrb	r2, [r2, #16]
 8007a1c:	f107 0108 	add.w	r1, r7, #8
 8007a20:	4610      	mov	r0, r2
 8007a22:	4798      	blx	r3
 8007a24:	60f8      	str	r0, [r7, #12]
      break;
 8007a26:	e112      	b.n	8007c4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	7c1b      	ldrb	r3, [r3, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10d      	bne.n	8007a4c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a38:	f107 0208 	add.w	r2, r7, #8
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4798      	blx	r3
 8007a40:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	3301      	adds	r3, #1
 8007a46:	2202      	movs	r2, #2
 8007a48:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a4a:	e100      	b.n	8007c4e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a54:	f107 0208 	add.w	r2, r7, #8
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4798      	blx	r3
 8007a5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3301      	adds	r3, #1
 8007a62:	2202      	movs	r2, #2
 8007a64:	701a      	strb	r2, [r3, #0]
      break;
 8007a66:	e0f2      	b.n	8007c4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	885b      	ldrh	r3, [r3, #2]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b05      	cmp	r3, #5
 8007a70:	f200 80ac 	bhi.w	8007bcc <USBD_GetDescriptor+0x258>
 8007a74:	a201      	add	r2, pc, #4	@ (adr r2, 8007a7c <USBD_GetDescriptor+0x108>)
 8007a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7a:	bf00      	nop
 8007a7c:	08007a95 	.word	0x08007a95
 8007a80:	08007ac9 	.word	0x08007ac9
 8007a84:	08007afd 	.word	0x08007afd
 8007a88:	08007b31 	.word	0x08007b31
 8007a8c:	08007b65 	.word	0x08007b65
 8007a90:	08007b99 	.word	0x08007b99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00b      	beq.n	8007ab8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	7c12      	ldrb	r2, [r2, #16]
 8007aac:	f107 0108 	add.w	r1, r7, #8
 8007ab0:	4610      	mov	r0, r2
 8007ab2:	4798      	blx	r3
 8007ab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ab6:	e091      	b.n	8007bdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 facb 	bl	8008056 <USBD_CtlError>
            err++;
 8007ac0:	7afb      	ldrb	r3, [r7, #11]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ac6:	e089      	b.n	8007bdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00b      	beq.n	8007aec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	7c12      	ldrb	r2, [r2, #16]
 8007ae0:	f107 0108 	add.w	r1, r7, #8
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	4798      	blx	r3
 8007ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aea:	e077      	b.n	8007bdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fab1 	bl	8008056 <USBD_CtlError>
            err++;
 8007af4:	7afb      	ldrb	r3, [r7, #11]
 8007af6:	3301      	adds	r3, #1
 8007af8:	72fb      	strb	r3, [r7, #11]
          break;
 8007afa:	e06f      	b.n	8007bdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00b      	beq.n	8007b20 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	7c12      	ldrb	r2, [r2, #16]
 8007b14:	f107 0108 	add.w	r1, r7, #8
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4798      	blx	r3
 8007b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b1e:	e05d      	b.n	8007bdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fa97 	bl	8008056 <USBD_CtlError>
            err++;
 8007b28:	7afb      	ldrb	r3, [r7, #11]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b2e:	e055      	b.n	8007bdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00b      	beq.n	8007b54 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	7c12      	ldrb	r2, [r2, #16]
 8007b48:	f107 0108 	add.w	r1, r7, #8
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4798      	blx	r3
 8007b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b52:	e043      	b.n	8007bdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fa7d 	bl	8008056 <USBD_CtlError>
            err++;
 8007b5c:	7afb      	ldrb	r3, [r7, #11]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	72fb      	strb	r3, [r7, #11]
          break;
 8007b62:	e03b      	b.n	8007bdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00b      	beq.n	8007b88 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	7c12      	ldrb	r2, [r2, #16]
 8007b7c:	f107 0108 	add.w	r1, r7, #8
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
 8007b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b86:	e029      	b.n	8007bdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fa63 	bl	8008056 <USBD_CtlError>
            err++;
 8007b90:	7afb      	ldrb	r3, [r7, #11]
 8007b92:	3301      	adds	r3, #1
 8007b94:	72fb      	strb	r3, [r7, #11]
          break;
 8007b96:	e021      	b.n	8007bdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00b      	beq.n	8007bbc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	7c12      	ldrb	r2, [r2, #16]
 8007bb0:	f107 0108 	add.w	r1, r7, #8
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4798      	blx	r3
 8007bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bba:	e00f      	b.n	8007bdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fa49 	bl	8008056 <USBD_CtlError>
            err++;
 8007bc4:	7afb      	ldrb	r3, [r7, #11]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bca:	e007      	b.n	8007bdc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fa41 	bl	8008056 <USBD_CtlError>
          err++;
 8007bd4:	7afb      	ldrb	r3, [r7, #11]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007bda:	bf00      	nop
      }
      break;
 8007bdc:	e037      	b.n	8007c4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	7c1b      	ldrb	r3, [r3, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d109      	bne.n	8007bfa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bee:	f107 0208 	add.w	r2, r7, #8
 8007bf2:	4610      	mov	r0, r2
 8007bf4:	4798      	blx	r3
 8007bf6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bf8:	e029      	b.n	8007c4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fa2a 	bl	8008056 <USBD_CtlError>
        err++;
 8007c02:	7afb      	ldrb	r3, [r7, #11]
 8007c04:	3301      	adds	r3, #1
 8007c06:	72fb      	strb	r3, [r7, #11]
      break;
 8007c08:	e021      	b.n	8007c4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	7c1b      	ldrb	r3, [r3, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10d      	bne.n	8007c2e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c1a:	f107 0208 	add.w	r2, r7, #8
 8007c1e:	4610      	mov	r0, r2
 8007c20:	4798      	blx	r3
 8007c22:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3301      	adds	r3, #1
 8007c28:	2207      	movs	r2, #7
 8007c2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c2c:	e00f      	b.n	8007c4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fa10 	bl	8008056 <USBD_CtlError>
        err++;
 8007c36:	7afb      	ldrb	r3, [r7, #11]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c3c:	e007      	b.n	8007c4e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fa08 	bl	8008056 <USBD_CtlError>
      err++;
 8007c46:	7afb      	ldrb	r3, [r7, #11]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c4c:	bf00      	nop
  }

  if (err != 0U)
 8007c4e:	7afb      	ldrb	r3, [r7, #11]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d11e      	bne.n	8007c92 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	88db      	ldrh	r3, [r3, #6]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d016      	beq.n	8007c8a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007c5c:	893b      	ldrh	r3, [r7, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00e      	beq.n	8007c80 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	88da      	ldrh	r2, [r3, #6]
 8007c66:	893b      	ldrh	r3, [r7, #8]
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	bf28      	it	cs
 8007c6c:	4613      	movcs	r3, r2
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c72:	893b      	ldrh	r3, [r7, #8]
 8007c74:	461a      	mov	r2, r3
 8007c76:	68f9      	ldr	r1, [r7, #12]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fa69 	bl	8008150 <USBD_CtlSendData>
 8007c7e:	e009      	b.n	8007c94 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f9e7 	bl	8008056 <USBD_CtlError>
 8007c88:	e004      	b.n	8007c94 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 faba 	bl	8008204 <USBD_CtlSendStatus>
 8007c90:	e000      	b.n	8007c94 <USBD_GetDescriptor+0x320>
    return;
 8007c92:	bf00      	nop
  }
}
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop

08007c9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	889b      	ldrh	r3, [r3, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d131      	bne.n	8007d12 <USBD_SetAddress+0x76>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	88db      	ldrh	r3, [r3, #6]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d12d      	bne.n	8007d12 <USBD_SetAddress+0x76>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	885b      	ldrh	r3, [r3, #2]
 8007cba:	2b7f      	cmp	r3, #127	@ 0x7f
 8007cbc:	d829      	bhi.n	8007d12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	885b      	ldrh	r3, [r3, #2]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d104      	bne.n	8007ce0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f9bc 	bl	8008056 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cde:	e01d      	b.n	8007d1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	7bfa      	ldrb	r2, [r7, #15]
 8007ce4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 ff19 	bl	8008b24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fa86 	bl	8008204 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d004      	beq.n	8007d08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2202      	movs	r2, #2
 8007d02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d06:	e009      	b.n	8007d1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d10:	e004      	b.n	8007d1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f99e 	bl	8008056 <USBD_CtlError>
  }
}
 8007d1a:	bf00      	nop
 8007d1c:	bf00      	nop
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	885b      	ldrh	r3, [r3, #2]
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	4b4e      	ldr	r3, [pc, #312]	@ (8007e74 <USBD_SetConfig+0x150>)
 8007d3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8007e74 <USBD_SetConfig+0x150>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d905      	bls.n	8007d50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f985 	bl	8008056 <USBD_CtlError>
    return USBD_FAIL;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e08c      	b.n	8007e6a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d002      	beq.n	8007d62 <USBD_SetConfig+0x3e>
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d029      	beq.n	8007db4 <USBD_SetConfig+0x90>
 8007d60:	e075      	b.n	8007e4e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007d62:	4b44      	ldr	r3, [pc, #272]	@ (8007e74 <USBD_SetConfig+0x150>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d020      	beq.n	8007dac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007d6a:	4b42      	ldr	r3, [pc, #264]	@ (8007e74 <USBD_SetConfig+0x150>)
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d74:	4b3f      	ldr	r3, [pc, #252]	@ (8007e74 <USBD_SetConfig+0x150>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7fe ffb9 	bl	8006cf2 <USBD_SetClassConfig>
 8007d80:	4603      	mov	r3, r0
 8007d82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d008      	beq.n	8007d9c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f962 	bl	8008056 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2202      	movs	r2, #2
 8007d96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d9a:	e065      	b.n	8007e68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fa31 	bl	8008204 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2203      	movs	r2, #3
 8007da6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007daa:	e05d      	b.n	8007e68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fa29 	bl	8008204 <USBD_CtlSendStatus>
      break;
 8007db2:	e059      	b.n	8007e68 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007db4:	4b2f      	ldr	r3, [pc, #188]	@ (8007e74 <USBD_SetConfig+0x150>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d112      	bne.n	8007de2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8007e74 <USBD_SetConfig+0x150>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007dce:	4b29      	ldr	r3, [pc, #164]	@ (8007e74 <USBD_SetConfig+0x150>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7fe ffa8 	bl	8006d2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fa12 	bl	8008204 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007de0:	e042      	b.n	8007e68 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007de2:	4b24      	ldr	r3, [pc, #144]	@ (8007e74 <USBD_SetConfig+0x150>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d02a      	beq.n	8007e46 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7fe ff96 	bl	8006d2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8007e74 <USBD_SetConfig+0x150>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e08:	4b1a      	ldr	r3, [pc, #104]	@ (8007e74 <USBD_SetConfig+0x150>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fe ff6f 	bl	8006cf2 <USBD_SetClassConfig>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00f      	beq.n	8007e3e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f918 	bl	8008056 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7fe ff7b 	bl	8006d2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007e3c:	e014      	b.n	8007e68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f9e0 	bl	8008204 <USBD_CtlSendStatus>
      break;
 8007e44:	e010      	b.n	8007e68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f9dc 	bl	8008204 <USBD_CtlSendStatus>
      break;
 8007e4c:	e00c      	b.n	8007e68 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f900 	bl	8008056 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e56:	4b07      	ldr	r3, [pc, #28]	@ (8007e74 <USBD_SetConfig+0x150>)
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7fe ff64 	bl	8006d2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007e62:	2303      	movs	r3, #3
 8007e64:	73fb      	strb	r3, [r7, #15]
      break;
 8007e66:	bf00      	nop
  }

  return ret;
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	2400012c 	.word	0x2400012c

08007e78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	88db      	ldrh	r3, [r3, #6]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d004      	beq.n	8007e94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f8e2 	bl	8008056 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e92:	e023      	b.n	8007edc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	dc02      	bgt.n	8007ea6 <USBD_GetConfig+0x2e>
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	dc03      	bgt.n	8007eac <USBD_GetConfig+0x34>
 8007ea4:	e015      	b.n	8007ed2 <USBD_GetConfig+0x5a>
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d00b      	beq.n	8007ec2 <USBD_GetConfig+0x4a>
 8007eaa:	e012      	b.n	8007ed2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f948 	bl	8008150 <USBD_CtlSendData>
        break;
 8007ec0:	e00c      	b.n	8007edc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f940 	bl	8008150 <USBD_CtlSendData>
        break;
 8007ed0:	e004      	b.n	8007edc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f8be 	bl	8008056 <USBD_CtlError>
        break;
 8007eda:	bf00      	nop
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d81e      	bhi.n	8007f3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	88db      	ldrh	r3, [r3, #6]
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d004      	beq.n	8007f0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f8a5 	bl	8008056 <USBD_CtlError>
        break;
 8007f0c:	e01a      	b.n	8007f44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d005      	beq.n	8007f2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f043 0202 	orr.w	r2, r3, #2
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	330c      	adds	r3, #12
 8007f2e:	2202      	movs	r2, #2
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f90c 	bl	8008150 <USBD_CtlSendData>
      break;
 8007f38:	e004      	b.n	8007f44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f88a 	bl	8008056 <USBD_CtlError>
      break;
 8007f42:	bf00      	nop
  }
}
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	885b      	ldrh	r3, [r3, #2]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d107      	bne.n	8007f6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f94c 	bl	8008204 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007f6c:	e013      	b.n	8007f96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	885b      	ldrh	r3, [r3, #2]
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d10b      	bne.n	8007f8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	889b      	ldrh	r3, [r3, #4]
 8007f7a:	0a1b      	lsrs	r3, r3, #8
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f93c 	bl	8008204 <USBD_CtlSendStatus>
}
 8007f8c:	e003      	b.n	8007f96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f860 	bl	8008056 <USBD_CtlError>
}
 8007f96:	bf00      	nop
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b082      	sub	sp, #8
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d80b      	bhi.n	8007fce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	885b      	ldrh	r3, [r3, #2]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d10c      	bne.n	8007fd8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f91c 	bl	8008204 <USBD_CtlSendStatus>
      }
      break;
 8007fcc:	e004      	b.n	8007fd8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f840 	bl	8008056 <USBD_CtlError>
      break;
 8007fd6:	e000      	b.n	8007fda <USBD_ClrFeature+0x3c>
      break;
 8007fd8:	bf00      	nop
  }
}
 8007fda:	bf00      	nop
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	781a      	ldrb	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	781a      	ldrb	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3301      	adds	r3, #1
 800800a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7ff fa16 	bl	800743e <SWAPBYTE>
 8008012:	4603      	mov	r3, r0
 8008014:	461a      	mov	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	3301      	adds	r3, #1
 800801e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3301      	adds	r3, #1
 8008024:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f7ff fa09 	bl	800743e <SWAPBYTE>
 800802c:	4603      	mov	r3, r0
 800802e:	461a      	mov	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	3301      	adds	r3, #1
 8008038:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3301      	adds	r3, #1
 800803e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f7ff f9fc 	bl	800743e <SWAPBYTE>
 8008046:	4603      	mov	r3, r0
 8008048:	461a      	mov	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	80da      	strh	r2, [r3, #6]
}
 800804e:	bf00      	nop
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b082      	sub	sp, #8
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008060:	2180      	movs	r1, #128	@ 0x80
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fcf4 	bl	8008a50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008068:	2100      	movs	r1, #0
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fcf0 	bl	8008a50 <USBD_LL_StallEP>
}
 8008070:	bf00      	nop
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d042      	beq.n	8008114 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008092:	6938      	ldr	r0, [r7, #16]
 8008094:	f000 f842 	bl	800811c <USBD_GetLen>
 8008098:	4603      	mov	r3, r0
 800809a:	3301      	adds	r3, #1
 800809c:	005b      	lsls	r3, r3, #1
 800809e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080a2:	d808      	bhi.n	80080b6 <USBD_GetString+0x3e>
 80080a4:	6938      	ldr	r0, [r7, #16]
 80080a6:	f000 f839 	bl	800811c <USBD_GetLen>
 80080aa:	4603      	mov	r3, r0
 80080ac:	3301      	adds	r3, #1
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	005b      	lsls	r3, r3, #1
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	e001      	b.n	80080ba <USBD_GetString+0x42>
 80080b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	4413      	add	r3, r2
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	7812      	ldrb	r2, [r2, #0]
 80080c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80080ca:	7dfb      	ldrb	r3, [r7, #23]
 80080cc:	3301      	adds	r3, #1
 80080ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	4413      	add	r3, r2
 80080d6:	2203      	movs	r2, #3
 80080d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80080da:	7dfb      	ldrb	r3, [r7, #23]
 80080dc:	3301      	adds	r3, #1
 80080de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80080e0:	e013      	b.n	800810a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80080e2:	7dfb      	ldrb	r3, [r7, #23]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	4413      	add	r3, r2
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	7812      	ldrb	r2, [r2, #0]
 80080ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	3301      	adds	r3, #1
 80080f2:	613b      	str	r3, [r7, #16]
    idx++;
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
 80080f6:	3301      	adds	r3, #1
 80080f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	4413      	add	r3, r2
 8008100:	2200      	movs	r2, #0
 8008102:	701a      	strb	r2, [r3, #0]
    idx++;
 8008104:	7dfb      	ldrb	r3, [r7, #23]
 8008106:	3301      	adds	r3, #1
 8008108:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e7      	bne.n	80080e2 <USBD_GetString+0x6a>
 8008112:	e000      	b.n	8008116 <USBD_GetString+0x9e>
    return;
 8008114:	bf00      	nop
  }
}
 8008116:	3718      	adds	r7, #24
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008124:	2300      	movs	r3, #0
 8008126:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800812c:	e005      	b.n	800813a <USBD_GetLen+0x1e>
  {
    len++;
 800812e:	7bfb      	ldrb	r3, [r7, #15]
 8008130:	3301      	adds	r3, #1
 8008132:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	3301      	adds	r3, #1
 8008138:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1f5      	bne.n	800812e <USBD_GetLen+0x12>
  }

  return len;
 8008142:	7bfb      	ldrb	r3, [r7, #15]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2202      	movs	r2, #2
 8008160:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	2100      	movs	r1, #0
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f000 fcf3 	bl	8008b62 <USBD_LL_Transmit>

  return USBD_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	60f8      	str	r0, [r7, #12]
 800818e:	60b9      	str	r1, [r7, #8]
 8008190:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	2100      	movs	r1, #0
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 fce2 	bl	8008b62 <USBD_LL_Transmit>

  return USBD_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2203      	movs	r2, #3
 80081b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	2100      	movs	r1, #0
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 fce6 	bl	8008ba4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	60b9      	str	r1, [r7, #8]
 80081ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	2100      	movs	r1, #0
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 fcd5 	bl	8008ba4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2204      	movs	r2, #4
 8008210:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008214:	2300      	movs	r3, #0
 8008216:	2200      	movs	r2, #0
 8008218:	2100      	movs	r1, #0
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fca1 	bl	8008b62 <USBD_LL_Transmit>

  return USBD_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2205      	movs	r2, #5
 8008236:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800823a:	2300      	movs	r3, #0
 800823c:	2200      	movs	r2, #0
 800823e:	2100      	movs	r1, #0
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fcaf 	bl	8008ba4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008254:	2200      	movs	r2, #0
 8008256:	4913      	ldr	r1, [pc, #76]	@ (80082a4 <MX_USB_DEVICE_Init+0x54>)
 8008258:	4813      	ldr	r0, [pc, #76]	@ (80082a8 <MX_USB_DEVICE_Init+0x58>)
 800825a:	f7fe fccd 	bl	8006bf8 <USBD_Init>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008264:	f7f8 f958 	bl	8000518 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008268:	4910      	ldr	r1, [pc, #64]	@ (80082ac <MX_USB_DEVICE_Init+0x5c>)
 800826a:	480f      	ldr	r0, [pc, #60]	@ (80082a8 <MX_USB_DEVICE_Init+0x58>)
 800826c:	f7fe fcf4 	bl	8006c58 <USBD_RegisterClass>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008276:	f7f8 f94f 	bl	8000518 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800827a:	490d      	ldr	r1, [pc, #52]	@ (80082b0 <MX_USB_DEVICE_Init+0x60>)
 800827c:	480a      	ldr	r0, [pc, #40]	@ (80082a8 <MX_USB_DEVICE_Init+0x58>)
 800827e:	f7fe fc2b 	bl	8006ad8 <USBD_CDC_RegisterInterface>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008288:	f7f8 f946 	bl	8000518 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800828c:	4806      	ldr	r0, [pc, #24]	@ (80082a8 <MX_USB_DEVICE_Init+0x58>)
 800828e:	f7fe fd19 	bl	8006cc4 <USBD_Start>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008298:	f7f8 f93e 	bl	8000518 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800829c:	f7fa f98c 	bl	80025b8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082a0:	bf00      	nop
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	240000b4 	.word	0x240000b4
 80082a8:	24000130 	.word	0x24000130
 80082ac:	24000020 	.word	0x24000020
 80082b0:	240000a0 	.word	0x240000a0

080082b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80082b8:	2200      	movs	r2, #0
 80082ba:	4905      	ldr	r1, [pc, #20]	@ (80082d0 <CDC_Init_FS+0x1c>)
 80082bc:	4805      	ldr	r0, [pc, #20]	@ (80082d4 <CDC_Init_FS+0x20>)
 80082be:	f7fe fc25 	bl	8006b0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80082c2:	4905      	ldr	r1, [pc, #20]	@ (80082d8 <CDC_Init_FS+0x24>)
 80082c4:	4803      	ldr	r0, [pc, #12]	@ (80082d4 <CDC_Init_FS+0x20>)
 80082c6:	f7fe fc43 	bl	8006b50 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80082ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	24000c0c 	.word	0x24000c0c
 80082d4:	24000130 	.word	0x24000130
 80082d8:	2400040c 	.word	0x2400040c

080082dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80082dc:	b480      	push	{r7}
 80082de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80082e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	4603      	mov	r3, r0
 80082f4:	6039      	str	r1, [r7, #0]
 80082f6:	71fb      	strb	r3, [r7, #7]
 80082f8:	4613      	mov	r3, r2
 80082fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80082fc:	79fb      	ldrb	r3, [r7, #7]
 80082fe:	2b23      	cmp	r3, #35	@ 0x23
 8008300:	d84a      	bhi.n	8008398 <CDC_Control_FS+0xac>
 8008302:	a201      	add	r2, pc, #4	@ (adr r2, 8008308 <CDC_Control_FS+0x1c>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	08008399 	.word	0x08008399
 800830c:	08008399 	.word	0x08008399
 8008310:	08008399 	.word	0x08008399
 8008314:	08008399 	.word	0x08008399
 8008318:	08008399 	.word	0x08008399
 800831c:	08008399 	.word	0x08008399
 8008320:	08008399 	.word	0x08008399
 8008324:	08008399 	.word	0x08008399
 8008328:	08008399 	.word	0x08008399
 800832c:	08008399 	.word	0x08008399
 8008330:	08008399 	.word	0x08008399
 8008334:	08008399 	.word	0x08008399
 8008338:	08008399 	.word	0x08008399
 800833c:	08008399 	.word	0x08008399
 8008340:	08008399 	.word	0x08008399
 8008344:	08008399 	.word	0x08008399
 8008348:	08008399 	.word	0x08008399
 800834c:	08008399 	.word	0x08008399
 8008350:	08008399 	.word	0x08008399
 8008354:	08008399 	.word	0x08008399
 8008358:	08008399 	.word	0x08008399
 800835c:	08008399 	.word	0x08008399
 8008360:	08008399 	.word	0x08008399
 8008364:	08008399 	.word	0x08008399
 8008368:	08008399 	.word	0x08008399
 800836c:	08008399 	.word	0x08008399
 8008370:	08008399 	.word	0x08008399
 8008374:	08008399 	.word	0x08008399
 8008378:	08008399 	.word	0x08008399
 800837c:	08008399 	.word	0x08008399
 8008380:	08008399 	.word	0x08008399
 8008384:	08008399 	.word	0x08008399
 8008388:	08008399 	.word	0x08008399
 800838c:	08008399 	.word	0x08008399
 8008390:	08008399 	.word	0x08008399
 8008394:	08008399 	.word	0x08008399
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008398:	bf00      	nop
  }

  return (USBD_OK);
 800839a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083b2:	6879      	ldr	r1, [r7, #4]
 80083b4:	4805      	ldr	r0, [pc, #20]	@ (80083cc <CDC_Receive_FS+0x24>)
 80083b6:	f7fe fbcb 	bl	8006b50 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80083ba:	4804      	ldr	r0, [pc, #16]	@ (80083cc <CDC_Receive_FS+0x24>)
 80083bc:	f7fe fbe6 	bl	8006b8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80083c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	24000130 	.word	0x24000130

080083d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	4613      	mov	r3, r2
 80083dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80083e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
	...

080083f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	6039      	str	r1, [r7, #0]
 80083fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2212      	movs	r2, #18
 8008404:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008406:	4b03      	ldr	r3, [pc, #12]	@ (8008414 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008408:	4618      	mov	r0, r3
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	240000d4 	.word	0x240000d4

08008418 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	6039      	str	r1, [r7, #0]
 8008422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2204      	movs	r2, #4
 8008428:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800842a:	4b03      	ldr	r3, [pc, #12]	@ (8008438 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800842c:	4618      	mov	r0, r3
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	240000e8 	.word	0x240000e8

0800843c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	6039      	str	r1, [r7, #0]
 8008446:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008448:	79fb      	ldrb	r3, [r7, #7]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d105      	bne.n	800845a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	4907      	ldr	r1, [pc, #28]	@ (8008470 <USBD_FS_ProductStrDescriptor+0x34>)
 8008452:	4808      	ldr	r0, [pc, #32]	@ (8008474 <USBD_FS_ProductStrDescriptor+0x38>)
 8008454:	f7ff fe10 	bl	8008078 <USBD_GetString>
 8008458:	e004      	b.n	8008464 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	4904      	ldr	r1, [pc, #16]	@ (8008470 <USBD_FS_ProductStrDescriptor+0x34>)
 800845e:	4805      	ldr	r0, [pc, #20]	@ (8008474 <USBD_FS_ProductStrDescriptor+0x38>)
 8008460:	f7ff fe0a 	bl	8008078 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008464:	4b02      	ldr	r3, [pc, #8]	@ (8008470 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	2400140c 	.word	0x2400140c
 8008474:	08008d04 	.word	0x08008d04

08008478 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	6039      	str	r1, [r7, #0]
 8008482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	4904      	ldr	r1, [pc, #16]	@ (8008498 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008488:	4804      	ldr	r0, [pc, #16]	@ (800849c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800848a:	f7ff fdf5 	bl	8008078 <USBD_GetString>
  return USBD_StrDesc;
 800848e:	4b02      	ldr	r3, [pc, #8]	@ (8008498 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	2400140c 	.word	0x2400140c
 800849c:	08008d1c 	.word	0x08008d1c

080084a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	4603      	mov	r3, r0
 80084a8:	6039      	str	r1, [r7, #0]
 80084aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	221a      	movs	r2, #26
 80084b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084b2:	f000 f843 	bl	800853c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084b6:	4b02      	ldr	r3, [pc, #8]	@ (80084c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	240000ec 	.word	0x240000ec

080084c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	6039      	str	r1, [r7, #0]
 80084ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d105      	bne.n	80084e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	4907      	ldr	r1, [pc, #28]	@ (80084f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084da:	4808      	ldr	r0, [pc, #32]	@ (80084fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80084dc:	f7ff fdcc 	bl	8008078 <USBD_GetString>
 80084e0:	e004      	b.n	80084ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	4904      	ldr	r1, [pc, #16]	@ (80084f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084e6:	4805      	ldr	r0, [pc, #20]	@ (80084fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80084e8:	f7ff fdc6 	bl	8008078 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084ec:	4b02      	ldr	r3, [pc, #8]	@ (80084f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	2400140c 	.word	0x2400140c
 80084fc:	08008d30 	.word	0x08008d30

08008500 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	4603      	mov	r3, r0
 8008508:	6039      	str	r1, [r7, #0]
 800850a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d105      	bne.n	800851e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	4907      	ldr	r1, [pc, #28]	@ (8008534 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008516:	4808      	ldr	r0, [pc, #32]	@ (8008538 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008518:	f7ff fdae 	bl	8008078 <USBD_GetString>
 800851c:	e004      	b.n	8008528 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	4904      	ldr	r1, [pc, #16]	@ (8008534 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008522:	4805      	ldr	r0, [pc, #20]	@ (8008538 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008524:	f7ff fda8 	bl	8008078 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008528:	4b02      	ldr	r3, [pc, #8]	@ (8008534 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	2400140c 	.word	0x2400140c
 8008538:	08008d3c 	.word	0x08008d3c

0800853c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008542:	4b0f      	ldr	r3, [pc, #60]	@ (8008580 <Get_SerialNum+0x44>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008548:	4b0e      	ldr	r3, [pc, #56]	@ (8008584 <Get_SerialNum+0x48>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800854e:	4b0e      	ldr	r3, [pc, #56]	@ (8008588 <Get_SerialNum+0x4c>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4413      	add	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d009      	beq.n	8008576 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008562:	2208      	movs	r2, #8
 8008564:	4909      	ldr	r1, [pc, #36]	@ (800858c <Get_SerialNum+0x50>)
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f000 f814 	bl	8008594 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800856c:	2204      	movs	r2, #4
 800856e:	4908      	ldr	r1, [pc, #32]	@ (8008590 <Get_SerialNum+0x54>)
 8008570:	68b8      	ldr	r0, [r7, #8]
 8008572:	f000 f80f 	bl	8008594 <IntToUnicode>
  }
}
 8008576:	bf00      	nop
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	1ff1e800 	.word	0x1ff1e800
 8008584:	1ff1e804 	.word	0x1ff1e804
 8008588:	1ff1e808 	.word	0x1ff1e808
 800858c:	240000ee 	.word	0x240000ee
 8008590:	240000fe 	.word	0x240000fe

08008594 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008594:	b480      	push	{r7}
 8008596:	b087      	sub	sp, #28
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085a6:	2300      	movs	r3, #0
 80085a8:	75fb      	strb	r3, [r7, #23]
 80085aa:	e027      	b.n	80085fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	0f1b      	lsrs	r3, r3, #28
 80085b0:	2b09      	cmp	r3, #9
 80085b2:	d80b      	bhi.n	80085cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	0f1b      	lsrs	r3, r3, #28
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	4619      	mov	r1, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	440b      	add	r3, r1
 80085c4:	3230      	adds	r2, #48	@ 0x30
 80085c6:	b2d2      	uxtb	r2, r2
 80085c8:	701a      	strb	r2, [r3, #0]
 80085ca:	e00a      	b.n	80085e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	0f1b      	lsrs	r3, r3, #28
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	7dfb      	ldrb	r3, [r7, #23]
 80085d4:	005b      	lsls	r3, r3, #1
 80085d6:	4619      	mov	r1, r3
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	440b      	add	r3, r1
 80085dc:	3237      	adds	r2, #55	@ 0x37
 80085de:	b2d2      	uxtb	r2, r2
 80085e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	011b      	lsls	r3, r3, #4
 80085e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	3301      	adds	r3, #1
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	4413      	add	r3, r2
 80085f2:	2200      	movs	r2, #0
 80085f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
 80085f8:	3301      	adds	r3, #1
 80085fa:	75fb      	strb	r3, [r7, #23]
 80085fc:	7dfa      	ldrb	r2, [r7, #23]
 80085fe:	79fb      	ldrb	r3, [r7, #7]
 8008600:	429a      	cmp	r2, r3
 8008602:	d3d3      	bcc.n	80085ac <IntToUnicode+0x18>
  }
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
	...

08008614 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b0ba      	sub	sp, #232	@ 0xe8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800861c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	605a      	str	r2, [r3, #4]
 8008626:	609a      	str	r2, [r3, #8]
 8008628:	60da      	str	r2, [r3, #12]
 800862a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800862c:	f107 0310 	add.w	r3, r7, #16
 8008630:	22c0      	movs	r2, #192	@ 0xc0
 8008632:	2100      	movs	r1, #0
 8008634:	4618      	mov	r0, r3
 8008636:	f000 fb2d 	bl	8008c94 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a30      	ldr	r2, [pc, #192]	@ (8008700 <HAL_PCD_MspInit+0xec>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d159      	bne.n	80086f8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008644:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008648:	f04f 0300 	mov.w	r3, #0
 800864c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008650:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8008654:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008658:	f107 0310 	add.w	r3, r7, #16
 800865c:	4618      	mov	r0, r3
 800865e:	f7fa ff75 	bl	800354c <HAL_RCCEx_PeriphCLKConfig>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8008668:	f7f7 ff56 	bl	8000518 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800866c:	f7f9 ffa4 	bl	80025b8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008670:	4b24      	ldr	r3, [pc, #144]	@ (8008704 <HAL_PCD_MspInit+0xf0>)
 8008672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008676:	4a23      	ldr	r2, [pc, #140]	@ (8008704 <HAL_PCD_MspInit+0xf0>)
 8008678:	f043 0301 	orr.w	r3, r3, #1
 800867c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008680:	4b20      	ldr	r3, [pc, #128]	@ (8008704 <HAL_PCD_MspInit+0xf0>)
 8008682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	60fb      	str	r3, [r7, #12]
 800868c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800868e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008692:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008696:	2302      	movs	r3, #2
 8008698:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800869c:	2300      	movs	r3, #0
 800869e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086a2:	2300      	movs	r3, #0
 80086a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80086a8:	230a      	movs	r3, #10
 80086aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80086b2:	4619      	mov	r1, r3
 80086b4:	4814      	ldr	r0, [pc, #80]	@ (8008708 <HAL_PCD_MspInit+0xf4>)
 80086b6:	f7f8 fac1 	bl	8000c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086ba:	4b12      	ldr	r3, [pc, #72]	@ (8008704 <HAL_PCD_MspInit+0xf0>)
 80086bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80086c0:	4a10      	ldr	r2, [pc, #64]	@ (8008704 <HAL_PCD_MspInit+0xf0>)
 80086c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80086c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80086ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008704 <HAL_PCD_MspInit+0xf0>)
 80086cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80086d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086d4:	60bb      	str	r3, [r7, #8]
 80086d6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 80086d8:	2200      	movs	r2, #0
 80086da:	2100      	movs	r1, #0
 80086dc:	2063      	movs	r0, #99	@ 0x63
 80086de:	f7f8 fa00 	bl	8000ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 80086e2:	2063      	movs	r0, #99	@ 0x63
 80086e4:	f7f8 fa17 	bl	8000b16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80086e8:	2200      	movs	r2, #0
 80086ea:	2100      	movs	r1, #0
 80086ec:	2065      	movs	r0, #101	@ 0x65
 80086ee:	f7f8 f9f8 	bl	8000ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80086f2:	2065      	movs	r0, #101	@ 0x65
 80086f4:	f7f8 fa0f 	bl	8000b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80086f8:	bf00      	nop
 80086fa:	37e8      	adds	r7, #232	@ 0xe8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	40080000 	.word	0x40080000
 8008704:	58024400 	.word	0x58024400
 8008708:	58020000 	.word	0x58020000

0800870c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008720:	4619      	mov	r1, r3
 8008722:	4610      	mov	r0, r2
 8008724:	f7fe fb1b 	bl	8006d5e <USBD_LL_SetupStage>
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008742:	78fa      	ldrb	r2, [r7, #3]
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	4613      	mov	r3, r2
 8008748:	00db      	lsls	r3, r3, #3
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	440b      	add	r3, r1
 8008750:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	78fb      	ldrb	r3, [r7, #3]
 8008758:	4619      	mov	r1, r3
 800875a:	f7fe fb55 	bl	8006e08 <USBD_LL_DataOutStage>
}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	460b      	mov	r3, r1
 8008770:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008778:	78fa      	ldrb	r2, [r7, #3]
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	4613      	mov	r3, r2
 800877e:	00db      	lsls	r3, r3, #3
 8008780:	4413      	add	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	440b      	add	r3, r1
 8008786:	3320      	adds	r3, #32
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	78fb      	ldrb	r3, [r7, #3]
 800878c:	4619      	mov	r1, r3
 800878e:	f7fe fbee 	bl	8006f6e <USBD_LL_DataInStage>
}
 8008792:	bf00      	nop
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fe fd28 	bl	80071fe <USBD_LL_SOF>
}
 80087ae:	bf00      	nop
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b084      	sub	sp, #16
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087be:	2301      	movs	r3, #1
 80087c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	79db      	ldrb	r3, [r3, #7]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d102      	bne.n	80087d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80087ca:	2300      	movs	r3, #0
 80087cc:	73fb      	strb	r3, [r7, #15]
 80087ce:	e008      	b.n	80087e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	79db      	ldrb	r3, [r3, #7]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d102      	bne.n	80087de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80087d8:	2301      	movs	r3, #1
 80087da:	73fb      	strb	r3, [r7, #15]
 80087dc:	e001      	b.n	80087e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80087de:	f7f7 fe9b 	bl	8000518 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087e8:	7bfa      	ldrb	r2, [r7, #15]
 80087ea:	4611      	mov	r1, r2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe fcc2 	bl	8007176 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fe fc6a 	bl	80070d2 <USBD_LL_Reset>
}
 80087fe:	bf00      	nop
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
	...

08008808 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008816:	4618      	mov	r0, r3
 8008818:	f7fe fcbd 	bl	8007196 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	6812      	ldr	r2, [r2, #0]
 800882a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800882e:	f043 0301 	orr.w	r3, r3, #1
 8008832:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	7adb      	ldrb	r3, [r3, #11]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d005      	beq.n	8008848 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800883c:	4b04      	ldr	r3, [pc, #16]	@ (8008850 <HAL_PCD_SuspendCallback+0x48>)
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	4a03      	ldr	r2, [pc, #12]	@ (8008850 <HAL_PCD_SuspendCallback+0x48>)
 8008842:	f043 0306 	orr.w	r3, r3, #6
 8008846:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	e000ed00 	.word	0xe000ed00

08008854 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008862:	4618      	mov	r0, r3
 8008864:	f7fe fcb3 	bl	80071ce <USBD_LL_Resume>
}
 8008868:	bf00      	nop
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	460b      	mov	r3, r1
 800887a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008882:	78fa      	ldrb	r2, [r7, #3]
 8008884:	4611      	mov	r1, r2
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe fd0b 	bl	80072a2 <USBD_LL_IsoOUTIncomplete>
}
 800888c:	bf00      	nop
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	460b      	mov	r3, r1
 800889e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088a6:	78fa      	ldrb	r2, [r7, #3]
 80088a8:	4611      	mov	r1, r2
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fe fcc7 	bl	800723e <USBD_LL_IsoINIncomplete>
}
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fe fd1d 	bl	8007306 <USBD_LL_DevConnected>
}
 80088cc:	bf00      	nop
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe fd1a 	bl	800731c <USBD_LL_DevDisconnected>
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d13e      	bne.n	800897e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008900:	4a21      	ldr	r2, [pc, #132]	@ (8008988 <USBD_LL_Init+0x98>)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a1f      	ldr	r2, [pc, #124]	@ (8008988 <USBD_LL_Init+0x98>)
 800890c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008910:	4b1d      	ldr	r3, [pc, #116]	@ (8008988 <USBD_LL_Init+0x98>)
 8008912:	4a1e      	ldr	r2, [pc, #120]	@ (800898c <USBD_LL_Init+0x9c>)
 8008914:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8008916:	4b1c      	ldr	r3, [pc, #112]	@ (8008988 <USBD_LL_Init+0x98>)
 8008918:	2209      	movs	r2, #9
 800891a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800891c:	4b1a      	ldr	r3, [pc, #104]	@ (8008988 <USBD_LL_Init+0x98>)
 800891e:	2202      	movs	r2, #2
 8008920:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008922:	4b19      	ldr	r3, [pc, #100]	@ (8008988 <USBD_LL_Init+0x98>)
 8008924:	2200      	movs	r2, #0
 8008926:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008928:	4b17      	ldr	r3, [pc, #92]	@ (8008988 <USBD_LL_Init+0x98>)
 800892a:	2202      	movs	r2, #2
 800892c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800892e:	4b16      	ldr	r3, [pc, #88]	@ (8008988 <USBD_LL_Init+0x98>)
 8008930:	2200      	movs	r2, #0
 8008932:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008934:	4b14      	ldr	r3, [pc, #80]	@ (8008988 <USBD_LL_Init+0x98>)
 8008936:	2200      	movs	r2, #0
 8008938:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800893a:	4b13      	ldr	r3, [pc, #76]	@ (8008988 <USBD_LL_Init+0x98>)
 800893c:	2200      	movs	r2, #0
 800893e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008940:	4b11      	ldr	r3, [pc, #68]	@ (8008988 <USBD_LL_Init+0x98>)
 8008942:	2200      	movs	r2, #0
 8008944:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008946:	4b10      	ldr	r3, [pc, #64]	@ (8008988 <USBD_LL_Init+0x98>)
 8008948:	2200      	movs	r2, #0
 800894a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800894c:	4b0e      	ldr	r3, [pc, #56]	@ (8008988 <USBD_LL_Init+0x98>)
 800894e:	2200      	movs	r2, #0
 8008950:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008952:	480d      	ldr	r0, [pc, #52]	@ (8008988 <USBD_LL_Init+0x98>)
 8008954:	f7f8 fb55 	bl	8001002 <HAL_PCD_Init>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800895e:	f7f7 fddb 	bl	8000518 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008962:	2180      	movs	r1, #128	@ 0x80
 8008964:	4808      	ldr	r0, [pc, #32]	@ (8008988 <USBD_LL_Init+0x98>)
 8008966:	f7f9 fdac 	bl	80024c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800896a:	2240      	movs	r2, #64	@ 0x40
 800896c:	2100      	movs	r1, #0
 800896e:	4806      	ldr	r0, [pc, #24]	@ (8008988 <USBD_LL_Init+0x98>)
 8008970:	f7f9 fd60 	bl	8002434 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008974:	2280      	movs	r2, #128	@ 0x80
 8008976:	2101      	movs	r1, #1
 8008978:	4803      	ldr	r0, [pc, #12]	@ (8008988 <USBD_LL_Init+0x98>)
 800897a:	f7f9 fd5b 	bl	8002434 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	2400160c 	.word	0x2400160c
 800898c:	40080000 	.word	0x40080000

08008990 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7f8 fc37 	bl	800121a <HAL_PCD_Start>
 80089ac:	4603      	mov	r3, r0
 80089ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 f942 	bl	8008c3c <USBD_Get_USB_Status>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	4608      	mov	r0, r1
 80089d0:	4611      	mov	r1, r2
 80089d2:	461a      	mov	r2, r3
 80089d4:	4603      	mov	r3, r0
 80089d6:	70fb      	strb	r3, [r7, #3]
 80089d8:	460b      	mov	r3, r1
 80089da:	70bb      	strb	r3, [r7, #2]
 80089dc:	4613      	mov	r3, r2
 80089de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80089ee:	78bb      	ldrb	r3, [r7, #2]
 80089f0:	883a      	ldrh	r2, [r7, #0]
 80089f2:	78f9      	ldrb	r1, [r7, #3]
 80089f4:	f7f9 f938 	bl	8001c68 <HAL_PCD_EP_Open>
 80089f8:	4603      	mov	r3, r0
 80089fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 f91c 	bl	8008c3c <USBD_Get_USB_Status>
 8008a04:	4603      	mov	r3, r0
 8008a06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a08:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a2c:	78fa      	ldrb	r2, [r7, #3]
 8008a2e:	4611      	mov	r1, r2
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7f9 f983 	bl	8001d3c <HAL_PCD_EP_Close>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 f8fd 	bl	8008c3c <USBD_Get_USB_Status>
 8008a42:	4603      	mov	r3, r0
 8008a44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a6a:	78fa      	ldrb	r2, [r7, #3]
 8008a6c:	4611      	mov	r1, r2
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7f9 fa3b 	bl	8001eea <HAL_PCD_EP_SetStall>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 f8de 	bl	8008c3c <USBD_Get_USB_Status>
 8008a80:	4603      	mov	r3, r0
 8008a82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a84:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b084      	sub	sp, #16
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	460b      	mov	r3, r1
 8008a98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008aa8:	78fa      	ldrb	r2, [r7, #3]
 8008aaa:	4611      	mov	r1, r2
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7f9 fa7f 	bl	8001fb0 <HAL_PCD_EP_ClrStall>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 f8bf 	bl	8008c3c <USBD_Get_USB_Status>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ade:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	da0b      	bge.n	8008b00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008aee:	68f9      	ldr	r1, [r7, #12]
 8008af0:	4613      	mov	r3, r2
 8008af2:	00db      	lsls	r3, r3, #3
 8008af4:	4413      	add	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	440b      	add	r3, r1
 8008afa:	3316      	adds	r3, #22
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	e00b      	b.n	8008b18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b06:	68f9      	ldr	r1, [r7, #12]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	00db      	lsls	r3, r3, #3
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	440b      	add	r3, r1
 8008b12:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008b16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b3e:	78fa      	ldrb	r2, [r7, #3]
 8008b40:	4611      	mov	r1, r2
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7f9 f86c 	bl	8001c20 <HAL_PCD_SetAddress>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 f874 	bl	8008c3c <USBD_Get_USB_Status>
 8008b54:	4603      	mov	r3, r0
 8008b56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b58:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b086      	sub	sp, #24
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	607a      	str	r2, [r7, #4]
 8008b6c:	603b      	str	r3, [r7, #0]
 8008b6e:	460b      	mov	r3, r1
 8008b70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008b80:	7af9      	ldrb	r1, [r7, #11]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	f7f9 f976 	bl	8001e76 <HAL_PCD_EP_Transmit>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 f853 	bl	8008c3c <USBD_Get_USB_Status>
 8008b96:	4603      	mov	r3, r0
 8008b98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3718      	adds	r7, #24
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	607a      	str	r2, [r7, #4]
 8008bae:	603b      	str	r3, [r7, #0]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008bc2:	7af9      	ldrb	r1, [r7, #11]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	f7f9 f902 	bl	8001dd0 <HAL_PCD_EP_Receive>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 f832 	bl	8008c3c <USBD_Get_USB_Status>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bdc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	460b      	mov	r3, r1
 8008bf0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008bf8:	78fa      	ldrb	r2, [r7, #3]
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7f9 f922 	bl	8001e46 <HAL_PCD_EP_GetRxCount>
 8008c02:	4603      	mov	r3, r0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c14:	4b03      	ldr	r3, [pc, #12]	@ (8008c24 <USBD_static_malloc+0x18>)
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	24001af0 	.word	0x24001af0

08008c28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c4a:	79fb      	ldrb	r3, [r7, #7]
 8008c4c:	2b03      	cmp	r3, #3
 8008c4e:	d817      	bhi.n	8008c80 <USBD_Get_USB_Status+0x44>
 8008c50:	a201      	add	r2, pc, #4	@ (adr r2, 8008c58 <USBD_Get_USB_Status+0x1c>)
 8008c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c56:	bf00      	nop
 8008c58:	08008c69 	.word	0x08008c69
 8008c5c:	08008c6f 	.word	0x08008c6f
 8008c60:	08008c75 	.word	0x08008c75
 8008c64:	08008c7b 	.word	0x08008c7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c6c:	e00b      	b.n	8008c86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	73fb      	strb	r3, [r7, #15]
    break;
 8008c72:	e008      	b.n	8008c86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c74:	2301      	movs	r3, #1
 8008c76:	73fb      	strb	r3, [r7, #15]
    break;
 8008c78:	e005      	b.n	8008c86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c7e:	e002      	b.n	8008c86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c80:	2303      	movs	r3, #3
 8008c82:	73fb      	strb	r3, [r7, #15]
    break;
 8008c84:	bf00      	nop
  }
  return usb_status;
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <memset>:
 8008c94:	4402      	add	r2, r0
 8008c96:	4603      	mov	r3, r0
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d100      	bne.n	8008c9e <memset+0xa>
 8008c9c:	4770      	bx	lr
 8008c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8008ca2:	e7f9      	b.n	8008c98 <memset+0x4>

08008ca4 <__libc_init_array>:
 8008ca4:	b570      	push	{r4, r5, r6, lr}
 8008ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8008cdc <__libc_init_array+0x38>)
 8008ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8008ce0 <__libc_init_array+0x3c>)
 8008caa:	1b64      	subs	r4, r4, r5
 8008cac:	10a4      	asrs	r4, r4, #2
 8008cae:	2600      	movs	r6, #0
 8008cb0:	42a6      	cmp	r6, r4
 8008cb2:	d109      	bne.n	8008cc8 <__libc_init_array+0x24>
 8008cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8008ce4 <__libc_init_array+0x40>)
 8008cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8008ce8 <__libc_init_array+0x44>)
 8008cb8:	f000 f818 	bl	8008cec <_init>
 8008cbc:	1b64      	subs	r4, r4, r5
 8008cbe:	10a4      	asrs	r4, r4, #2
 8008cc0:	2600      	movs	r6, #0
 8008cc2:	42a6      	cmp	r6, r4
 8008cc4:	d105      	bne.n	8008cd2 <__libc_init_array+0x2e>
 8008cc6:	bd70      	pop	{r4, r5, r6, pc}
 8008cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ccc:	4798      	blx	r3
 8008cce:	3601      	adds	r6, #1
 8008cd0:	e7ee      	b.n	8008cb0 <__libc_init_array+0xc>
 8008cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd6:	4798      	blx	r3
 8008cd8:	3601      	adds	r6, #1
 8008cda:	e7f2      	b.n	8008cc2 <__libc_init_array+0x1e>
 8008cdc:	08008d5c 	.word	0x08008d5c
 8008ce0:	08008d5c 	.word	0x08008d5c
 8008ce4:	08008d5c 	.word	0x08008d5c
 8008ce8:	08008d60 	.word	0x08008d60

08008cec <_init>:
 8008cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cee:	bf00      	nop
 8008cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cf2:	bc08      	pop	{r3}
 8008cf4:	469e      	mov	lr, r3
 8008cf6:	4770      	bx	lr

08008cf8 <_fini>:
 8008cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfa:	bf00      	nop
 8008cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cfe:	bc08      	pop	{r3}
 8008d00:	469e      	mov	lr, r3
 8008d02:	4770      	bx	lr
