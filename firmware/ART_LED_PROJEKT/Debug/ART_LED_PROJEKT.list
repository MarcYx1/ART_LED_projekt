
ART_LED_PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c6c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08008f04  08008f04  00009f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009060  08009060  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08009064  08009064  0000a064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000160  24000000  08009068  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001d68  24000160  080091c8  0000b160  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24001ec8  080091c8  0000bec8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000b160  2**0
                  CONTENTS, READONLY
  9 .debug_info   000130e5  00000000  00000000  0000b18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000319a  00000000  00000000  0001e273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000e88  00000000  00000000  00021410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000acf  00000000  00000000  00022298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038459  00000000  00000000  00022d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013fe4  00000000  00000000  0005b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00155a09  00000000  00000000  0006f1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001c4bad  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003c14  00000000  00000000  001c4bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006a  00000000  00000000  001c8804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000160 	.word	0x24000160
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008eec 	.word	0x08008eec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000164 	.word	0x24000164
 80002d4:	08008eec 	.word	0x08008eec

080002d8 <Led_SetTimings>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Led_SetTimings(uint32_t on_ms, uint32_t off_ms)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
	if(on_ms < 10) on_ms = 10;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2b09      	cmp	r3, #9
 80002e6:	d801      	bhi.n	80002ec <Led_SetTimings+0x14>
 80002e8:	230a      	movs	r3, #10
 80002ea:	607b      	str	r3, [r7, #4]
	if(off_ms < 10) off_ms = 10;
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	2b09      	cmp	r3, #9
 80002f0:	d801      	bhi.n	80002f6 <Led_SetTimings+0x1e>
 80002f2:	230a      	movs	r3, #10
 80002f4:	603b      	str	r3, [r7, #0]
	if(on_ms > 5000) on_ms = 5000;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d902      	bls.n	8000306 <Led_SetTimings+0x2e>
 8000300:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000304:	607b      	str	r3, [r7, #4]
	if(off_ms > 5000) off_ms = 5000;
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800030c:	4293      	cmp	r3, r2
 800030e:	d902      	bls.n	8000316 <Led_SetTimings+0x3e>
 8000310:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000314:	603b      	str	r3, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000316:	b672      	cpsid	i
}
 8000318:	bf00      	nop

	__disable_irq();
	l_on_ms = on_ms;
 800031a:	4a07      	ldr	r2, [pc, #28]	@ (8000338 <Led_SetTimings+0x60>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	6013      	str	r3, [r2, #0]
	l_off_ms = off_ms;
 8000320:	4a06      	ldr	r2, [pc, #24]	@ (800033c <Led_SetTimings+0x64>)
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000326:	b662      	cpsie	i
}
 8000328:	bf00      	nop
	__enable_irq();

}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	24000000 	.word	0x24000000
 800033c:	24000004 	.word	0x24000004

08000340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0


  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000346:	f000 f8f9 	bl	800053c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034a:	f000 fa6b 	bl	8000824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034e:	f000 f845 	bl	80003dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000352:	f000 f8af 	bl	80004b4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000356:	f007 ff9f 	bl	8008298 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_PORT , LED_PIN , GPIO_PIN_RESET);
 800035a:	4b1b      	ldr	r3, [pc, #108]	@ (80003c8 <main+0x88>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2108      	movs	r1, #8
 8000360:	2200      	movs	r2, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f000 fe58 	bl	8001018 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t most = HAL_GetTick();
 8000368:	f000 fae2 	bl	8000930 <HAL_GetTick>
 800036c:	6078      	str	r0, [r7, #4]
	  if((int32_t)(most-kov_kapcs_ido)>=0)
 800036e:	4b17      	ldr	r3, [pc, #92]	@ (80003cc <main+0x8c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	2b00      	cmp	r3, #0
 8000378:	dbf6      	blt.n	8000368 <main+0x28>
	  {
		  led_on = !led_on;
 800037a:	4b15      	ldr	r3, [pc, #84]	@ (80003d0 <main+0x90>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	bf0c      	ite	eq
 8000382:	2301      	moveq	r3, #1
 8000384:	2300      	movne	r3, #0
 8000386:	b2db      	uxtb	r3, r3
 8000388:	461a      	mov	r2, r3
 800038a:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <main+0x90>)
 800038c:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED_PORT, LED_PIN , led_on? GPIO_PIN_SET : GPIO_PIN_RESET);
 800038e:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <main+0x88>)
 8000390:	6818      	ldr	r0, [r3, #0]
 8000392:	2108      	movs	r1, #8
 8000394:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <main+0x90>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	bf14      	ite	ne
 800039c:	2301      	movne	r3, #1
 800039e:	2300      	moveq	r3, #0
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	461a      	mov	r2, r3
 80003a4:	f000 fe38 	bl	8001018 <HAL_GPIO_WritePin>

		  uint32_t per = led_on? l_on_ms : l_off_ms;
 80003a8:	4b09      	ldr	r3, [pc, #36]	@ (80003d0 <main+0x90>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d002      	beq.n	80003b6 <main+0x76>
 80003b0:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <main+0x94>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	e001      	b.n	80003ba <main+0x7a>
 80003b6:	4b08      	ldr	r3, [pc, #32]	@ (80003d8 <main+0x98>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	603b      	str	r3, [r7, #0]
		  kov_kapcs_ido = most + per;
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	4413      	add	r3, r2
 80003c2:	4a02      	ldr	r2, [pc, #8]	@ (80003cc <main+0x8c>)
 80003c4:	6013      	str	r3, [r2, #0]
  {
 80003c6:	e7cf      	b.n	8000368 <main+0x28>
 80003c8:	24000008 	.word	0x24000008
 80003cc:	2400017c 	.word	0x2400017c
 80003d0:	24000180 	.word	0x24000180
 80003d4:	24000000 	.word	0x24000000
 80003d8:	24000004 	.word	0x24000004

080003dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b09c      	sub	sp, #112	@ 0x70
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003e6:	224c      	movs	r2, #76	@ 0x4c
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f008 fd44 	bl	8008e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2220      	movs	r2, #32
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f008 fd3e 	bl	8008e78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003fc:	2002      	movs	r0, #2
 80003fe:	f002 f8c5 	bl	800258c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000402:	2300      	movs	r3, #0
 8000404:	603b      	str	r3, [r7, #0]
 8000406:	4b29      	ldr	r3, [pc, #164]	@ (80004ac <SystemClock_Config+0xd0>)
 8000408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800040a:	4a28      	ldr	r2, [pc, #160]	@ (80004ac <SystemClock_Config+0xd0>)
 800040c:	f023 0301 	bic.w	r3, r3, #1
 8000410:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000412:	4b26      	ldr	r3, [pc, #152]	@ (80004ac <SystemClock_Config+0xd0>)
 8000414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	603b      	str	r3, [r7, #0]
 800041c:	4b24      	ldr	r3, [pc, #144]	@ (80004b0 <SystemClock_Config+0xd4>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000424:	4a22      	ldr	r2, [pc, #136]	@ (80004b0 <SystemClock_Config+0xd4>)
 8000426:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b20      	ldr	r3, [pc, #128]	@ (80004b0 <SystemClock_Config+0xd4>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000434:	603b      	str	r3, [r7, #0]
 8000436:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000438:	bf00      	nop
 800043a:	4b1d      	ldr	r3, [pc, #116]	@ (80004b0 <SystemClock_Config+0xd4>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000446:	d1f8      	bne.n	800043a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000448:	2322      	movs	r3, #34	@ 0x22
 800044a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800044c:	2301      	movs	r3, #1
 800044e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000450:	2340      	movs	r3, #64	@ 0x40
 8000452:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000454:	2301      	movs	r3, #1
 8000456:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000458:	2300      	movs	r3, #0
 800045a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000460:	4618      	mov	r0, r3
 8000462:	f002 f8dd 	bl	8002620 <HAL_RCC_OscConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800046c:	f000 f892 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000470:	233f      	movs	r3, #63	@ 0x3f
 8000472:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000474:	2300      	movs	r3, #0
 8000476:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2101      	movs	r1, #1
 8000494:	4618      	mov	r0, r3
 8000496:	f002 fd1d 	bl	8002ed4 <HAL_RCC_ClockConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80004a0:	f000 f878 	bl	8000594 <Error_Handler>
  }
}
 80004a4:	bf00      	nop
 80004a6:	3770      	adds	r7, #112	@ 0x70
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	58000400 	.word	0x58000400
 80004b0:	58024800 	.word	0x58024800

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b088      	sub	sp, #32
 80004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	f107 030c 	add.w	r3, r7, #12
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000534 <MX_GPIO_Init+0x80>)
 80004cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004d0:	4a18      	ldr	r2, [pc, #96]	@ (8000534 <MX_GPIO_Init+0x80>)
 80004d2:	f043 0310 	orr.w	r3, r3, #16
 80004d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004da:	4b16      	ldr	r3, [pc, #88]	@ (8000534 <MX_GPIO_Init+0x80>)
 80004dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004e0:	f003 0310 	and.w	r3, r3, #16
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b12      	ldr	r3, [pc, #72]	@ (8000534 <MX_GPIO_Init+0x80>)
 80004ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004ee:	4a11      	ldr	r2, [pc, #68]	@ (8000534 <MX_GPIO_Init+0x80>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000534 <MX_GPIO_Init+0x80>)
 80004fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2108      	movs	r1, #8
 800050a:	480b      	ldr	r0, [pc, #44]	@ (8000538 <MX_GPIO_Init+0x84>)
 800050c:	f000 fd84 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000510:	2308      	movs	r3, #8
 8000512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000514:	2301      	movs	r3, #1
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4619      	mov	r1, r3
 8000526:	4804      	ldr	r0, [pc, #16]	@ (8000538 <MX_GPIO_Init+0x84>)
 8000528:	f000 fbc6 	bl	8000cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	58024400 	.word	0x58024400
 8000538:	58021000 	.word	0x58021000

0800053c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800054e:	f000 fb3b 	bl	8000bc8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000552:	2301      	movs	r3, #1
 8000554:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000556:	2300      	movs	r3, #0
 8000558:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800055e:	231f      	movs	r3, #31
 8000560:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000562:	2387      	movs	r3, #135	@ 0x87
 8000564:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000566:	2300      	movs	r3, #0
 8000568:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800056a:	2300      	movs	r3, #0
 800056c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800056e:	2301      	movs	r3, #1
 8000570:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000572:	2301      	movs	r3, #1
 8000574:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000576:	2300      	movs	r3, #0
 8000578:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800057e:	463b      	mov	r3, r7
 8000580:	4618      	mov	r0, r3
 8000582:	f000 fb59 	bl	8000c38 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000586:	2004      	movs	r0, #4
 8000588:	f000 fb36 	bl	8000bf8 <HAL_MPU_Enable>

}
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <Error_Handler+0x8>

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <HAL_MspInit+0x30>)
 80005a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80005ac:	4a08      	ldr	r2, [pc, #32]	@ (80005d0 <HAL_MspInit+0x30>)
 80005ae:	f043 0302 	orr.w	r3, r3, #2
 80005b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <HAL_MspInit+0x30>)
 80005b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80005bc:	f003 0302 	and.w	r3, r3, #2
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	58024400 	.word	0x58024400

080005d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <NMI_Handler+0x4>

080005dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <HardFault_Handler+0x4>

080005e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <MemManage_Handler+0x4>

080005ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <BusFault_Handler+0x4>

080005f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <UsageFault_Handler+0x4>

080005fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062a:	f000 f96d 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000638:	4802      	ldr	r0, [pc, #8]	@ (8000644 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 800063a:	f000 fe47 	bl	80012cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2400168c 	.word	0x2400168c

08000648 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800064c:	4802      	ldr	r0, [pc, #8]	@ (8000658 <OTG_FS_IRQHandler+0x10>)
 800064e:	f000 fe3d 	bl	80012cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2400168c 	.word	0x2400168c

0800065c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000660:	4b43      	ldr	r3, [pc, #268]	@ (8000770 <SystemInit+0x114>)
 8000662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000666:	4a42      	ldr	r2, [pc, #264]	@ (8000770 <SystemInit+0x114>)
 8000668:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800066c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000670:	4b40      	ldr	r3, [pc, #256]	@ (8000774 <SystemInit+0x118>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f003 030f 	and.w	r3, r3, #15
 8000678:	2b06      	cmp	r3, #6
 800067a:	d807      	bhi.n	800068c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800067c:	4b3d      	ldr	r3, [pc, #244]	@ (8000774 <SystemInit+0x118>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f023 030f 	bic.w	r3, r3, #15
 8000684:	4a3b      	ldr	r2, [pc, #236]	@ (8000774 <SystemInit+0x118>)
 8000686:	f043 0307 	orr.w	r3, r3, #7
 800068a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800068c:	4b3a      	ldr	r3, [pc, #232]	@ (8000778 <SystemInit+0x11c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a39      	ldr	r2, [pc, #228]	@ (8000778 <SystemInit+0x11c>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000698:	4b37      	ldr	r3, [pc, #220]	@ (8000778 <SystemInit+0x11c>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800069e:	4b36      	ldr	r3, [pc, #216]	@ (8000778 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4935      	ldr	r1, [pc, #212]	@ (8000778 <SystemInit+0x11c>)
 80006a4:	4b35      	ldr	r3, [pc, #212]	@ (800077c <SystemInit+0x120>)
 80006a6:	4013      	ands	r3, r2
 80006a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006aa:	4b32      	ldr	r3, [pc, #200]	@ (8000774 <SystemInit+0x118>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f003 0308 	and.w	r3, r3, #8
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d007      	beq.n	80006c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000774 <SystemInit+0x118>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f023 030f 	bic.w	r3, r3, #15
 80006be:	4a2d      	ldr	r2, [pc, #180]	@ (8000774 <SystemInit+0x118>)
 80006c0:	f043 0307 	orr.w	r3, r3, #7
 80006c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x11c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000778 <SystemInit+0x11c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006d2:	4b29      	ldr	r3, [pc, #164]	@ (8000778 <SystemInit+0x11c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006d8:	4b27      	ldr	r3, [pc, #156]	@ (8000778 <SystemInit+0x11c>)
 80006da:	4a29      	ldr	r2, [pc, #164]	@ (8000780 <SystemInit+0x124>)
 80006dc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006de:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <SystemInit+0x11c>)
 80006e0:	4a28      	ldr	r2, [pc, #160]	@ (8000784 <SystemInit+0x128>)
 80006e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006e4:	4b24      	ldr	r3, [pc, #144]	@ (8000778 <SystemInit+0x11c>)
 80006e6:	4a28      	ldr	r2, [pc, #160]	@ (8000788 <SystemInit+0x12c>)
 80006e8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006ea:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <SystemInit+0x11c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006f0:	4b21      	ldr	r3, [pc, #132]	@ (8000778 <SystemInit+0x11c>)
 80006f2:	4a25      	ldr	r2, [pc, #148]	@ (8000788 <SystemInit+0x12c>)
 80006f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006f6:	4b20      	ldr	r3, [pc, #128]	@ (8000778 <SystemInit+0x11c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000778 <SystemInit+0x11c>)
 80006fe:	4a22      	ldr	r2, [pc, #136]	@ (8000788 <SystemInit+0x12c>)
 8000700:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000702:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <SystemInit+0x11c>)
 8000704:	2200      	movs	r2, #0
 8000706:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000708:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <SystemInit+0x11c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a1a      	ldr	r2, [pc, #104]	@ (8000778 <SystemInit+0x11c>)
 800070e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000712:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000714:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <SystemInit+0x11c>)
 8000716:	2200      	movs	r2, #0
 8000718:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <SystemInit+0x130>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b1c      	ldr	r3, [pc, #112]	@ (8000790 <SystemInit+0x134>)
 8000720:	4013      	ands	r3, r2
 8000722:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000726:	d202      	bcs.n	800072e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000728:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <SystemInit+0x138>)
 800072a:	2201      	movs	r2, #1
 800072c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800072e:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <SystemInit+0x11c>)
 8000730:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000734:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000738:	2b00      	cmp	r3, #0
 800073a:	d113      	bne.n	8000764 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <SystemInit+0x11c>)
 800073e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000742:	4a0d      	ldr	r2, [pc, #52]	@ (8000778 <SystemInit+0x11c>)
 8000744:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000748:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <SystemInit+0x13c>)
 800074e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000752:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000754:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <SystemInit+0x11c>)
 8000756:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800075a:	4a07      	ldr	r2, [pc, #28]	@ (8000778 <SystemInit+0x11c>)
 800075c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000760:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
 8000774:	52002000 	.word	0x52002000
 8000778:	58024400 	.word	0x58024400
 800077c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000780:	02020200 	.word	0x02020200
 8000784:	01ff0000 	.word	0x01ff0000
 8000788:	01010280 	.word	0x01010280
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <ExitRun0Mode+0x2c>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	4a08      	ldr	r2, [pc, #32]	@ (80007c8 <ExitRun0Mode+0x2c>)
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80007ac:	bf00      	nop
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <ExitRun0Mode+0x2c>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0f9      	beq.n	80007ae <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	58024800 	.word	0x58024800

080007cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007cc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000808 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80007d0:	f7ff ffe4 	bl	800079c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d4:	f7ff ff42 	bl	800065c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d8:	480c      	ldr	r0, [pc, #48]	@ (800080c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007da:	490d      	ldr	r1, [pc, #52]	@ (8000810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e0:	e002      	b.n	80007e8 <LoopCopyDataInit>

080007e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e6:	3304      	adds	r3, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ec:	d3f9      	bcc.n	80007e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007f0:	4c0a      	ldr	r4, [pc, #40]	@ (800081c <LoopFillZerobss+0x22>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f4:	e001      	b.n	80007fa <LoopFillZerobss>

080007f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f8:	3204      	adds	r2, #4

080007fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007fc:	d3fb      	bcc.n	80007f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007fe:	f008 fb51 	bl	8008ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000802:	f7ff fd9d 	bl	8000340 <main>
  bx  lr
 8000806:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000808:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800080c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000810:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 8000814:	08009068 	.word	0x08009068
  ldr r2, =_sbss
 8000818:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 800081c:	24001ec8 	.word	0x24001ec8

08000820 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC3_IRQHandler>
	...

08000824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082a:	2003      	movs	r0, #3
 800082c:	f000 f98c 	bl	8000b48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000830:	f002 fd06 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 8000834:	4602      	mov	r2, r0
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <HAL_Init+0x68>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	0a1b      	lsrs	r3, r3, #8
 800083c:	f003 030f 	and.w	r3, r3, #15
 8000840:	4913      	ldr	r1, [pc, #76]	@ (8000890 <HAL_Init+0x6c>)
 8000842:	5ccb      	ldrb	r3, [r1, r3]
 8000844:	f003 031f 	and.w	r3, r3, #31
 8000848:	fa22 f303 	lsr.w	r3, r2, r3
 800084c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800084e:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <HAL_Init+0x68>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 030f 	and.w	r3, r3, #15
 8000856:	4a0e      	ldr	r2, [pc, #56]	@ (8000890 <HAL_Init+0x6c>)
 8000858:	5cd3      	ldrb	r3, [r2, r3]
 800085a:	f003 031f 	and.w	r3, r3, #31
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	fa22 f303 	lsr.w	r3, r2, r3
 8000864:	4a0b      	ldr	r2, [pc, #44]	@ (8000894 <HAL_Init+0x70>)
 8000866:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000868:	4a0b      	ldr	r2, [pc, #44]	@ (8000898 <HAL_Init+0x74>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800086e:	200f      	movs	r0, #15
 8000870:	f000 f814 	bl	800089c <HAL_InitTick>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e002      	b.n	8000884 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800087e:	f7ff fe8f 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	58024400 	.word	0x58024400
 8000890:	08008f4c 	.word	0x08008f4c
 8000894:	24000010 	.word	0x24000010
 8000898:	2400000c 	.word	0x2400000c

0800089c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80008a4:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <HAL_InitTick+0x60>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d101      	bne.n	80008b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008ac:	2301      	movs	r3, #1
 80008ae:	e021      	b.n	80008f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008b0:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <HAL_InitTick+0x64>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <HAL_InitTick+0x60>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008be:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f971 	bl	8000bae <HAL_SYSTICK_Config>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00e      	b.n	80008f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d80a      	bhi.n	80008f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f000 f93b 	bl	8000b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e8:	4a06      	ldr	r2, [pc, #24]	@ (8000904 <HAL_InitTick+0x68>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e000      	b.n	80008f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	24000018 	.word	0x24000018
 8000900:	2400000c 	.word	0x2400000c
 8000904:	24000014 	.word	0x24000014

08000908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_IncTick+0x20>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <HAL_IncTick+0x24>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a04      	ldr	r2, [pc, #16]	@ (800092c <HAL_IncTick+0x24>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	24000018 	.word	0x24000018
 800092c:	24000184 	.word	0x24000184

08000930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;
 8000934:	4b03      	ldr	r3, [pc, #12]	@ (8000944 <HAL_GetTick+0x14>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	24000184 	.word	0x24000184

08000948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000950:	f7ff ffee 	bl	8000930 <HAL_GetTick>
 8000954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000960:	d005      	beq.n	800096e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000962:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <HAL_Delay+0x44>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4413      	add	r3, r2
 800096c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800096e:	bf00      	nop
 8000970:	f7ff ffde 	bl	8000930 <HAL_GetTick>
 8000974:	4602      	mov	r2, r0
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	429a      	cmp	r2, r3
 800097e:	d8f7      	bhi.n	8000970 <HAL_Delay+0x28>
  {
  }
}
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	24000018 	.word	0x24000018

08000990 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000994:	4b03      	ldr	r3, [pc, #12]	@ (80009a4 <HAL_GetREVID+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	0c1b      	lsrs	r3, r3, #16
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	5c001000 	.word	0x5c001000

080009a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b8:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <__NVIC_SetPriorityGrouping+0x40>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009c4:	4013      	ands	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009d2:	4313      	orrs	r3, r2
 80009d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d6:	4a04      	ldr	r2, [pc, #16]	@ (80009e8 <__NVIC_SetPriorityGrouping+0x40>)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	60d3      	str	r3, [r2, #12]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00
 80009ec:	05fa0000 	.word	0x05fa0000

080009f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f4:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <__NVIC_GetPriorityGrouping+0x18>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	f003 0307 	and.w	r3, r3, #7
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	db0b      	blt.n	8000a36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	f003 021f 	and.w	r2, r3, #31
 8000a24:	4907      	ldr	r1, [pc, #28]	@ (8000a44 <__NVIC_EnableIRQ+0x38>)
 8000a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a2a:	095b      	lsrs	r3, r3, #5
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	@ (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	@ (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	@ 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f1c3 0307 	rsb	r3, r3, #7
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2304      	movcs	r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d902      	bls.n	8000acc <NVIC_EncodePriority+0x30>
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	e000      	b.n	8000ace <NVIC_EncodePriority+0x32>
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43da      	mvns	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
         );
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	@ 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b14:	d301      	bcc.n	8000b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00f      	b.n	8000b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <SysTick_Config+0x40>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b22:	210f      	movs	r1, #15
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f7ff ff8e 	bl	8000a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <SysTick_Config+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <SysTick_Config+0x40>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff29 	bl	80009a8 <__NVIC_SetPriorityGrouping>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b6c:	f7ff ff40 	bl	80009f0 <__NVIC_GetPriorityGrouping>
 8000b70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	6978      	ldr	r0, [r7, #20]
 8000b78:	f7ff ff90 	bl	8000a9c <NVIC_EncodePriority>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff5f 	bl	8000a48 <__NVIC_SetPriority>
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff33 	bl	8000a0c <__NVIC_EnableIRQ>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffa4 	bl	8000b04 <SysTick_Config>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000bcc:	f3bf 8f5f 	dmb	sy
}
 8000bd0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <HAL_MPU_Disable+0x28>)
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bd6:	4a06      	ldr	r2, [pc, #24]	@ (8000bf0 <HAL_MPU_Disable+0x28>)
 8000bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bdc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000bde:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <HAL_MPU_Disable+0x2c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	605a      	str	r2, [r3, #4]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00
 8000bf4:	e000ed90 	.word	0xe000ed90

08000bf8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000c00:	4a0b      	ldr	r2, [pc, #44]	@ (8000c30 <HAL_MPU_Enable+0x38>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <HAL_MPU_Enable+0x3c>)
 8000c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0e:	4a09      	ldr	r2, [pc, #36]	@ (8000c34 <HAL_MPU_Enable+0x3c>)
 8000c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c14:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000c16:	f3bf 8f4f 	dsb	sy
}
 8000c1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c1c:	f3bf 8f6f 	isb	sy
}
 8000c20:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed90 	.word	0xe000ed90
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	785a      	ldrb	r2, [r3, #1]
 8000c44:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <HAL_MPU_ConfigRegion+0x7c>)
 8000c46:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000c48:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <HAL_MPU_ConfigRegion+0x7c>)
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	@ (8000cb4 <HAL_MPU_ConfigRegion+0x7c>)
 8000c4e:	f023 0301 	bic.w	r3, r3, #1
 8000c52:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000c54:	4a17      	ldr	r2, [pc, #92]	@ (8000cb4 <HAL_MPU_ConfigRegion+0x7c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	7b1b      	ldrb	r3, [r3, #12]
 8000c60:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7adb      	ldrb	r3, [r3, #11]
 8000c66:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7a9b      	ldrb	r3, [r3, #10]
 8000c6e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	7b5b      	ldrb	r3, [r3, #13]
 8000c76:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	7b9b      	ldrb	r3, [r3, #14]
 8000c7e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7bdb      	ldrb	r3, [r3, #15]
 8000c86:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7a5b      	ldrb	r3, [r3, #9]
 8000c8e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	7a1b      	ldrb	r3, [r3, #8]
 8000c96:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c98:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	7812      	ldrb	r2, [r2, #0]
 8000c9e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ca0:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ca2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ca4:	6113      	str	r3, [r2, #16]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed90 	.word	0xe000ed90

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	@ 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000cc6:	4b89      	ldr	r3, [pc, #548]	@ (8000eec <HAL_GPIO_Init+0x234>)
 8000cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cca:	e194      	b.n	8000ff6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 8186 	beq.w	8000ff0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d005      	beq.n	8000cfc <HAL_GPIO_Init+0x44>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d130      	bne.n	8000d5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d32:	2201      	movs	r2, #1
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	091b      	lsrs	r3, r3, #4
 8000d48:	f003 0201 	and.w	r2, r3, #1
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d017      	beq.n	8000d9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d123      	bne.n	8000dee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	691a      	ldr	r2, [r3, #16]
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	08da      	lsrs	r2, r3, #3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3208      	adds	r2, #8
 8000de8:	69b9      	ldr	r1, [r7, #24]
 8000dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0203 	and.w	r2, r3, #3
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 80e0 	beq.w	8000ff0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e30:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef0 <HAL_GPIO_Init+0x238>)
 8000e32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e36:	4a2e      	ldr	r2, [pc, #184]	@ (8000ef0 <HAL_GPIO_Init+0x238>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e40:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef0 <HAL_GPIO_Init+0x238>)
 8000e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4e:	4a29      	ldr	r2, [pc, #164]	@ (8000ef4 <HAL_GPIO_Init+0x23c>)
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a20      	ldr	r2, [pc, #128]	@ (8000ef8 <HAL_GPIO_Init+0x240>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d052      	beq.n	8000f20 <HAL_GPIO_Init+0x268>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8000efc <HAL_GPIO_Init+0x244>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d031      	beq.n	8000ee6 <HAL_GPIO_Init+0x22e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a1e      	ldr	r2, [pc, #120]	@ (8000f00 <HAL_GPIO_Init+0x248>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d02b      	beq.n	8000ee2 <HAL_GPIO_Init+0x22a>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f04 <HAL_GPIO_Init+0x24c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d025      	beq.n	8000ede <HAL_GPIO_Init+0x226>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a1c      	ldr	r2, [pc, #112]	@ (8000f08 <HAL_GPIO_Init+0x250>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d01f      	beq.n	8000eda <HAL_GPIO_Init+0x222>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <HAL_GPIO_Init+0x254>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d019      	beq.n	8000ed6 <HAL_GPIO_Init+0x21e>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f10 <HAL_GPIO_Init+0x258>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d013      	beq.n	8000ed2 <HAL_GPIO_Init+0x21a>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a19      	ldr	r2, [pc, #100]	@ (8000f14 <HAL_GPIO_Init+0x25c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d00d      	beq.n	8000ece <HAL_GPIO_Init+0x216>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a18      	ldr	r2, [pc, #96]	@ (8000f18 <HAL_GPIO_Init+0x260>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d007      	beq.n	8000eca <HAL_GPIO_Init+0x212>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a17      	ldr	r2, [pc, #92]	@ (8000f1c <HAL_GPIO_Init+0x264>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d101      	bne.n	8000ec6 <HAL_GPIO_Init+0x20e>
 8000ec2:	2309      	movs	r3, #9
 8000ec4:	e02d      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	e02b      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000eca:	2308      	movs	r3, #8
 8000ecc:	e029      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000ece:	2307      	movs	r3, #7
 8000ed0:	e027      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	e025      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	e023      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000eda:	2304      	movs	r3, #4
 8000edc:	e021      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e01f      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e01d      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e01b      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000eea:	bf00      	nop
 8000eec:	58000080 	.word	0x58000080
 8000ef0:	58024400 	.word	0x58024400
 8000ef4:	58000400 	.word	0x58000400
 8000ef8:	58020000 	.word	0x58020000
 8000efc:	58020400 	.word	0x58020400
 8000f00:	58020800 	.word	0x58020800
 8000f04:	58020c00 	.word	0x58020c00
 8000f08:	58021000 	.word	0x58021000
 8000f0c:	58021400 	.word	0x58021400
 8000f10:	58021800 	.word	0x58021800
 8000f14:	58021c00 	.word	0x58021c00
 8000f18:	58022000 	.word	0x58022000
 8000f1c:	58022400 	.word	0x58022400
 8000f20:	2300      	movs	r3, #0
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	f002 0203 	and.w	r2, r2, #3
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	4093      	lsls	r3, r2
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f32:	4938      	ldr	r1, [pc, #224]	@ (8001014 <HAL_GPIO_Init+0x35c>)
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	f47f ae63 	bne.w	8000ccc <HAL_GPIO_Init+0x14>
  }
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	3724      	adds	r7, #36	@ 0x24
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	58000400 	.word	0x58000400

08001018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	4613      	mov	r3, r2
 8001026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001028:	787b      	ldrb	r3, [r7, #1]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001034:	e003      	b.n	800103e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	041a      	lsls	r2, r3, #16
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	619a      	str	r2, [r3, #24]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af02      	add	r7, sp, #8
 8001050:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e0fe      	b.n	800125a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d106      	bne.n	8001076 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f007 fb49 	bl	8008708 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2203      	movs	r2, #3
 800107a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f003 ff19 	bl	8004eba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7c1a      	ldrb	r2, [r3, #16]
 8001090:	f88d 2000 	strb.w	r2, [sp]
 8001094:	3304      	adds	r3, #4
 8001096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001098:	f003 fdea 	bl	8004c70 <USB_CoreInit>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2202      	movs	r2, #2
 80010a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e0d5      	b.n	800125a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f003 ff11 	bl	8004edc <USB_SetCurrentMode>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2202      	movs	r2, #2
 80010c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0c6      	b.n	800125a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	e04a      	b.n	8001168 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	440b      	add	r3, r1
 80010e0:	3315      	adds	r3, #21
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	3314      	adds	r3, #20
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	b298      	uxth	r0, r3
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	332e      	adds	r3, #46	@ 0x2e
 800110e:	4602      	mov	r2, r0
 8001110:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	3318      	adds	r3, #24
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	331c      	adds	r3, #28
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	4613      	mov	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4413      	add	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	440b      	add	r3, r1
 8001148:	3320      	adds	r3, #32
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4413      	add	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	440b      	add	r3, r1
 800115c:	3324      	adds	r3, #36	@ 0x24
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	3301      	adds	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	791b      	ldrb	r3, [r3, #4]
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	429a      	cmp	r2, r3
 8001170:	d3af      	bcc.n	80010d2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e044      	b.n	8001202 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4413      	add	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	3301      	adds	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	791b      	ldrb	r3, [r3, #4]
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	429a      	cmp	r2, r3
 800120a:	d3b5      	bcc.n	8001178 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7c1a      	ldrb	r2, [r3, #16]
 8001214:	f88d 2000 	strb.w	r2, [sp]
 8001218:	3304      	adds	r3, #4
 800121a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800121c:	f003 feaa 	bl	8004f74 <USB_DevInit>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2202      	movs	r2, #2
 800122a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e013      	b.n	800125a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7b1b      	ldrb	r3, [r3, #12]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d102      	bne.n	800124e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f001 f96f 	bl	800252c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f004 feed 	bl	8006032 <USB_DevDisconnect>

  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001276:	2b01      	cmp	r3, #1
 8001278:	d101      	bne.n	800127e <HAL_PCD_Start+0x1c>
 800127a:	2302      	movs	r3, #2
 800127c:	e022      	b.n	80012c4 <HAL_PCD_Start+0x62>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800128e:	2b00      	cmp	r3, #0
 8001290:	d009      	beq.n	80012a6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001296:	2b01      	cmp	r3, #1
 8001298:	d105      	bne.n	80012a6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800129e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f003 fdf4 	bl	8004e98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 fe9b 	bl	8005ff0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b08d      	sub	sp, #52	@ 0x34
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 ff59 	bl	800619a <USB_GetMode>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f040 84b9 	bne.w	8001c62 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f004 febd 	bl	8006074 <USB_ReadInterrupts>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 84af 	beq.w	8001c60 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f004 feaa 	bl	8006074 <USB_ReadInterrupts>
 8001320:	4603      	mov	r3, r0
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b02      	cmp	r3, #2
 8001328:	d107      	bne.n	800133a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	695a      	ldr	r2, [r3, #20]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f002 0202 	and.w	r2, r2, #2
 8001338:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f004 fe98 	bl	8006074 <USB_ReadInterrupts>
 8001344:	4603      	mov	r3, r0
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	2b10      	cmp	r3, #16
 800134c:	d161      	bne.n	8001412 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	699a      	ldr	r2, [r3, #24]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0210 	bic.w	r2, r2, #16
 800135c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	f003 020f 	and.w	r2, r3, #15
 800136a:	4613      	mov	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	3304      	adds	r3, #4
 800137c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001384:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001388:	d124      	bne.n	80013d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d035      	beq.n	8001402 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	091b      	lsrs	r3, r3, #4
 800139e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	6a38      	ldr	r0, [r7, #32]
 80013aa:	f004 fccf 	bl	8005d4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	091b      	lsrs	r3, r3, #4
 80013b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ba:	441a      	add	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	695a      	ldr	r2, [r3, #20]
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013cc:	441a      	add	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	e016      	b.n	8001402 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80013da:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80013de:	d110      	bne.n	8001402 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80013e6:	2208      	movs	r2, #8
 80013e8:	4619      	mov	r1, r3
 80013ea:	6a38      	ldr	r0, [r7, #32]
 80013ec:	f004 fcae 	bl	8005d4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	695a      	ldr	r2, [r3, #20]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013fc:	441a      	add	r2, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	699a      	ldr	r2, [r3, #24]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 0210 	orr.w	r2, r2, #16
 8001410:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f004 fe2c 	bl	8006074 <USB_ReadInterrupts>
 800141c:	4603      	mov	r3, r0
 800141e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001422:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001426:	f040 80a7 	bne.w	8001578 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f004 fe31 	bl	800609a <USB_ReadDevAllOutEpInterrupt>
 8001438:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800143a:	e099      	b.n	8001570 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800143c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 808e 	beq.w	8001564 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f004 fe55 	bl	8006102 <USB_ReadDevOutEPInterrupt>
 8001458:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00c      	beq.n	800147e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001466:	015a      	lsls	r2, r3, #5
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	4413      	add	r3, r2
 800146c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001470:	461a      	mov	r2, r3
 8001472:	2301      	movs	r3, #1
 8001474:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001476:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 fed1 	bl	8002220 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00c      	beq.n	80014a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	015a      	lsls	r2, r3, #5
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	4413      	add	r3, r2
 8001490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001494:	461a      	mov	r2, r3
 8001496:	2308      	movs	r3, #8
 8001498:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800149a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 ffa7 	bl	80023f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	f003 0310 	and.w	r3, r3, #16
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d008      	beq.n	80014be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ae:	015a      	lsls	r2, r3, #5
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	4413      	add	r3, r2
 80014b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014b8:	461a      	mov	r2, r3
 80014ba:	2310      	movs	r3, #16
 80014bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d030      	beq.n	800152a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014d0:	2b80      	cmp	r3, #128	@ 0x80
 80014d2:	d109      	bne.n	80014e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	69fa      	ldr	r2, [r7, #28]
 80014de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80014e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014ea:	4613      	mov	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	3304      	adds	r3, #4
 80014fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	78db      	ldrb	r3, [r3, #3]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d108      	bne.n	8001518 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2200      	movs	r2, #0
 800150a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	b2db      	uxtb	r3, r3
 8001510:	4619      	mov	r1, r3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f007 fa26 	bl	8008964 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151a:	015a      	lsls	r2, r3, #5
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	4413      	add	r3, r2
 8001520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001524:	461a      	mov	r2, r3
 8001526:	2302      	movs	r3, #2
 8001528:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	f003 0320 	and.w	r3, r3, #32
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	015a      	lsls	r2, r3, #5
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	4413      	add	r3, r2
 800153c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001540:	461a      	mov	r2, r3
 8001542:	2320      	movs	r3, #32
 8001544:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d009      	beq.n	8001564 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	015a      	lsls	r2, r3, #5
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	4413      	add	r3, r2
 8001558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800155c:	461a      	mov	r2, r3
 800155e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001562:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	3301      	adds	r3, #1
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800156a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800156c:	085b      	lsrs	r3, r3, #1
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001572:	2b00      	cmp	r3, #0
 8001574:	f47f af62 	bne.w	800143c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fd79 	bl	8006074 <USB_ReadInterrupts>
 8001582:	4603      	mov	r3, r0
 8001584:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001588:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800158c:	f040 80db 	bne.w	8001746 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f004 fd9a 	bl	80060ce <USB_ReadDevAllInEpInterrupt>
 800159a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80015a0:	e0cd      	b.n	800173e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 80c2 	beq.w	8001732 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f004 fdc0 	bl	800613e <USB_ReadDevInEPInterrupt>
 80015be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d057      	beq.n	800167a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	2201      	movs	r2, #1
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69f9      	ldr	r1, [r7, #28]
 80015e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80015ea:	4013      	ands	r3, r2
 80015ec:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	015a      	lsls	r2, r3, #5
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	4413      	add	r3, r2
 80015f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015fa:	461a      	mov	r2, r3
 80015fc:	2301      	movs	r3, #1
 80015fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	799b      	ldrb	r3, [r3, #6]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d132      	bne.n	800166e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800160c:	4613      	mov	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	3320      	adds	r3, #32
 8001618:	6819      	ldr	r1, [r3, #0]
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4403      	add	r3, r0
 8001628:	331c      	adds	r3, #28
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4419      	add	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001632:	4613      	mov	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4413      	add	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4403      	add	r3, r0
 800163c:	3320      	adds	r3, #32
 800163e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001642:	2b00      	cmp	r3, #0
 8001644:	d113      	bne.n	800166e <HAL_PCD_IRQHandler+0x3a2>
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	3324      	adds	r3, #36	@ 0x24
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d108      	bne.n	800166e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001666:	461a      	mov	r2, r3
 8001668:	2101      	movs	r1, #1
 800166a:	f004 fdc9 	bl	8006200 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	b2db      	uxtb	r3, r3
 8001672:	4619      	mov	r1, r3
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f007 f8f0 	bl	800885a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001686:	015a      	lsls	r2, r3, #5
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	4413      	add	r3, r2
 800168c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001690:	461a      	mov	r2, r3
 8001692:	2308      	movs	r3, #8
 8001694:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	2b00      	cmp	r3, #0
 800169e:	d008      	beq.n	80016b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a2:	015a      	lsls	r2, r3, #5
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	4413      	add	r3, r2
 80016a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016ac:	461a      	mov	r2, r3
 80016ae:	2310      	movs	r3, #16
 80016b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016be:	015a      	lsls	r2, r3, #5
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	4413      	add	r3, r2
 80016c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016c8:	461a      	mov	r2, r3
 80016ca:	2340      	movs	r3, #64	@ 0x40
 80016cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d023      	beq.n	8001720 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016da:	6a38      	ldr	r0, [r7, #32]
 80016dc:	f003 fda8 	bl	8005230 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	3310      	adds	r3, #16
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	3304      	adds	r3, #4
 80016f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	78db      	ldrb	r3, [r3, #3]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d108      	bne.n	800170e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2200      	movs	r2, #0
 8001700:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	b2db      	uxtb	r3, r3
 8001706:	4619      	mov	r1, r3
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f007 f93d 	bl	8008988 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800170e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001710:	015a      	lsls	r2, r3, #5
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	4413      	add	r3, r2
 8001716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800171a:	461a      	mov	r2, r3
 800171c:	2302      	movs	r3, #2
 800171e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800172a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 fcea 	bl	8002106 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	3301      	adds	r3, #1
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800173e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001740:	2b00      	cmp	r3, #0
 8001742:	f47f af2e 	bne.w	80015a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f004 fc92 	bl	8006074 <USB_ReadInterrupts>
 8001750:	4603      	mov	r3, r0
 8001752:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001756:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800175a:	d122      	bne.n	80017a2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001776:	2b01      	cmp	r3, #1
 8001778:	d108      	bne.n	800178c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001782:	2100      	movs	r1, #0
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 fef5 	bl	8002574 <HAL_PCDEx_LPM_Callback>
 800178a:	e002      	b.n	8001792 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f007 f8db 	bl	8008948 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695a      	ldr	r2, [r3, #20]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80017a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f004 fc64 	bl	8006074 <USB_ReadInterrupts>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017b6:	d112      	bne.n	80017de <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d102      	bne.n	80017ce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f007 f897 	bl	80088fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80017dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f004 fc46 	bl	8006074 <USB_ReadInterrupts>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80017f2:	d121      	bne.n	8001838 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001802:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800180a:	2b00      	cmp	r3, #0
 800180c:	d111      	bne.n	8001832 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	f003 020f 	and.w	r2, r3, #15
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001828:	2101      	movs	r1, #1
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fea2 	bl	8002574 <HAL_PCDEx_LPM_Callback>
 8001830:	e002      	b.n	8001838 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f007 f862 	bl	80088fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f004 fc19 	bl	8006074 <USB_ReadInterrupts>
 8001842:	4603      	mov	r3, r0
 8001844:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800184c:	f040 80b7 	bne.w	80019be <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2110      	movs	r1, #16
 800186a:	4618      	mov	r0, r3
 800186c:	f003 fce0 	bl	8005230 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001874:	e046      	b.n	8001904 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	4413      	add	r3, r2
 800187e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001882:	461a      	mov	r2, r3
 8001884:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001888:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800188a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188c:	015a      	lsls	r2, r3, #5
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800189a:	0151      	lsls	r1, r2, #5
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	440a      	add	r2, r1
 80018a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80018a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ac:	015a      	lsls	r2, r3, #5
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018b6:	461a      	mov	r2, r3
 80018b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80018bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c0:	015a      	lsls	r2, r3, #5
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	4413      	add	r3, r2
 80018c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018ce:	0151      	lsls	r1, r2, #5
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	440a      	add	r2, r1
 80018d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018ee:	0151      	lsls	r1, r2, #5
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	440a      	add	r2, r1
 80018f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001900:	3301      	adds	r3, #1
 8001902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	791b      	ldrb	r3, [r3, #4]
 8001908:	461a      	mov	r2, r3
 800190a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190c:	4293      	cmp	r3, r2
 800190e:	d3b2      	bcc.n	8001876 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800191e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001922:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7bdb      	ldrb	r3, [r3, #15]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d016      	beq.n	800195a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800193c:	f043 030b 	orr.w	r3, r3, #11
 8001940:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800194a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001952:	f043 030b 	orr.w	r3, r3, #11
 8001956:	6453      	str	r3, [r2, #68]	@ 0x44
 8001958:	e015      	b.n	8001986 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001968:	4619      	mov	r1, r3
 800196a:	f242 032b 	movw	r3, #8235	@ 0x202b
 800196e:	4313      	orrs	r3, r2
 8001970:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001980:	f043 030b 	orr.w	r3, r3, #11
 8001984:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001994:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001998:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019a8:	461a      	mov	r2, r3
 80019aa:	f004 fc29 	bl	8006200 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695a      	ldr	r2, [r3, #20]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80019bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f004 fb56 	bl	8006074 <USB_ReadInterrupts>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019d2:	d123      	bne.n	8001a1c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f004 fbed 	bl	80061b8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 fc9d 	bl	8005322 <USB_GetDevSpeed>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681c      	ldr	r4, [r3, #0]
 80019f4:	f001 fd9e 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 80019f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019fe:	461a      	mov	r2, r3
 8001a00:	4620      	mov	r0, r4
 8001a02:	f003 f9a7 	bl	8004d54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f006 ff4f 	bl	80088aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001a1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f004 fb27 	bl	8006074 <USB_ReadInterrupts>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d10a      	bne.n	8001a46 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f006 ff2c 	bl	800888e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f002 0208 	and.w	r2, r2, #8
 8001a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f004 fb12 	bl	8006074 <USB_ReadInterrupts>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a56:	2b80      	cmp	r3, #128	@ 0x80
 8001a58:	d123      	bne.n	8001aa2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a66:	2301      	movs	r3, #1
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a6a:	e014      	b.n	8001a96 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a70:	4613      	mov	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4413      	add	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	4619      	mov	r1, r3
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fb0a 	bl	80020a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	3301      	adds	r3, #1
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	791b      	ldrb	r3, [r3, #4]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d3e4      	bcc.n	8001a6c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f004 fae4 	bl	8006074 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ab6:	d13c      	bne.n	8001b32 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ab8:	2301      	movs	r3, #1
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001abc:	e02b      	b.n	8001b16 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	015a      	lsls	r2, r3, #5
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	3318      	adds	r3, #24
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d115      	bne.n	8001b10 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ae4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	da12      	bge.n	8001b10 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aee:	4613      	mov	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	3317      	adds	r3, #23
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	4619      	mov	r1, r3
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 faca 	bl	80020a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	3301      	adds	r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	791b      	ldrb	r3, [r3, #4]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d3cd      	bcc.n	8001abe <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 fa9c 	bl	8006074 <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b46:	d156      	bne.n	8001bf6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b48:	2301      	movs	r3, #1
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b4c:	e045      	b.n	8001bda <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	015a      	lsls	r2, r3, #5
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b62:	4613      	mov	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d12e      	bne.n	8001bd4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	da2b      	bge.n	8001bd4 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	0c1a      	lsrs	r2, r3, #16
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b86:	4053      	eors	r3, r2
 8001b88:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d121      	bne.n	8001bd4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b94:	4613      	mov	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10a      	bne.n	8001bd4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bd0:	6053      	str	r3, [r2, #4]
            break;
 8001bd2:	e008      	b.n	8001be6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	791b      	ldrb	r3, [r3, #4]
 8001bde:	461a      	mov	r2, r3
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d3b3      	bcc.n	8001b4e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695a      	ldr	r2, [r3, #20]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001bf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f004 fa3a 	bl	8006074 <USB_ReadInterrupts>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c0a:	d10a      	bne.n	8001c22 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f006 fecd 	bl	80089ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f004 fa24 	bl	8006074 <USB_ReadInterrupts>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d115      	bne.n	8001c62 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f006 febd 	bl	80089c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6859      	ldr	r1, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	e000      	b.n	8001c62 <HAL_PCD_IRQHandler+0x996>
      return;
 8001c60:	bf00      	nop
    }
  }
}
 8001c62:	3734      	adds	r7, #52	@ 0x34
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd90      	pop	{r4, r7, pc}

08001c68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_PCD_SetAddress+0x1a>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e012      	b.n	8001ca8 <HAL_PCD_SetAddress+0x40>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	78fa      	ldrb	r2, [r7, #3]
 8001c8e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f004 f983 	bl	8005fa4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	4608      	mov	r0, r1
 8001cba:	4611      	mov	r1, r2
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	70fb      	strb	r3, [r7, #3]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	803b      	strh	r3, [r7, #0]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	da0f      	bge.n	8001cf6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	f003 020f 	and.w	r2, r3, #15
 8001cdc:	4613      	mov	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	3310      	adds	r3, #16
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	3304      	adds	r3, #4
 8001cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	705a      	strb	r2, [r3, #1]
 8001cf4:	e00f      	b.n	8001d16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	f003 020f 	and.w	r2, r3, #15
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001d22:	883b      	ldrh	r3, [r7, #0]
 8001d24:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	78ba      	ldrb	r2, [r7, #2]
 8001d30:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	785b      	ldrb	r3, [r3, #1]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d004      	beq.n	8001d44 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d44:	78bb      	ldrb	r3, [r7, #2]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d102      	bne.n	8001d50 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_PCD_EP_Open+0xae>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e00e      	b.n	8001d7c <HAL_PCD_EP_Open+0xcc>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68f9      	ldr	r1, [r7, #12]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 fafd 	bl	800536c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d7a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da0f      	bge.n	8001db8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	f003 020f 	and.w	r2, r3, #15
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	3310      	adds	r3, #16
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4413      	add	r3, r2
 8001dac:	3304      	adds	r3, #4
 8001dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2201      	movs	r2, #1
 8001db4:	705a      	strb	r2, [r3, #1]
 8001db6:	e00f      	b.n	8001dd8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	f003 020f 	and.w	r2, r3, #15
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	3304      	adds	r3, #4
 8001dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_PCD_EP_Close+0x6e>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e00e      	b.n	8001e10 <HAL_PCD_EP_Close+0x8c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68f9      	ldr	r1, [r7, #12]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f003 fb3b 	bl	800547c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	460b      	mov	r3, r1
 8001e26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e28:	7afb      	ldrb	r3, [r7, #11]
 8001e2a:	f003 020f 	and.w	r2, r3, #15
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3304      	adds	r3, #4
 8001e40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2200      	movs	r2, #0
 8001e52:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2200      	movs	r2, #0
 8001e58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e5a:	7afb      	ldrb	r3, [r7, #11]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	799b      	ldrb	r3, [r3, #6]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d102      	bne.n	8001e74 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	799b      	ldrb	r3, [r3, #6]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6979      	ldr	r1, [r7, #20]
 8001e80:	f003 fbd8 	bl	8005634 <USB_EPStartXfer>

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	f003 020f 	and.w	r2, r3, #15
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001eb0:	681b      	ldr	r3, [r3, #0]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ece:	7afb      	ldrb	r3, [r7, #11]
 8001ed0:	f003 020f 	and.w	r2, r3, #15
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	3310      	adds	r3, #16
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2201      	movs	r2, #1
 8001efc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001efe:	7afb      	ldrb	r3, [r7, #11]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	799b      	ldrb	r3, [r3, #6]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d102      	bne.n	8001f18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	799b      	ldrb	r3, [r3, #6]
 8001f20:	461a      	mov	r2, r3
 8001f22:	6979      	ldr	r1, [r7, #20]
 8001f24:	f003 fb86 	bl	8005634 <USB_EPStartXfer>

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	7912      	ldrb	r2, [r2, #4]
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e04f      	b.n	8001ff0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	da0f      	bge.n	8001f78 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f003 020f 	and.w	r2, r3, #15
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	3310      	adds	r3, #16
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2201      	movs	r2, #1
 8001f74:	705a      	strb	r2, [r3, #1]
 8001f76:	e00d      	b.n	8001f94 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2201      	movs	r2, #1
 8001f98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_PCD_EP_SetStall+0x82>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e01d      	b.n	8001ff0 <HAL_PCD_EP_SetStall+0xbe>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68f9      	ldr	r1, [r7, #12]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 ff1a 	bl	8005dfc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7999      	ldrb	r1, [r3, #6]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f004 f90d 	bl	8006200 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	7912      	ldrb	r2, [r2, #4]
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e042      	b.n	800209c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201a:	2b00      	cmp	r3, #0
 800201c:	da0f      	bge.n	800203e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	f003 020f 	and.w	r2, r3, #15
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	3310      	adds	r3, #16
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	3304      	adds	r3, #4
 8002034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	705a      	strb	r2, [r3, #1]
 800203c:	e00f      	b.n	800205e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	f003 020f 	and.w	r2, r3, #15
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	3304      	adds	r3, #4
 8002056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	b2da      	uxtb	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_PCD_EP_ClrStall+0x86>
 800207a:	2302      	movs	r3, #2
 800207c:	e00e      	b.n	800209c <HAL_PCD_EP_ClrStall+0xa4>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68f9      	ldr	r1, [r7, #12]
 800208c:	4618      	mov	r0, r3
 800208e:	f003 ff23 	bl	8005ed8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80020b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	da0c      	bge.n	80020d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	f003 020f 	and.w	r2, r3, #15
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	3310      	adds	r3, #16
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	3304      	adds	r3, #4
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	e00c      	b.n	80020ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	f003 020f 	and.w	r2, r3, #15
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	4413      	add	r3, r2
 80020e8:	3304      	adds	r3, #4
 80020ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 fd42 	bl	8005b7c <USB_EPStopXfer>
 80020f8:	4603      	mov	r3, r0
 80020fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020fc:	7afb      	ldrb	r3, [r7, #11]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b08a      	sub	sp, #40	@ 0x28
 800210a:	af02      	add	r7, sp, #8
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	3310      	adds	r3, #16
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	3304      	adds	r3, #4
 800212c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	429a      	cmp	r2, r3
 8002138:	d901      	bls.n	800213e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e06b      	b.n	8002216 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	429a      	cmp	r2, r3
 8002152:	d902      	bls.n	800215a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3303      	adds	r3, #3
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002162:	e02a      	b.n	80021ba <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	429a      	cmp	r2, r3
 8002178:	d902      	bls.n	8002180 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	3303      	adds	r3, #3
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	68d9      	ldr	r1, [r3, #12]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	4603      	mov	r3, r0
 800219c:	6978      	ldr	r0, [r7, #20]
 800219e:	f003 fd97 	bl	8005cd0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	441a      	add	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	441a      	add	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d809      	bhi.n	80021e4 <PCD_WriteEmptyTxFifo+0xde>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021d8:	429a      	cmp	r2, r3
 80021da:	d203      	bcs.n	80021e4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1bf      	bne.n	8002164 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d811      	bhi.n	8002214 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	2201      	movs	r2, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002204:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	43db      	mvns	r3, r3
 800220a:	6939      	ldr	r1, [r7, #16]
 800220c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002210:	4013      	ands	r3, r2
 8002212:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	333c      	adds	r3, #60	@ 0x3c
 8002238:	3304      	adds	r3, #4
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	4413      	add	r3, r2
 8002246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	799b      	ldrb	r3, [r3, #6]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d17b      	bne.n	800234e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d015      	beq.n	800228c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	4a61      	ldr	r2, [pc, #388]	@ (80023e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	f240 80b9 	bls.w	80023dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80b3 	beq.w	80023dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	4413      	add	r3, r2
 800227e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002282:	461a      	mov	r2, r3
 8002284:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002288:	6093      	str	r3, [r2, #8]
 800228a:	e0a7      	b.n	80023dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	2b00      	cmp	r3, #0
 8002294:	d009      	beq.n	80022aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	4413      	add	r3, r2
 800229e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022a2:	461a      	mov	r2, r3
 80022a4:	2320      	movs	r3, #32
 80022a6:	6093      	str	r3, [r2, #8]
 80022a8:	e098      	b.n	80023dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f040 8093 	bne.w	80023dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	4a4b      	ldr	r2, [pc, #300]	@ (80023e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d90f      	bls.n	80022de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022d4:	461a      	mov	r2, r3
 80022d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022da:	6093      	str	r3, [r2, #8]
 80022dc:	e07e      	b.n	80023dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	3304      	adds	r3, #4
 80022f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a1a      	ldr	r2, [r3, #32]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	0159      	lsls	r1, r3, #5
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	440b      	add	r3, r1
 8002300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230a:	1ad2      	subs	r2, r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d114      	bne.n	8002340 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002328:	461a      	mov	r2, r3
 800232a:	2101      	movs	r1, #1
 800232c:	f003 ff68 	bl	8006200 <USB_EP0_OutStart>
 8002330:	e006      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	441a      	add	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	4619      	mov	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f006 fa6c 	bl	8008824 <HAL_PCD_DataOutStageCallback>
 800234c:	e046      	b.n	80023dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	4a26      	ldr	r2, [pc, #152]	@ (80023ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d124      	bne.n	80023a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	4413      	add	r3, r2
 8002368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800236c:	461a      	mov	r2, r3
 800236e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002372:	6093      	str	r3, [r2, #8]
 8002374:	e032      	b.n	80023dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	4413      	add	r3, r2
 8002388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800238c:	461a      	mov	r2, r3
 800238e:	2320      	movs	r3, #32
 8002390:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	4619      	mov	r1, r3
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f006 fa43 	bl	8008824 <HAL_PCD_DataOutStageCallback>
 800239e:	e01d      	b.n	80023dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d114      	bne.n	80023d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d108      	bne.n	80023d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023c8:	461a      	mov	r2, r3
 80023ca:	2100      	movs	r1, #0
 80023cc:	f003 ff18 	bl	8006200 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	4619      	mov	r1, r3
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f006 fa24 	bl	8008824 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3720      	adds	r7, #32
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	4f54300a 	.word	0x4f54300a
 80023ec:	4f54310a 	.word	0x4f54310a

080023f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	333c      	adds	r3, #60	@ 0x3c
 8002408:	3304      	adds	r3, #4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4a15      	ldr	r2, [pc, #84]	@ (8002478 <PCD_EP_OutSetupPacket_int+0x88>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d90e      	bls.n	8002444 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800242c:	2b00      	cmp	r3, #0
 800242e:	d009      	beq.n	8002444 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800243c:	461a      	mov	r2, r3
 800243e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002442:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f006 f9db 	bl	8008800 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a0a      	ldr	r2, [pc, #40]	@ (8002478 <PCD_EP_OutSetupPacket_int+0x88>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d90c      	bls.n	800246c <PCD_EP_OutSetupPacket_int+0x7c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	799b      	ldrb	r3, [r3, #6]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d108      	bne.n	800246c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002464:	461a      	mov	r2, r3
 8002466:	2101      	movs	r1, #1
 8002468:	f003 feca 	bl	8006200 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	4f54300a 	.word	0x4f54300a

0800247c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	70fb      	strb	r3, [r7, #3]
 8002488:	4613      	mov	r3, r2
 800248a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d107      	bne.n	80024aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800249a:	883b      	ldrh	r3, [r7, #0]
 800249c:	0419      	lsls	r1, r3, #16
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80024a8:	e028      	b.n	80024fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b0:	0c1b      	lsrs	r3, r3, #16
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	4413      	add	r3, r2
 80024b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e00d      	b.n	80024da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	3340      	adds	r3, #64	@ 0x40
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	0c1b      	lsrs	r3, r3, #16
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	4413      	add	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	3301      	adds	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	7bfa      	ldrb	r2, [r7, #15]
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	3b01      	subs	r3, #1
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d3ec      	bcc.n	80024be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024e4:	883b      	ldrh	r3, [r7, #0]
 80024e6:	0418      	lsls	r0, r3, #16
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6819      	ldr	r1, [r3, #0]
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	4302      	orrs	r2, r0
 80024f4:	3340      	adds	r3, #64	@ 0x40
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	460b      	mov	r3, r1
 8002514:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	887a      	ldrh	r2, [r7, #2]
 800251c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800255a:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_PCDEx_ActivateLPM+0x44>)
 800255c:	4313      	orrs	r3, r2
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	10000003 	.word	0x10000003

08002574 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002594:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <HAL_PWREx_ConfigSupply+0x70>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b04      	cmp	r3, #4
 800259e:	d00a      	beq.n	80025b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025a0:	4b16      	ldr	r3, [pc, #88]	@ (80025fc <HAL_PWREx_ConfigSupply+0x70>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d001      	beq.n	80025b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e01f      	b.n	80025f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e01d      	b.n	80025f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025b6:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <HAL_PWREx_ConfigSupply+0x70>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f023 0207 	bic.w	r2, r3, #7
 80025be:	490f      	ldr	r1, [pc, #60]	@ (80025fc <HAL_PWREx_ConfigSupply+0x70>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025c6:	f7fe f9b3 	bl	8000930 <HAL_GetTick>
 80025ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025cc:	e009      	b.n	80025e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025ce:	f7fe f9af 	bl	8000930 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025dc:	d901      	bls.n	80025e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e007      	b.n	80025f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025e2:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <HAL_PWREx_ConfigSupply+0x70>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ee:	d1ee      	bne.n	80025ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	58024800 	.word	0x58024800

08002600 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002604:	4b05      	ldr	r3, [pc, #20]	@ (800261c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4a04      	ldr	r2, [pc, #16]	@ (800261c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800260a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800260e:	60d3      	str	r3, [r2, #12]
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	58024800 	.word	0x58024800

08002620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08c      	sub	sp, #48	@ 0x30
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d102      	bne.n	8002634 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	f000 bc48 	b.w	8002ec4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 8088 	beq.w	8002752 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002642:	4b99      	ldr	r3, [pc, #612]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800264c:	4b96      	ldr	r3, [pc, #600]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002654:	2b10      	cmp	r3, #16
 8002656:	d007      	beq.n	8002668 <HAL_RCC_OscConfig+0x48>
 8002658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265a:	2b18      	cmp	r3, #24
 800265c:	d111      	bne.n	8002682 <HAL_RCC_OscConfig+0x62>
 800265e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d10c      	bne.n	8002682 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	4b8f      	ldr	r3, [pc, #572]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d06d      	beq.n	8002750 <HAL_RCC_OscConfig+0x130>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d169      	bne.n	8002750 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	f000 bc21 	b.w	8002ec4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800268a:	d106      	bne.n	800269a <HAL_RCC_OscConfig+0x7a>
 800268c:	4b86      	ldr	r3, [pc, #536]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a85      	ldr	r2, [pc, #532]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 8002692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	e02e      	b.n	80026f8 <HAL_RCC_OscConfig+0xd8>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10c      	bne.n	80026bc <HAL_RCC_OscConfig+0x9c>
 80026a2:	4b81      	ldr	r3, [pc, #516]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a80      	ldr	r2, [pc, #512]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80026a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b7e      	ldr	r3, [pc, #504]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a7d      	ldr	r2, [pc, #500]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80026b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e01d      	b.n	80026f8 <HAL_RCC_OscConfig+0xd8>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0xc0>
 80026c6:	4b78      	ldr	r3, [pc, #480]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a77      	ldr	r2, [pc, #476]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80026cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b75      	ldr	r3, [pc, #468]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a74      	ldr	r2, [pc, #464]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0xd8>
 80026e0:	4b71      	ldr	r3, [pc, #452]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a70      	ldr	r2, [pc, #448]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b6e      	ldr	r3, [pc, #440]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a6d      	ldr	r2, [pc, #436]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80026f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe f916 	bl	8000930 <HAL_GetTick>
 8002704:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7fe f912 	bl	8000930 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	@ 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e3d4      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800271a:	4b63      	ldr	r3, [pc, #396]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0xe8>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe f902 	bl	8000930 <HAL_GetTick>
 800272c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7fe f8fe 	bl	8000930 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	@ 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e3c0      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002742:	4b59      	ldr	r3, [pc, #356]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x110>
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80ca 	beq.w	80028f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002760:	4b51      	ldr	r3, [pc, #324]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002768:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800276a:	4b4f      	ldr	r3, [pc, #316]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 800276c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <HAL_RCC_OscConfig+0x166>
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	2b18      	cmp	r3, #24
 800277a:	d156      	bne.n	800282a <HAL_RCC_OscConfig+0x20a>
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d151      	bne.n	800282a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002786:	4b48      	ldr	r3, [pc, #288]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_RCC_OscConfig+0x17e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e392      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800279e:	4b42      	ldr	r3, [pc, #264]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 0219 	bic.w	r2, r3, #25
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	493f      	ldr	r1, [pc, #252]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe f8be 	bl	8000930 <HAL_GetTick>
 80027b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b8:	f7fe f8ba 	bl	8000930 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e37c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ca:	4b37      	ldr	r3, [pc, #220]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	f7fe f8db 	bl	8000990 <HAL_GetREVID>
 80027da:	4603      	mov	r3, r0
 80027dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d817      	bhi.n	8002814 <HAL_RCC_OscConfig+0x1f4>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b40      	cmp	r3, #64	@ 0x40
 80027ea:	d108      	bne.n	80027fe <HAL_RCC_OscConfig+0x1de>
 80027ec:	4b2e      	ldr	r3, [pc, #184]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80027f4:	4a2c      	ldr	r2, [pc, #176]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80027f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027fc:	e07a      	b.n	80028f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fe:	4b2a      	ldr	r3, [pc, #168]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	031b      	lsls	r3, r3, #12
 800280c:	4926      	ldr	r1, [pc, #152]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002812:	e06f      	b.n	80028f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002814:	4b24      	ldr	r3, [pc, #144]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	4921      	ldr	r1, [pc, #132]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002828:	e064      	b.n	80028f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d047      	beq.n	80028c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002832:	4b1d      	ldr	r3, [pc, #116]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 0219 	bic.w	r2, r3, #25
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	491a      	ldr	r1, [pc, #104]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7fe f874 	bl	8000930 <HAL_GetTick>
 8002848:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284c:	f7fe f870 	bl	8000930 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e332      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800285e:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286a:	f7fe f891 	bl	8000990 <HAL_GetREVID>
 800286e:	4603      	mov	r3, r0
 8002870:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002874:	4293      	cmp	r3, r2
 8002876:	d819      	bhi.n	80028ac <HAL_RCC_OscConfig+0x28c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2b40      	cmp	r3, #64	@ 0x40
 800287e:	d108      	bne.n	8002892 <HAL_RCC_OscConfig+0x272>
 8002880:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002888:	4a07      	ldr	r2, [pc, #28]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 800288a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800288e:	6053      	str	r3, [r2, #4]
 8002890:	e030      	b.n	80028f4 <HAL_RCC_OscConfig+0x2d4>
 8002892:	4b05      	ldr	r3, [pc, #20]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	031b      	lsls	r3, r3, #12
 80028a0:	4901      	ldr	r1, [pc, #4]	@ (80028a8 <HAL_RCC_OscConfig+0x288>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
 80028a6:	e025      	b.n	80028f4 <HAL_RCC_OscConfig+0x2d4>
 80028a8:	58024400 	.word	0x58024400
 80028ac:	4b9a      	ldr	r3, [pc, #616]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	061b      	lsls	r3, r3, #24
 80028ba:	4997      	ldr	r1, [pc, #604]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
 80028c0:	e018      	b.n	80028f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c2:	4b95      	ldr	r3, [pc, #596]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a94      	ldr	r2, [pc, #592]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ce:	f7fe f82f 	bl	8000930 <HAL_GetTick>
 80028d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d6:	f7fe f82b 	bl	8000930 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e2ed      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028e8:	4b8b      	ldr	r3, [pc, #556]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f0      	bne.n	80028d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80a9 	beq.w	8002a54 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002902:	4b85      	ldr	r3, [pc, #532]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800290a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800290c:	4b82      	ldr	r3, [pc, #520]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2b08      	cmp	r3, #8
 8002916:	d007      	beq.n	8002928 <HAL_RCC_OscConfig+0x308>
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b18      	cmp	r3, #24
 800291c:	d13a      	bne.n	8002994 <HAL_RCC_OscConfig+0x374>
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b01      	cmp	r3, #1
 8002926:	d135      	bne.n	8002994 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002928:	4b7b      	ldr	r3, [pc, #492]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_OscConfig+0x320>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	2b80      	cmp	r3, #128	@ 0x80
 800293a:	d001      	beq.n	8002940 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e2c1      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002940:	f7fe f826 	bl	8000990 <HAL_GetREVID>
 8002944:	4603      	mov	r3, r0
 8002946:	f241 0203 	movw	r2, #4099	@ 0x1003
 800294a:	4293      	cmp	r3, r2
 800294c:	d817      	bhi.n	800297e <HAL_RCC_OscConfig+0x35e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	2b20      	cmp	r3, #32
 8002954:	d108      	bne.n	8002968 <HAL_RCC_OscConfig+0x348>
 8002956:	4b70      	ldr	r3, [pc, #448]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800295e:	4a6e      	ldr	r2, [pc, #440]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002960:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002964:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002966:	e075      	b.n	8002a54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002968:	4b6b      	ldr	r3, [pc, #428]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	069b      	lsls	r3, r3, #26
 8002976:	4968      	ldr	r1, [pc, #416]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800297c:	e06a      	b.n	8002a54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800297e:	4b66      	ldr	r3, [pc, #408]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	061b      	lsls	r3, r3, #24
 800298c:	4962      	ldr	r1, [pc, #392]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 800298e:	4313      	orrs	r3, r2
 8002990:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002992:	e05f      	b.n	8002a54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d042      	beq.n	8002a22 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800299c:	4b5e      	ldr	r3, [pc, #376]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 80029a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fd ffc2 	bl	8000930 <HAL_GetTick>
 80029ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029b0:	f7fd ffbe 	bl	8000930 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e280      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029c2:	4b55      	ldr	r3, [pc, #340]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029ce:	f7fd ffdf 	bl	8000990 <HAL_GetREVID>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029d8:	4293      	cmp	r3, r2
 80029da:	d817      	bhi.n	8002a0c <HAL_RCC_OscConfig+0x3ec>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d108      	bne.n	80029f6 <HAL_RCC_OscConfig+0x3d6>
 80029e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80029ec:	4a4a      	ldr	r2, [pc, #296]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 80029ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029f2:	6053      	str	r3, [r2, #4]
 80029f4:	e02e      	b.n	8002a54 <HAL_RCC_OscConfig+0x434>
 80029f6:	4b48      	ldr	r3, [pc, #288]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	069b      	lsls	r3, r3, #26
 8002a04:	4944      	ldr	r1, [pc, #272]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
 8002a0a:	e023      	b.n	8002a54 <HAL_RCC_OscConfig+0x434>
 8002a0c:	4b42      	ldr	r3, [pc, #264]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	493f      	ldr	r1, [pc, #252]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60cb      	str	r3, [r1, #12]
 8002a20:	e018      	b.n	8002a54 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a22:	4b3d      	ldr	r3, [pc, #244]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a3c      	ldr	r2, [pc, #240]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002a28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2e:	f7fd ff7f 	bl	8000930 <HAL_GetTick>
 8002a32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a36:	f7fd ff7b 	bl	8000930 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e23d      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a48:	4b33      	ldr	r3, [pc, #204]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f0      	bne.n	8002a36 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d036      	beq.n	8002ace <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d019      	beq.n	8002a9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a68:	4b2b      	ldr	r3, [pc, #172]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7fd ff5c 	bl	8000930 <HAL_GetTick>
 8002a78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7c:	f7fd ff58 	bl	8000930 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e21a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a8e:	4b22      	ldr	r3, [pc, #136]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x45c>
 8002a9a:	e018      	b.n	8002ace <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7fd ff42 	bl	8000930 <HAL_GetTick>
 8002aac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab0:	f7fd ff3e 	bl	8000930 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e200      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ac2:	4b15      	ldr	r3, [pc, #84]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d039      	beq.n	8002b4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d01c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002ae8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002aec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002aee:	f7fd ff1f 	bl	8000930 <HAL_GetTick>
 8002af2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002af6:	f7fd ff1b 	bl	8000930 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e1dd      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b08:	4b03      	ldr	r3, [pc, #12]	@ (8002b18 <HAL_RCC_OscConfig+0x4f8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x4d6>
 8002b14:	e01b      	b.n	8002b4e <HAL_RCC_OscConfig+0x52e>
 8002b16:	bf00      	nop
 8002b18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b1c:	4b9b      	ldr	r3, [pc, #620]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a9a      	ldr	r2, [pc, #616]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002b22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b28:	f7fd ff02 	bl	8000930 <HAL_GetTick>
 8002b2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b30:	f7fd fefe 	bl	8000930 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e1c0      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b42:	4b92      	ldr	r3, [pc, #584]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8081 	beq.w	8002c5e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b5c:	4b8c      	ldr	r3, [pc, #560]	@ (8002d90 <HAL_RCC_OscConfig+0x770>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a8b      	ldr	r2, [pc, #556]	@ (8002d90 <HAL_RCC_OscConfig+0x770>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b68:	f7fd fee2 	bl	8000930 <HAL_GetTick>
 8002b6c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b70:	f7fd fede 	bl	8000930 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	@ 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e1a0      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b82:	4b83      	ldr	r3, [pc, #524]	@ (8002d90 <HAL_RCC_OscConfig+0x770>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d106      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x584>
 8002b96:	4b7d      	ldr	r3, [pc, #500]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9a:	4a7c      	ldr	r2, [pc, #496]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba2:	e02d      	b.n	8002c00 <HAL_RCC_OscConfig+0x5e0>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10c      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x5a6>
 8002bac:	4b77      	ldr	r3, [pc, #476]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb0:	4a76      	ldr	r2, [pc, #472]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002bb2:	f023 0301 	bic.w	r3, r3, #1
 8002bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bb8:	4b74      	ldr	r3, [pc, #464]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bbc:	4a73      	ldr	r2, [pc, #460]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002bbe:	f023 0304 	bic.w	r3, r3, #4
 8002bc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc4:	e01c      	b.n	8002c00 <HAL_RCC_OscConfig+0x5e0>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5c8>
 8002bce:	4b6f      	ldr	r3, [pc, #444]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd2:	4a6e      	ldr	r2, [pc, #440]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002bd4:	f043 0304 	orr.w	r3, r3, #4
 8002bd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bda:	4b6c      	ldr	r3, [pc, #432]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bde:	4a6b      	ldr	r2, [pc, #428]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0x5e0>
 8002be8:	4b68      	ldr	r3, [pc, #416]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bec:	4a67      	ldr	r2, [pc, #412]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf4:	4b65      	ldr	r3, [pc, #404]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf8:	4a64      	ldr	r2, [pc, #400]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002bfa:	f023 0304 	bic.w	r3, r3, #4
 8002bfe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d015      	beq.n	8002c34 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7fd fe92 	bl	8000930 <HAL_GetTick>
 8002c0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fd fe8e 	bl	8000930 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e14e      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c26:	4b59      	ldr	r3, [pc, #356]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0ee      	beq.n	8002c10 <HAL_RCC_OscConfig+0x5f0>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fd fe7c 	bl	8000930 <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fd fe78 	bl	8000930 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e138      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c52:	4b4e      	ldr	r3, [pc, #312]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1ee      	bne.n	8002c3c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 812d 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c68:	4b48      	ldr	r3, [pc, #288]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c70:	2b18      	cmp	r3, #24
 8002c72:	f000 80bd 	beq.w	8002df0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	f040 809e 	bne.w	8002dbc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c80:	4b42      	ldr	r3, [pc, #264]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a41      	ldr	r2, [pc, #260]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002c86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fd fe50 	bl	8000930 <HAL_GetTick>
 8002c90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fd fe4c 	bl	8000930 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e10e      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ca6:	4b39      	ldr	r3, [pc, #228]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb2:	4b36      	ldr	r3, [pc, #216]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002cb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cb6:	4b37      	ldr	r3, [pc, #220]	@ (8002d94 <HAL_RCC_OscConfig+0x774>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	4931      	ldr	r1, [pc, #196]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	628b      	str	r3, [r1, #40]	@ 0x28
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	025b      	lsls	r3, r3, #9
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	061b      	lsls	r3, r3, #24
 8002cf8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002cfc:	4923      	ldr	r1, [pc, #140]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d02:	4b22      	ldr	r3, [pc, #136]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d06:	4a21      	ldr	r2, [pc, #132]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d08:	f023 0301 	bic.w	r3, r3, #1
 8002d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d12:	4b21      	ldr	r3, [pc, #132]	@ (8002d98 <HAL_RCC_OscConfig+0x778>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d1a:	00d2      	lsls	r2, r2, #3
 8002d1c:	491b      	ldr	r1, [pc, #108]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d22:	4b1a      	ldr	r3, [pc, #104]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d26:	f023 020c 	bic.w	r2, r3, #12
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	4917      	ldr	r1, [pc, #92]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d34:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	f023 0202 	bic.w	r2, r3, #2
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d40:	4912      	ldr	r1, [pc, #72]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d46:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	4a10      	ldr	r2, [pc, #64]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d52:	4b0e      	ldr	r3, [pc, #56]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d56:	4a0d      	ldr	r2, [pc, #52]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d62:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d6a:	4b08      	ldr	r3, [pc, #32]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6e:	4a07      	ldr	r2, [pc, #28]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d76:	4b05      	ldr	r3, [pc, #20]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a04      	ldr	r2, [pc, #16]	@ (8002d8c <HAL_RCC_OscConfig+0x76c>)
 8002d7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7fd fdd5 	bl	8000930 <HAL_GetTick>
 8002d86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d88:	e011      	b.n	8002dae <HAL_RCC_OscConfig+0x78e>
 8002d8a:	bf00      	nop
 8002d8c:	58024400 	.word	0x58024400
 8002d90:	58024800 	.word	0x58024800
 8002d94:	fffffc0c 	.word	0xfffffc0c
 8002d98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fd fdc8 	bl	8000930 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e08a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dae:	4b47      	ldr	r3, [pc, #284]	@ (8002ecc <HAL_RCC_OscConfig+0x8ac>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x77c>
 8002dba:	e082      	b.n	8002ec2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	4b43      	ldr	r3, [pc, #268]	@ (8002ecc <HAL_RCC_OscConfig+0x8ac>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a42      	ldr	r2, [pc, #264]	@ (8002ecc <HAL_RCC_OscConfig+0x8ac>)
 8002dc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fd fdb2 	bl	8000930 <HAL_GetTick>
 8002dcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7fd fdae 	bl	8000930 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e070      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002de2:	4b3a      	ldr	r3, [pc, #232]	@ (8002ecc <HAL_RCC_OscConfig+0x8ac>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x7b0>
 8002dee:	e068      	b.n	8002ec2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002df0:	4b36      	ldr	r3, [pc, #216]	@ (8002ecc <HAL_RCC_OscConfig+0x8ac>)
 8002df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002df6:	4b35      	ldr	r3, [pc, #212]	@ (8002ecc <HAL_RCC_OscConfig+0x8ac>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d031      	beq.n	8002e68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f003 0203 	and.w	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d12a      	bne.n	8002e68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d122      	bne.n	8002e68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d11a      	bne.n	8002e68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	0a5b      	lsrs	r3, r3, #9
 8002e36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d111      	bne.n	8002e68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	0c1b      	lsrs	r3, r3, #16
 8002e48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d108      	bne.n	8002e68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	0e1b      	lsrs	r3, r3, #24
 8002e5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e02b      	b.n	8002ec4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e6c:	4b17      	ldr	r3, [pc, #92]	@ (8002ecc <HAL_RCC_OscConfig+0x8ac>)
 8002e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e70:	08db      	lsrs	r3, r3, #3
 8002e72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d01f      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e82:	4b12      	ldr	r3, [pc, #72]	@ (8002ecc <HAL_RCC_OscConfig+0x8ac>)
 8002e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e86:	4a11      	ldr	r2, [pc, #68]	@ (8002ecc <HAL_RCC_OscConfig+0x8ac>)
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e8e:	f7fd fd4f 	bl	8000930 <HAL_GetTick>
 8002e92:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e94:	bf00      	nop
 8002e96:	f7fd fd4b 	bl	8000930 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d0f9      	beq.n	8002e96 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ecc <HAL_RCC_OscConfig+0x8ac>)
 8002ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <HAL_RCC_OscConfig+0x8b0>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002eae:	00d2      	lsls	r2, r2, #3
 8002eb0:	4906      	ldr	r1, [pc, #24]	@ (8002ecc <HAL_RCC_OscConfig+0x8ac>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002eb6:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <HAL_RCC_OscConfig+0x8ac>)
 8002eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eba:	4a04      	ldr	r2, [pc, #16]	@ (8002ecc <HAL_RCC_OscConfig+0x8ac>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3730      	adds	r7, #48	@ 0x30
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	58024400 	.word	0x58024400
 8002ed0:	ffff0007 	.word	0xffff0007

08002ed4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e19c      	b.n	8003222 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b8a      	ldr	r3, [pc, #552]	@ (8003114 <HAL_RCC_ClockConfig+0x240>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d910      	bls.n	8002f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b87      	ldr	r3, [pc, #540]	@ (8003114 <HAL_RCC_ClockConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 020f 	bic.w	r2, r3, #15
 8002efe:	4985      	ldr	r1, [pc, #532]	@ (8003114 <HAL_RCC_ClockConfig+0x240>)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f06:	4b83      	ldr	r3, [pc, #524]	@ (8003114 <HAL_RCC_ClockConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e184      	b.n	8003222 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d010      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	4b7b      	ldr	r3, [pc, #492]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d908      	bls.n	8002f46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f34:	4b78      	ldr	r3, [pc, #480]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	4975      	ldr	r1, [pc, #468]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d010      	beq.n	8002f74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	4b70      	ldr	r3, [pc, #448]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d908      	bls.n	8002f74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f62:	4b6d      	ldr	r3, [pc, #436]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	496a      	ldr	r1, [pc, #424]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d010      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699a      	ldr	r2, [r3, #24]
 8002f84:	4b64      	ldr	r3, [pc, #400]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d908      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f90:	4b61      	ldr	r3, [pc, #388]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	495e      	ldr	r1, [pc, #376]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d010      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	4b59      	ldr	r3, [pc, #356]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d908      	bls.n	8002fd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fbe:	4b56      	ldr	r3, [pc, #344]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	4953      	ldr	r1, [pc, #332]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d010      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	4b4d      	ldr	r3, [pc, #308]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d908      	bls.n	8002ffe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fec:	4b4a      	ldr	r3, [pc, #296]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f023 020f 	bic.w	r2, r3, #15
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4947      	ldr	r1, [pc, #284]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d055      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800300a:	4b43      	ldr	r3, [pc, #268]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	4940      	ldr	r1, [pc, #256]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8003018:	4313      	orrs	r3, r2
 800301a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d107      	bne.n	8003034 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003024:	4b3c      	ldr	r3, [pc, #240]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d121      	bne.n	8003074 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0f6      	b.n	8003222 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b03      	cmp	r3, #3
 800303a:	d107      	bne.n	800304c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800303c:	4b36      	ldr	r3, [pc, #216]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d115      	bne.n	8003074 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0ea      	b.n	8003222 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003054:	4b30      	ldr	r3, [pc, #192]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0de      	b.n	8003222 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003064:	4b2c      	ldr	r3, [pc, #176]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0d6      	b.n	8003222 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003074:	4b28      	ldr	r3, [pc, #160]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f023 0207 	bic.w	r2, r3, #7
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4925      	ldr	r1, [pc, #148]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 8003082:	4313      	orrs	r3, r2
 8003084:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003086:	f7fd fc53 	bl	8000930 <HAL_GetTick>
 800308a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308c:	e00a      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308e:	f7fd fc4f 	bl	8000930 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e0be      	b.n	8003222 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d1eb      	bne.n	800308e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d010      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	4b14      	ldr	r3, [pc, #80]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d208      	bcs.n	80030e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d2:	4b11      	ldr	r3, [pc, #68]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f023 020f 	bic.w	r2, r3, #15
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	490e      	ldr	r1, [pc, #56]	@ (8003118 <HAL_RCC_ClockConfig+0x244>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003114 <HAL_RCC_ClockConfig+0x240>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d214      	bcs.n	800311c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b08      	ldr	r3, [pc, #32]	@ (8003114 <HAL_RCC_ClockConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 020f 	bic.w	r2, r3, #15
 80030fa:	4906      	ldr	r1, [pc, #24]	@ (8003114 <HAL_RCC_ClockConfig+0x240>)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b04      	ldr	r3, [pc, #16]	@ (8003114 <HAL_RCC_ClockConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d005      	beq.n	800311c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e086      	b.n	8003222 <HAL_RCC_ClockConfig+0x34e>
 8003114:	52002000 	.word	0x52002000
 8003118:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d010      	beq.n	800314a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	4b3f      	ldr	r3, [pc, #252]	@ (800322c <HAL_RCC_ClockConfig+0x358>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003134:	429a      	cmp	r2, r3
 8003136:	d208      	bcs.n	800314a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003138:	4b3c      	ldr	r3, [pc, #240]	@ (800322c <HAL_RCC_ClockConfig+0x358>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	4939      	ldr	r1, [pc, #228]	@ (800322c <HAL_RCC_ClockConfig+0x358>)
 8003146:	4313      	orrs	r3, r2
 8003148:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d010      	beq.n	8003178 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	4b34      	ldr	r3, [pc, #208]	@ (800322c <HAL_RCC_ClockConfig+0x358>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003162:	429a      	cmp	r2, r3
 8003164:	d208      	bcs.n	8003178 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003166:	4b31      	ldr	r3, [pc, #196]	@ (800322c <HAL_RCC_ClockConfig+0x358>)
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	492e      	ldr	r1, [pc, #184]	@ (800322c <HAL_RCC_ClockConfig+0x358>)
 8003174:	4313      	orrs	r3, r2
 8003176:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	d010      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699a      	ldr	r2, [r3, #24]
 8003188:	4b28      	ldr	r3, [pc, #160]	@ (800322c <HAL_RCC_ClockConfig+0x358>)
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003190:	429a      	cmp	r2, r3
 8003192:	d208      	bcs.n	80031a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003194:	4b25      	ldr	r3, [pc, #148]	@ (800322c <HAL_RCC_ClockConfig+0x358>)
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	4922      	ldr	r1, [pc, #136]	@ (800322c <HAL_RCC_ClockConfig+0x358>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d010      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	4b1d      	ldr	r3, [pc, #116]	@ (800322c <HAL_RCC_ClockConfig+0x358>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031be:	429a      	cmp	r2, r3
 80031c0:	d208      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031c2:	4b1a      	ldr	r3, [pc, #104]	@ (800322c <HAL_RCC_ClockConfig+0x358>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	4917      	ldr	r1, [pc, #92]	@ (800322c <HAL_RCC_ClockConfig+0x358>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031d4:	f000 f834 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b14      	ldr	r3, [pc, #80]	@ (800322c <HAL_RCC_ClockConfig+0x358>)
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	0a1b      	lsrs	r3, r3, #8
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	4912      	ldr	r1, [pc, #72]	@ (8003230 <HAL_RCC_ClockConfig+0x35c>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
 80031f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031f2:	4b0e      	ldr	r3, [pc, #56]	@ (800322c <HAL_RCC_ClockConfig+0x358>)
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003230 <HAL_RCC_ClockConfig+0x35c>)
 80031fc:	5cd3      	ldrb	r3, [r2, r3]
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
 8003208:	4a0a      	ldr	r2, [pc, #40]	@ (8003234 <HAL_RCC_ClockConfig+0x360>)
 800320a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800320c:	4a0a      	ldr	r2, [pc, #40]	@ (8003238 <HAL_RCC_ClockConfig+0x364>)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003212:	4b0a      	ldr	r3, [pc, #40]	@ (800323c <HAL_RCC_ClockConfig+0x368>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd fb40 	bl	800089c <HAL_InitTick>
 800321c:	4603      	mov	r3, r0
 800321e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003220:	7bfb      	ldrb	r3, [r7, #15]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	58024400 	.word	0x58024400
 8003230:	08008f4c 	.word	0x08008f4c
 8003234:	24000010 	.word	0x24000010
 8003238:	2400000c 	.word	0x2400000c
 800323c:	24000014 	.word	0x24000014

08003240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	@ 0x24
 8003244:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003246:	4bb3      	ldr	r3, [pc, #716]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800324e:	2b18      	cmp	r3, #24
 8003250:	f200 8155 	bhi.w	80034fe <HAL_RCC_GetSysClockFreq+0x2be>
 8003254:	a201      	add	r2, pc, #4	@ (adr r2, 800325c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	080032c1 	.word	0x080032c1
 8003260:	080034ff 	.word	0x080034ff
 8003264:	080034ff 	.word	0x080034ff
 8003268:	080034ff 	.word	0x080034ff
 800326c:	080034ff 	.word	0x080034ff
 8003270:	080034ff 	.word	0x080034ff
 8003274:	080034ff 	.word	0x080034ff
 8003278:	080034ff 	.word	0x080034ff
 800327c:	080032e7 	.word	0x080032e7
 8003280:	080034ff 	.word	0x080034ff
 8003284:	080034ff 	.word	0x080034ff
 8003288:	080034ff 	.word	0x080034ff
 800328c:	080034ff 	.word	0x080034ff
 8003290:	080034ff 	.word	0x080034ff
 8003294:	080034ff 	.word	0x080034ff
 8003298:	080034ff 	.word	0x080034ff
 800329c:	080032ed 	.word	0x080032ed
 80032a0:	080034ff 	.word	0x080034ff
 80032a4:	080034ff 	.word	0x080034ff
 80032a8:	080034ff 	.word	0x080034ff
 80032ac:	080034ff 	.word	0x080034ff
 80032b0:	080034ff 	.word	0x080034ff
 80032b4:	080034ff 	.word	0x080034ff
 80032b8:	080034ff 	.word	0x080034ff
 80032bc:	080032f3 	.word	0x080032f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032c0:	4b94      	ldr	r3, [pc, #592]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d009      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032cc:	4b91      	ldr	r3, [pc, #580]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	08db      	lsrs	r3, r3, #3
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	4a90      	ldr	r2, [pc, #576]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
 80032dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80032de:	e111      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032e0:	4b8d      	ldr	r3, [pc, #564]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032e2:	61bb      	str	r3, [r7, #24]
      break;
 80032e4:	e10e      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80032e6:	4b8d      	ldr	r3, [pc, #564]	@ (800351c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032e8:	61bb      	str	r3, [r7, #24]
      break;
 80032ea:	e10b      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80032ec:	4b8c      	ldr	r3, [pc, #560]	@ (8003520 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032ee:	61bb      	str	r3, [r7, #24]
      break;
 80032f0:	e108      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032f2:	4b88      	ldr	r3, [pc, #544]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80032fc:	4b85      	ldr	r3, [pc, #532]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003306:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003308:	4b82      	ldr	r3, [pc, #520]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003312:	4b80      	ldr	r3, [pc, #512]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003316:	08db      	lsrs	r3, r3, #3
 8003318:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	ee07 3a90 	vmov	s15, r3
 8003326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80e1 	beq.w	80034f8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b02      	cmp	r3, #2
 800333a:	f000 8083 	beq.w	8003444 <HAL_RCC_GetSysClockFreq+0x204>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b02      	cmp	r3, #2
 8003342:	f200 80a1 	bhi.w	8003488 <HAL_RCC_GetSysClockFreq+0x248>
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_RCC_GetSysClockFreq+0x114>
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d056      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003352:	e099      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003354:	4b6f      	ldr	r3, [pc, #444]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d02d      	beq.n	80033bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003360:	4b6c      	ldr	r3, [pc, #432]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	08db      	lsrs	r3, r3, #3
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	4a6b      	ldr	r2, [pc, #428]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
 8003370:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	ee07 3a90 	vmov	s15, r3
 8003378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800338a:	4b62      	ldr	r3, [pc, #392]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800339a:	ed97 6a02 	vldr	s12, [r7, #8]
 800339e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003524 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80033ba:	e087      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003528 <HAL_RCC_GetSysClockFreq+0x2e8>
 80033ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ce:	4b51      	ldr	r3, [pc, #324]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033de:	ed97 6a02 	vldr	s12, [r7, #8]
 80033e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003524 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033fe:	e065      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800352c <HAL_RCC_GetSysClockFreq+0x2ec>
 800340e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003412:	4b40      	ldr	r3, [pc, #256]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003422:	ed97 6a02 	vldr	s12, [r7, #8]
 8003426:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003524 <HAL_RCC_GetSysClockFreq+0x2e4>
 800342a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800342e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800343a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003442:	e043      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003530 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003456:	4b2f      	ldr	r3, [pc, #188]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003466:	ed97 6a02 	vldr	s12, [r7, #8]
 800346a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003524 <HAL_RCC_GetSysClockFreq+0x2e4>
 800346e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800347a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800347e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003482:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003486:	e021      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003492:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800352c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800349a:	4b1e      	ldr	r3, [pc, #120]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003524 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80034cc:	4b11      	ldr	r3, [pc, #68]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d0:	0a5b      	lsrs	r3, r3, #9
 80034d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034d6:	3301      	adds	r3, #1
 80034d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	ee07 3a90 	vmov	s15, r3
 80034e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80034e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034f0:	ee17 3a90 	vmov	r3, s15
 80034f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80034f6:	e005      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61bb      	str	r3, [r7, #24]
      break;
 80034fc:	e002      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80034fe:	4b07      	ldr	r3, [pc, #28]	@ (800351c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003500:	61bb      	str	r3, [r7, #24]
      break;
 8003502:	bf00      	nop
  }

  return sysclockfreq;
 8003504:	69bb      	ldr	r3, [r7, #24]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3724      	adds	r7, #36	@ 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	58024400 	.word	0x58024400
 8003518:	03d09000 	.word	0x03d09000
 800351c:	003d0900 	.word	0x003d0900
 8003520:	017d7840 	.word	0x017d7840
 8003524:	46000000 	.word	0x46000000
 8003528:	4c742400 	.word	0x4c742400
 800352c:	4a742400 	.word	0x4a742400
 8003530:	4bbebc20 	.word	0x4bbebc20

08003534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800353a:	f7ff fe81 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 800353e:	4602      	mov	r2, r0
 8003540:	4b10      	ldr	r3, [pc, #64]	@ (8003584 <HAL_RCC_GetHCLKFreq+0x50>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	0a1b      	lsrs	r3, r3, #8
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	490f      	ldr	r1, [pc, #60]	@ (8003588 <HAL_RCC_GetHCLKFreq+0x54>)
 800354c:	5ccb      	ldrb	r3, [r1, r3]
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	fa22 f303 	lsr.w	r3, r2, r3
 8003556:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003558:	4b0a      	ldr	r3, [pc, #40]	@ (8003584 <HAL_RCC_GetHCLKFreq+0x50>)
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	4a09      	ldr	r2, [pc, #36]	@ (8003588 <HAL_RCC_GetHCLKFreq+0x54>)
 8003562:	5cd3      	ldrb	r3, [r2, r3]
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	fa22 f303 	lsr.w	r3, r2, r3
 800356e:	4a07      	ldr	r2, [pc, #28]	@ (800358c <HAL_RCC_GetHCLKFreq+0x58>)
 8003570:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003572:	4a07      	ldr	r2, [pc, #28]	@ (8003590 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003578:	4b04      	ldr	r3, [pc, #16]	@ (800358c <HAL_RCC_GetHCLKFreq+0x58>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	58024400 	.word	0x58024400
 8003588:	08008f4c 	.word	0x08008f4c
 800358c:	24000010 	.word	0x24000010
 8003590:	2400000c 	.word	0x2400000c

08003594 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003598:	b0ca      	sub	sp, #296	@ 0x128
 800359a:	af00      	add	r7, sp, #0
 800359c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035a0:	2300      	movs	r3, #0
 80035a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035a6:	2300      	movs	r3, #0
 80035a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80035b8:	2500      	movs	r5, #0
 80035ba:	ea54 0305 	orrs.w	r3, r4, r5
 80035be:	d049      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80035c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035ca:	d02f      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80035cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035d0:	d828      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035d6:	d01a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80035d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035dc:	d822      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80035e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035e6:	d007      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035e8:	e01c      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ea:	4bb8      	ldr	r3, [pc, #736]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ee:	4ab7      	ldr	r2, [pc, #732]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035f6:	e01a      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fc:	3308      	adds	r3, #8
 80035fe:	2102      	movs	r1, #2
 8003600:	4618      	mov	r0, r3
 8003602:	f001 f9d1 	bl	80049a8 <RCCEx_PLL2_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800360c:	e00f      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800360e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003612:	3328      	adds	r3, #40	@ 0x28
 8003614:	2102      	movs	r1, #2
 8003616:	4618      	mov	r0, r3
 8003618:	f001 fa78 	bl	8004b0c <RCCEx_PLL3_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003622:	e004      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800362a:	e000      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800362c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800362e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003636:	4ba5      	ldr	r3, [pc, #660]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800363e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003642:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003644:	4aa1      	ldr	r2, [pc, #644]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003646:	430b      	orrs	r3, r1
 8003648:	6513      	str	r3, [r2, #80]	@ 0x50
 800364a:	e003      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003650:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003660:	f04f 0900 	mov.w	r9, #0
 8003664:	ea58 0309 	orrs.w	r3, r8, r9
 8003668:	d047      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800366a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003670:	2b04      	cmp	r3, #4
 8003672:	d82a      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003674:	a201      	add	r2, pc, #4	@ (adr r2, 800367c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367a:	bf00      	nop
 800367c:	08003691 	.word	0x08003691
 8003680:	0800369f 	.word	0x0800369f
 8003684:	080036b5 	.word	0x080036b5
 8003688:	080036d3 	.word	0x080036d3
 800368c:	080036d3 	.word	0x080036d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003690:	4b8e      	ldr	r3, [pc, #568]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	4a8d      	ldr	r2, [pc, #564]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800369a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800369c:	e01a      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800369e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a2:	3308      	adds	r3, #8
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f001 f97e 	bl	80049a8 <RCCEx_PLL2_Config>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036b2:	e00f      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b8:	3328      	adds	r3, #40	@ 0x28
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f001 fa25 	bl	8004b0c <RCCEx_PLL3_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036c8:	e004      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036d0:	e000      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80036d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10a      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036dc:	4b7b      	ldr	r3, [pc, #492]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e0:	f023 0107 	bic.w	r1, r3, #7
 80036e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ea:	4a78      	ldr	r2, [pc, #480]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80036f0:	e003      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003702:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003706:	f04f 0b00 	mov.w	fp, #0
 800370a:	ea5a 030b 	orrs.w	r3, sl, fp
 800370e:	d04c      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800371a:	d030      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800371c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003720:	d829      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003722:	2bc0      	cmp	r3, #192	@ 0xc0
 8003724:	d02d      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003726:	2bc0      	cmp	r3, #192	@ 0xc0
 8003728:	d825      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800372a:	2b80      	cmp	r3, #128	@ 0x80
 800372c:	d018      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800372e:	2b80      	cmp	r3, #128	@ 0x80
 8003730:	d821      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003736:	2b40      	cmp	r3, #64	@ 0x40
 8003738:	d007      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800373a:	e01c      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800373c:	4b63      	ldr	r3, [pc, #396]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	4a62      	ldr	r2, [pc, #392]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003746:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003748:	e01c      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800374a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374e:	3308      	adds	r3, #8
 8003750:	2100      	movs	r1, #0
 8003752:	4618      	mov	r0, r3
 8003754:	f001 f928 	bl	80049a8 <RCCEx_PLL2_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800375e:	e011      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003764:	3328      	adds	r3, #40	@ 0x28
 8003766:	2100      	movs	r1, #0
 8003768:	4618      	mov	r0, r3
 800376a:	f001 f9cf 	bl	8004b0c <RCCEx_PLL3_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003774:	e006      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800377c:	e002      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800377e:	bf00      	nop
 8003780:	e000      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800378c:	4b4f      	ldr	r3, [pc, #316]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800378e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003790:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379a:	4a4c      	ldr	r2, [pc, #304]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800379c:	430b      	orrs	r3, r1
 800379e:	6513      	str	r3, [r2, #80]	@ 0x50
 80037a0:	e003      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80037b6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80037ba:	2300      	movs	r3, #0
 80037bc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80037c0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80037c4:	460b      	mov	r3, r1
 80037c6:	4313      	orrs	r3, r2
 80037c8:	d053      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037d6:	d035      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80037d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037dc:	d82e      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80037e2:	d031      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80037e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80037e8:	d828      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ee:	d01a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80037f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037f4:	d822      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80037fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037fe:	d007      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003800:	e01c      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003802:	4b32      	ldr	r3, [pc, #200]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003806:	4a31      	ldr	r2, [pc, #196]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800380c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800380e:	e01c      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003814:	3308      	adds	r3, #8
 8003816:	2100      	movs	r1, #0
 8003818:	4618      	mov	r0, r3
 800381a:	f001 f8c5 	bl	80049a8 <RCCEx_PLL2_Config>
 800381e:	4603      	mov	r3, r0
 8003820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003824:	e011      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382a:	3328      	adds	r3, #40	@ 0x28
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f001 f96c 	bl	8004b0c <RCCEx_PLL3_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800383a:	e006      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003842:	e002      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003844:	bf00      	nop
 8003846:	e000      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800384a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10b      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003852:	4b1e      	ldr	r3, [pc, #120]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003856:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800385a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003862:	4a1a      	ldr	r2, [pc, #104]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003864:	430b      	orrs	r3, r1
 8003866:	6593      	str	r3, [r2, #88]	@ 0x58
 8003868:	e003      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800386e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800387e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003882:	2300      	movs	r3, #0
 8003884:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003888:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800388c:	460b      	mov	r3, r1
 800388e:	4313      	orrs	r3, r2
 8003890:	d056      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003896:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800389a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800389e:	d038      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80038a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038a4:	d831      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038aa:	d034      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80038ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038b0:	d82b      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038b6:	d01d      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80038b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038bc:	d825      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d006      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80038c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80038c8:	e01f      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038ca:	bf00      	nop
 80038cc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d0:	4ba2      	ldr	r3, [pc, #648]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	4aa1      	ldr	r2, [pc, #644]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038dc:	e01c      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e2:	3308      	adds	r3, #8
 80038e4:	2100      	movs	r1, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 f85e 	bl	80049a8 <RCCEx_PLL2_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038f2:	e011      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f8:	3328      	adds	r3, #40	@ 0x28
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 f905 	bl	8004b0c <RCCEx_PLL3_Config>
 8003902:	4603      	mov	r3, r0
 8003904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003908:	e006      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003910:	e002      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003912:	bf00      	nop
 8003914:	e000      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003916:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10b      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003920:	4b8e      	ldr	r3, [pc, #568]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003924:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003930:	4a8a      	ldr	r2, [pc, #552]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003932:	430b      	orrs	r3, r1
 8003934:	6593      	str	r3, [r2, #88]	@ 0x58
 8003936:	e003      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800393c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800394c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003956:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800395a:	460b      	mov	r3, r1
 800395c:	4313      	orrs	r3, r2
 800395e:	d03a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003966:	2b30      	cmp	r3, #48	@ 0x30
 8003968:	d01f      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x416>
 800396a:	2b30      	cmp	r3, #48	@ 0x30
 800396c:	d819      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800396e:	2b20      	cmp	r3, #32
 8003970:	d00c      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003972:	2b20      	cmp	r3, #32
 8003974:	d815      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d019      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800397a:	2b10      	cmp	r3, #16
 800397c:	d111      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800397e:	4b77      	ldr	r3, [pc, #476]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003982:	4a76      	ldr	r2, [pc, #472]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003988:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800398a:	e011      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	3308      	adds	r3, #8
 8003992:	2102      	movs	r1, #2
 8003994:	4618      	mov	r0, r3
 8003996:	f001 f807 	bl	80049a8 <RCCEx_PLL2_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039a0:	e006      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039a8:	e002      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039aa:	bf00      	nop
 80039ac:	e000      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039b8:	4b68      	ldr	r3, [pc, #416]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039bc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80039c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c6:	4a65      	ldr	r2, [pc, #404]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039c8:	430b      	orrs	r3, r1
 80039ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039cc:	e003      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039de:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80039e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80039e6:	2300      	movs	r3, #0
 80039e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80039ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4313      	orrs	r3, r2
 80039f4:	d051      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80039f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a00:	d035      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a06:	d82e      	bhi.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a0c:	d031      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a12:	d828      	bhi.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a18:	d01a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a1e:	d822      	bhi.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a28:	d007      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a2a:	e01c      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a30:	4a4a      	ldr	r2, [pc, #296]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a38:	e01c      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3e:	3308      	adds	r3, #8
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 ffb0 	bl	80049a8 <RCCEx_PLL2_Config>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a4e:	e011      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a54:	3328      	adds	r3, #40	@ 0x28
 8003a56:	2100      	movs	r1, #0
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f001 f857 	bl	8004b0c <RCCEx_PLL3_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a64:	e006      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a6c:	e002      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a6e:	bf00      	nop
 8003a70:	e000      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10a      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a7c:	4b37      	ldr	r3, [pc, #220]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a80:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a8a:	4a34      	ldr	r2, [pc, #208]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a90:	e003      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003ab0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	d056      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ac4:	d033      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003ac6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aca:	d82c      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003acc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ad0:	d02f      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003ad2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ad6:	d826      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ad8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003adc:	d02b      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003ade:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ae2:	d820      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ae8:	d012      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003aea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aee:	d81a      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d022      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af8:	d115      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afe:	3308      	adds	r3, #8
 8003b00:	2101      	movs	r1, #1
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 ff50 	bl	80049a8 <RCCEx_PLL2_Config>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b0e:	e015      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b14:	3328      	adds	r3, #40	@ 0x28
 8003b16:	2101      	movs	r1, #1
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fff7 	bl	8004b0c <RCCEx_PLL3_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b24:	e00a      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b2c:	e006      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b2e:	bf00      	nop
 8003b30:	e004      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b32:	bf00      	nop
 8003b34:	e002      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b36:	bf00      	nop
 8003b38:	e000      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10d      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b44:	4b05      	ldr	r3, [pc, #20]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b48:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b52:	4a02      	ldr	r2, [pc, #8]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b58:	e006      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b5a:	bf00      	nop
 8003b5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b70:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b7e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4313      	orrs	r3, r2
 8003b86:	d055      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b94:	d033      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b9a:	d82c      	bhi.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba0:	d02f      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba6:	d826      	bhi.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ba8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bac:	d02b      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003bae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bb2:	d820      	bhi.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bb8:	d012      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003bba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bbe:	d81a      	bhi.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d022      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003bc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bc8:	d115      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bce:	3308      	adds	r3, #8
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fee8 	bl	80049a8 <RCCEx_PLL2_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bde:	e015      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be4:	3328      	adds	r3, #40	@ 0x28
 8003be6:	2101      	movs	r1, #1
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 ff8f 	bl	8004b0c <RCCEx_PLL3_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bf4:	e00a      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bfc:	e006      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bfe:	bf00      	nop
 8003c00:	e004      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10b      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c14:	4ba3      	ldr	r3, [pc, #652]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c18:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c24:	4a9f      	ldr	r2, [pc, #636]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c26:	430b      	orrs	r3, r1
 8003c28:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c2a:	e003      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c44:	2300      	movs	r3, #0
 8003c46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4313      	orrs	r3, r2
 8003c52:	d037      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c5e:	d00e      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003c60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c64:	d816      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d018      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c6e:	d111      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c70:	4b8c      	ldr	r3, [pc, #560]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c74:	4a8b      	ldr	r2, [pc, #556]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c7c:	e00f      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c82:	3308      	adds	r3, #8
 8003c84:	2101      	movs	r1, #1
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fe8e 	bl	80049a8 <RCCEx_PLL2_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c92:	e004      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c9a:	e000      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10a      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ca6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003caa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb4:	4a7b      	ldr	r2, [pc, #492]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cba:	e003      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003cda:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	d039      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d81c      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003cee:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf4:	08003d31 	.word	0x08003d31
 8003cf8:	08003d05 	.word	0x08003d05
 8003cfc:	08003d13 	.word	0x08003d13
 8003d00:	08003d31 	.word	0x08003d31
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d04:	4b67      	ldr	r3, [pc, #412]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d08:	4a66      	ldr	r2, [pc, #408]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d10:	e00f      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d16:	3308      	adds	r3, #8
 8003d18:	2102      	movs	r1, #2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fe44 	bl	80049a8 <RCCEx_PLL2_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d26:	e004      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d2e:	e000      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d3a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3e:	f023 0103 	bic.w	r1, r3, #3
 8003d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d48:	4a56      	ldr	r2, [pc, #344]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d4e:	e003      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003d64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d6e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d72:	460b      	mov	r3, r1
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f000 809f 	beq.w	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d7a:	4b4b      	ldr	r3, [pc, #300]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a4a      	ldr	r2, [pc, #296]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d86:	f7fc fdd3 	bl	8000930 <HAL_GetTick>
 8003d8a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d8e:	e00b      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d90:	f7fc fdce 	bl	8000930 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b64      	cmp	r3, #100	@ 0x64
 8003d9e:	d903      	bls.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003da6:	e005      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003da8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0ed      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d179      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003dbc:	4b39      	ldr	r3, [pc, #228]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dbe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dc8:	4053      	eors	r3, r2
 8003dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d015      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd2:	4b34      	ldr	r3, [pc, #208]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dda:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dde:	4b31      	ldr	r3, [pc, #196]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de2:	4a30      	ldr	r2, [pc, #192]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dea:	4b2e      	ldr	r3, [pc, #184]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dee:	4a2d      	ldr	r2, [pc, #180]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003df6:	4a2b      	ldr	r2, [pc, #172]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dfc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e0a:	d118      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fc fd90 	bl	8000930 <HAL_GetTick>
 8003e10:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e14:	e00d      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e16:	f7fc fd8b 	bl	8000930 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e20:	1ad2      	subs	r2, r2, r3
 8003e22:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d903      	bls.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003e30:	e005      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e32:	4b1c      	ldr	r3, [pc, #112]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0eb      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d129      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e56:	d10e      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003e58:	4b12      	ldr	r3, [pc, #72]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e68:	091a      	lsrs	r2, r3, #4
 8003e6a:	4b10      	ldr	r3, [pc, #64]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	4a0d      	ldr	r2, [pc, #52]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6113      	str	r3, [r2, #16]
 8003e74:	e005      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e76:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e7c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e80:	6113      	str	r3, [r2, #16]
 8003e82:	4b08      	ldr	r3, [pc, #32]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e84:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e92:	4a04      	ldr	r2, [pc, #16]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e98:	e00e      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003ea2:	e009      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ea4:	58024400 	.word	0x58024400
 8003ea8:	58024800 	.word	0x58024800
 8003eac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	f002 0301 	and.w	r3, r2, #1
 8003ec4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ece:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f000 8089 	beq.w	8003fec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ee0:	2b28      	cmp	r3, #40	@ 0x28
 8003ee2:	d86b      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8003eec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003fc5 	.word	0x08003fc5
 8003ef0:	08003fbd 	.word	0x08003fbd
 8003ef4:	08003fbd 	.word	0x08003fbd
 8003ef8:	08003fbd 	.word	0x08003fbd
 8003efc:	08003fbd 	.word	0x08003fbd
 8003f00:	08003fbd 	.word	0x08003fbd
 8003f04:	08003fbd 	.word	0x08003fbd
 8003f08:	08003fbd 	.word	0x08003fbd
 8003f0c:	08003f91 	.word	0x08003f91
 8003f10:	08003fbd 	.word	0x08003fbd
 8003f14:	08003fbd 	.word	0x08003fbd
 8003f18:	08003fbd 	.word	0x08003fbd
 8003f1c:	08003fbd 	.word	0x08003fbd
 8003f20:	08003fbd 	.word	0x08003fbd
 8003f24:	08003fbd 	.word	0x08003fbd
 8003f28:	08003fbd 	.word	0x08003fbd
 8003f2c:	08003fa7 	.word	0x08003fa7
 8003f30:	08003fbd 	.word	0x08003fbd
 8003f34:	08003fbd 	.word	0x08003fbd
 8003f38:	08003fbd 	.word	0x08003fbd
 8003f3c:	08003fbd 	.word	0x08003fbd
 8003f40:	08003fbd 	.word	0x08003fbd
 8003f44:	08003fbd 	.word	0x08003fbd
 8003f48:	08003fbd 	.word	0x08003fbd
 8003f4c:	08003fc5 	.word	0x08003fc5
 8003f50:	08003fbd 	.word	0x08003fbd
 8003f54:	08003fbd 	.word	0x08003fbd
 8003f58:	08003fbd 	.word	0x08003fbd
 8003f5c:	08003fbd 	.word	0x08003fbd
 8003f60:	08003fbd 	.word	0x08003fbd
 8003f64:	08003fbd 	.word	0x08003fbd
 8003f68:	08003fbd 	.word	0x08003fbd
 8003f6c:	08003fc5 	.word	0x08003fc5
 8003f70:	08003fbd 	.word	0x08003fbd
 8003f74:	08003fbd 	.word	0x08003fbd
 8003f78:	08003fbd 	.word	0x08003fbd
 8003f7c:	08003fbd 	.word	0x08003fbd
 8003f80:	08003fbd 	.word	0x08003fbd
 8003f84:	08003fbd 	.word	0x08003fbd
 8003f88:	08003fbd 	.word	0x08003fbd
 8003f8c:	08003fc5 	.word	0x08003fc5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f94:	3308      	adds	r3, #8
 8003f96:	2101      	movs	r1, #1
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fd05 	bl	80049a8 <RCCEx_PLL2_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fa4:	e00f      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003faa:	3328      	adds	r3, #40	@ 0x28
 8003fac:	2101      	movs	r1, #1
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fdac 	bl	8004b0c <RCCEx_PLL3_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fba:	e004      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003fce:	4bbf      	ldr	r3, [pc, #764]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fdc:	4abb      	ldr	r2, [pc, #748]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fde:	430b      	orrs	r3, r1
 8003fe0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fe2:	e003      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f002 0302 	and.w	r3, r2, #2
 8003ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004002:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004006:	460b      	mov	r3, r1
 8004008:	4313      	orrs	r3, r2
 800400a:	d041      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800400c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004010:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004012:	2b05      	cmp	r3, #5
 8004014:	d824      	bhi.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004016:	a201      	add	r2, pc, #4	@ (adr r2, 800401c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401c:	08004069 	.word	0x08004069
 8004020:	08004035 	.word	0x08004035
 8004024:	0800404b 	.word	0x0800404b
 8004028:	08004069 	.word	0x08004069
 800402c:	08004069 	.word	0x08004069
 8004030:	08004069 	.word	0x08004069
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004038:	3308      	adds	r3, #8
 800403a:	2101      	movs	r1, #1
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fcb3 	bl	80049a8 <RCCEx_PLL2_Config>
 8004042:	4603      	mov	r3, r0
 8004044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004048:	e00f      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800404a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404e:	3328      	adds	r3, #40	@ 0x28
 8004050:	2101      	movs	r1, #1
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fd5a 	bl	8004b0c <RCCEx_PLL3_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800405e:	e004      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004066:	e000      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800406a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004072:	4b96      	ldr	r3, [pc, #600]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004076:	f023 0107 	bic.w	r1, r3, #7
 800407a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004080:	4a92      	ldr	r2, [pc, #584]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004082:	430b      	orrs	r3, r1
 8004084:	6553      	str	r3, [r2, #84]	@ 0x54
 8004086:	e003      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800408c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f002 0304 	and.w	r3, r2, #4
 800409c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040a0:	2300      	movs	r3, #0
 80040a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4313      	orrs	r3, r2
 80040ae:	d044      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80040b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040b8:	2b05      	cmp	r3, #5
 80040ba:	d825      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80040bc:	a201      	add	r2, pc, #4	@ (adr r2, 80040c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	08004111 	.word	0x08004111
 80040c8:	080040dd 	.word	0x080040dd
 80040cc:	080040f3 	.word	0x080040f3
 80040d0:	08004111 	.word	0x08004111
 80040d4:	08004111 	.word	0x08004111
 80040d8:	08004111 	.word	0x08004111
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e0:	3308      	adds	r3, #8
 80040e2:	2101      	movs	r1, #1
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fc5f 	bl	80049a8 <RCCEx_PLL2_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040f0:	e00f      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f6:	3328      	adds	r3, #40	@ 0x28
 80040f8:	2101      	movs	r1, #1
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fd06 	bl	8004b0c <RCCEx_PLL3_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004106:	e004      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800410e:	e000      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10b      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800411a:	4b6c      	ldr	r3, [pc, #432]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411e:	f023 0107 	bic.w	r1, r3, #7
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800412a:	4a68      	ldr	r2, [pc, #416]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800412c:	430b      	orrs	r3, r1
 800412e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004130:	e003      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800413a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004142:	f002 0320 	and.w	r3, r2, #32
 8004146:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800414a:	2300      	movs	r3, #0
 800414c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004150:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004154:	460b      	mov	r3, r1
 8004156:	4313      	orrs	r3, r2
 8004158:	d055      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800415a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004162:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004166:	d033      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004168:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800416c:	d82c      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800416e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004172:	d02f      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004178:	d826      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800417a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800417e:	d02b      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004180:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004184:	d820      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800418a:	d012      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800418c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004190:	d81a      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d022      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004196:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800419a:	d115      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a0:	3308      	adds	r3, #8
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fbff 	bl	80049a8 <RCCEx_PLL2_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041b0:	e015      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b6:	3328      	adds	r3, #40	@ 0x28
 80041b8:	2102      	movs	r1, #2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fca6 	bl	8004b0c <RCCEx_PLL3_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041c6:	e00a      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041ce:	e006      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041d0:	bf00      	nop
 80041d2:	e004      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041d4:	bf00      	nop
 80041d6:	e002      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041d8:	bf00      	nop
 80041da:	e000      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10b      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041e6:	4b39      	ldr	r3, [pc, #228]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80041ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f6:	4a35      	ldr	r2, [pc, #212]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041f8:	430b      	orrs	r3, r1
 80041fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80041fc:	e003      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004212:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004216:	2300      	movs	r3, #0
 8004218:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800421c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004220:	460b      	mov	r3, r1
 8004222:	4313      	orrs	r3, r2
 8004224:	d058      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800422e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004232:	d033      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004234:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004238:	d82c      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800423a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800423e:	d02f      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004244:	d826      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004246:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800424a:	d02b      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800424c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004250:	d820      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004252:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004256:	d012      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004258:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800425c:	d81a      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d022      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004266:	d115      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426c:	3308      	adds	r3, #8
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fb99 	bl	80049a8 <RCCEx_PLL2_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800427c:	e015      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800427e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004282:	3328      	adds	r3, #40	@ 0x28
 8004284:	2102      	movs	r1, #2
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fc40 	bl	8004b0c <RCCEx_PLL3_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004292:	e00a      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800429a:	e006      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800429c:	bf00      	nop
 800429e:	e004      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042a0:	bf00      	nop
 80042a2:	e002      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042a4:	bf00      	nop
 80042a6:	e000      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10e      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042b2:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042c2:	4a02      	ldr	r2, [pc, #8]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042c8:	e006      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80042ca:	bf00      	nop
 80042cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80042e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042e8:	2300      	movs	r3, #0
 80042ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80042f2:	460b      	mov	r3, r1
 80042f4:	4313      	orrs	r3, r2
 80042f6:	d055      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80042f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004300:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004304:	d033      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004306:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800430a:	d82c      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800430c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004310:	d02f      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004312:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004316:	d826      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004318:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800431c:	d02b      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800431e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004322:	d820      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004324:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004328:	d012      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800432a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800432e:	d81a      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d022      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004334:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004338:	d115      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800433a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433e:	3308      	adds	r3, #8
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fb30 	bl	80049a8 <RCCEx_PLL2_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800434e:	e015      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004354:	3328      	adds	r3, #40	@ 0x28
 8004356:	2102      	movs	r1, #2
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fbd7 	bl	8004b0c <RCCEx_PLL3_Config>
 800435e:	4603      	mov	r3, r0
 8004360:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004364:	e00a      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800436c:	e006      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800436e:	bf00      	nop
 8004370:	e004      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004372:	bf00      	nop
 8004374:	e002      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004376:	bf00      	nop
 8004378:	e000      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800437a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800437c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10b      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004384:	4ba1      	ldr	r3, [pc, #644]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004388:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800438c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004390:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004394:	4a9d      	ldr	r2, [pc, #628]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004396:	430b      	orrs	r3, r1
 8004398:	6593      	str	r3, [r2, #88]	@ 0x58
 800439a:	e003      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	f002 0308 	and.w	r3, r2, #8
 80043b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043b4:	2300      	movs	r3, #0
 80043b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80043be:	460b      	mov	r3, r1
 80043c0:	4313      	orrs	r3, r2
 80043c2:	d01e      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80043c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043d0:	d10c      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d6:	3328      	adds	r3, #40	@ 0x28
 80043d8:	2102      	movs	r1, #2
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fb96 	bl	8004b0c <RCCEx_PLL3_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043ec:	4b87      	ldr	r3, [pc, #540]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043fc:	4a83      	ldr	r2, [pc, #524]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043fe:	430b      	orrs	r3, r1
 8004400:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	f002 0310 	and.w	r3, r2, #16
 800440e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004412:	2300      	movs	r3, #0
 8004414:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004418:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800441c:	460b      	mov	r3, r1
 800441e:	4313      	orrs	r3, r2
 8004420:	d01e      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004426:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800442a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800442e:	d10c      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004434:	3328      	adds	r3, #40	@ 0x28
 8004436:	2102      	movs	r1, #2
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fb67 	bl	8004b0c <RCCEx_PLL3_Config>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800444a:	4b70      	ldr	r3, [pc, #448]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800444c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004456:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800445a:	4a6c      	ldr	r2, [pc, #432]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800445c:	430b      	orrs	r3, r1
 800445e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800446c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004470:	2300      	movs	r3, #0
 8004472:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004476:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800447a:	460b      	mov	r3, r1
 800447c:	4313      	orrs	r3, r2
 800447e:	d03e      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004484:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004488:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800448c:	d022      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800448e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004492:	d81b      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800449c:	d00b      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800449e:	e015      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a4:	3308      	adds	r3, #8
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fa7d 	bl	80049a8 <RCCEx_PLL2_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044b4:	e00f      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ba:	3328      	adds	r3, #40	@ 0x28
 80044bc:	2102      	movs	r1, #2
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fb24 	bl	8004b0c <RCCEx_PLL3_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044ca:	e004      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044d2:	e000      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80044d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10b      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044de:	4b4b      	ldr	r3, [pc, #300]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80044e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044ee:	4a47      	ldr	r2, [pc, #284]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80044f4:	e003      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004506:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800450a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800450c:	2300      	movs	r3, #0
 800450e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004510:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004514:	460b      	mov	r3, r1
 8004516:	4313      	orrs	r3, r2
 8004518:	d03b      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800451a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004522:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004526:	d01f      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004528:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800452c:	d818      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800452e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004532:	d003      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004534:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004538:	d007      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800453a:	e011      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800453c:	4b33      	ldr	r3, [pc, #204]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800453e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004540:	4a32      	ldr	r2, [pc, #200]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004546:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004548:	e00f      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	3328      	adds	r3, #40	@ 0x28
 8004550:	2101      	movs	r1, #1
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fada 	bl	8004b0c <RCCEx_PLL3_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800455e:	e004      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004566:	e000      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800456a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10b      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004572:	4b26      	ldr	r3, [pc, #152]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004576:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004582:	4a22      	ldr	r2, [pc, #136]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004584:	430b      	orrs	r3, r1
 8004586:	6553      	str	r3, [r2, #84]	@ 0x54
 8004588:	e003      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800458e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800459e:	673b      	str	r3, [r7, #112]	@ 0x70
 80045a0:	2300      	movs	r3, #0
 80045a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80045a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80045a8:	460b      	mov	r3, r1
 80045aa:	4313      	orrs	r3, r2
 80045ac:	d034      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045bc:	d007      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80045be:	e011      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c0:	4b12      	ldr	r3, [pc, #72]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c4:	4a11      	ldr	r2, [pc, #68]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045cc:	e00e      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d2:	3308      	adds	r3, #8
 80045d4:	2102      	movs	r1, #2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 f9e6 	bl	80049a8 <RCCEx_PLL2_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045e2:	e003      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10d      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045f4:	4b05      	ldr	r3, [pc, #20]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004602:	4a02      	ldr	r2, [pc, #8]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004604:	430b      	orrs	r3, r1
 8004606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004608:	e006      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800460a:	bf00      	nop
 800460c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004624:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004626:	2300      	movs	r3, #0
 8004628:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800462a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800462e:	460b      	mov	r3, r1
 8004630:	4313      	orrs	r3, r2
 8004632:	d00c      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004638:	3328      	adds	r3, #40	@ 0x28
 800463a:	2102      	movs	r1, #2
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fa65 	bl	8004b0c <RCCEx_PLL3_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800465a:	663b      	str	r3, [r7, #96]	@ 0x60
 800465c:	2300      	movs	r3, #0
 800465e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004660:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004664:	460b      	mov	r3, r1
 8004666:	4313      	orrs	r3, r2
 8004668:	d038      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004672:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004676:	d018      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004678:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800467c:	d811      	bhi.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800467e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004682:	d014      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004688:	d80b      	bhi.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800468a:	2b00      	cmp	r3, #0
 800468c:	d011      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800468e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004692:	d106      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004694:	4bc3      	ldr	r3, [pc, #780]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	4ac2      	ldr	r2, [pc, #776]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800469a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800469e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80046a0:	e008      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046a8:	e004      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046aa:	bf00      	nop
 80046ac:	e002      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046ae:	bf00      	nop
 80046b0:	e000      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10b      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046bc:	4bb9      	ldr	r3, [pc, #740]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046cc:	4ab5      	ldr	r2, [pc, #724]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ce:	430b      	orrs	r3, r1
 80046d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80046d2:	e003      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80046e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046ea:	2300      	movs	r3, #0
 80046ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80046f2:	460b      	mov	r3, r1
 80046f4:	4313      	orrs	r3, r2
 80046f6:	d009      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046f8:	4baa      	ldr	r3, [pc, #680]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004706:	4aa7      	ldr	r2, [pc, #668]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004708:	430b      	orrs	r3, r1
 800470a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800470c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004718:	653b      	str	r3, [r7, #80]	@ 0x50
 800471a:	2300      	movs	r3, #0
 800471c:	657b      	str	r3, [r7, #84]	@ 0x54
 800471e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004722:	460b      	mov	r3, r1
 8004724:	4313      	orrs	r3, r2
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004728:	4b9e      	ldr	r3, [pc, #632]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004734:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004738:	4a9a      	ldr	r2, [pc, #616]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800473a:	430b      	orrs	r3, r1
 800473c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800474a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800474c:	2300      	movs	r3, #0
 800474e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004750:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004754:	460b      	mov	r3, r1
 8004756:	4313      	orrs	r3, r2
 8004758:	d009      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800475a:	4b92      	ldr	r3, [pc, #584]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800475c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800475e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004768:	4a8e      	ldr	r2, [pc, #568]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800476a:	430b      	orrs	r3, r1
 800476c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800477a:	643b      	str	r3, [r7, #64]	@ 0x40
 800477c:	2300      	movs	r3, #0
 800477e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004780:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004784:	460b      	mov	r3, r1
 8004786:	4313      	orrs	r3, r2
 8004788:	d00e      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800478a:	4b86      	ldr	r3, [pc, #536]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	4a85      	ldr	r2, [pc, #532]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004790:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004794:	6113      	str	r3, [r2, #16]
 8004796:	4b83      	ldr	r3, [pc, #524]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004798:	6919      	ldr	r1, [r3, #16]
 800479a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047a2:	4a80      	ldr	r2, [pc, #512]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047a4:	430b      	orrs	r3, r1
 80047a6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80047b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047b6:	2300      	movs	r3, #0
 80047b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80047be:	460b      	mov	r3, r1
 80047c0:	4313      	orrs	r3, r2
 80047c2:	d009      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047c4:	4b77      	ldr	r3, [pc, #476]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80047cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d2:	4a74      	ldr	r2, [pc, #464]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047d4:	430b      	orrs	r3, r1
 80047d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80047e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80047e6:	2300      	movs	r3, #0
 80047e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80047ee:	460b      	mov	r3, r1
 80047f0:	4313      	orrs	r3, r2
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047f4:	4b6b      	ldr	r3, [pc, #428]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004800:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004804:	4a67      	ldr	r2, [pc, #412]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004806:	430b      	orrs	r3, r1
 8004808:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	2100      	movs	r1, #0
 8004814:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800481c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004820:	460b      	mov	r3, r1
 8004822:	4313      	orrs	r3, r2
 8004824:	d011      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482a:	3308      	adds	r3, #8
 800482c:	2100      	movs	r1, #0
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f8ba 	bl	80049a8 <RCCEx_PLL2_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800483a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004846:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	2100      	movs	r1, #0
 8004854:	6239      	str	r1, [r7, #32]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	627b      	str	r3, [r7, #36]	@ 0x24
 800485c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004860:	460b      	mov	r3, r1
 8004862:	4313      	orrs	r3, r2
 8004864:	d011      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486a:	3308      	adds	r3, #8
 800486c:	2101      	movs	r1, #1
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f89a 	bl	80049a8 <RCCEx_PLL2_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800487a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004886:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	2100      	movs	r1, #0
 8004894:	61b9      	str	r1, [r7, #24]
 8004896:	f003 0304 	and.w	r3, r3, #4
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048a0:	460b      	mov	r3, r1
 80048a2:	4313      	orrs	r3, r2
 80048a4:	d011      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048aa:	3308      	adds	r3, #8
 80048ac:	2102      	movs	r1, #2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f87a 	bl	80049a8 <RCCEx_PLL2_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	2100      	movs	r1, #0
 80048d4:	6139      	str	r1, [r7, #16]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048e0:	460b      	mov	r3, r1
 80048e2:	4313      	orrs	r3, r2
 80048e4:	d011      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ea:	3328      	adds	r3, #40	@ 0x28
 80048ec:	2100      	movs	r1, #0
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 f90c 	bl	8004b0c <RCCEx_PLL3_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80048fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004906:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800490a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	2100      	movs	r1, #0
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004920:	460b      	mov	r3, r1
 8004922:	4313      	orrs	r3, r2
 8004924:	d011      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492a:	3328      	adds	r3, #40	@ 0x28
 800492c:	2101      	movs	r1, #1
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f8ec 	bl	8004b0c <RCCEx_PLL3_Config>
 8004934:	4603      	mov	r3, r0
 8004936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800493a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	2100      	movs	r1, #0
 8004954:	6039      	str	r1, [r7, #0]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	607b      	str	r3, [r7, #4]
 800495c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004960:	460b      	mov	r3, r1
 8004962:	4313      	orrs	r3, r2
 8004964:	d011      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496a:	3328      	adds	r3, #40	@ 0x28
 800496c:	2102      	movs	r1, #2
 800496e:	4618      	mov	r0, r3
 8004970:	f000 f8cc 	bl	8004b0c <RCCEx_PLL3_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800497a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800498a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e000      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
}
 8004998:	4618      	mov	r0, r3
 800499a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800499e:	46bd      	mov	sp, r7
 80049a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a4:	58024400 	.word	0x58024400

080049a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049b6:	4b53      	ldr	r3, [pc, #332]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 80049b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d101      	bne.n	80049c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e099      	b.n	8004afa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a4e      	ldr	r2, [pc, #312]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 80049cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d2:	f7fb ffad 	bl	8000930 <HAL_GetTick>
 80049d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049d8:	e008      	b.n	80049ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049da:	f7fb ffa9 	bl	8000930 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e086      	b.n	8004afa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049ec:	4b45      	ldr	r3, [pc, #276]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f0      	bne.n	80049da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80049f8:	4b42      	ldr	r3, [pc, #264]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 80049fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	031b      	lsls	r3, r3, #12
 8004a06:	493f      	ldr	r1, [pc, #252]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	025b      	lsls	r3, r3, #9
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	041b      	lsls	r3, r3, #16
 8004a2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	061b      	lsls	r3, r3, #24
 8004a38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a3c:	4931      	ldr	r1, [pc, #196]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a42:	4b30      	ldr	r3, [pc, #192]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	492d      	ldr	r1, [pc, #180]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a54:	4b2b      	ldr	r3, [pc, #172]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	f023 0220 	bic.w	r2, r3, #32
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	4928      	ldr	r1, [pc, #160]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a66:	4b27      	ldr	r3, [pc, #156]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6a:	4a26      	ldr	r2, [pc, #152]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a6c:	f023 0310 	bic.w	r3, r3, #16
 8004a70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a72:	4b24      	ldr	r3, [pc, #144]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a76:	4b24      	ldr	r3, [pc, #144]	@ (8004b08 <RCCEx_PLL2_Config+0x160>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	69d2      	ldr	r2, [r2, #28]
 8004a7e:	00d2      	lsls	r2, r2, #3
 8004a80:	4920      	ldr	r1, [pc, #128]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a86:	4b1f      	ldr	r3, [pc, #124]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a8c:	f043 0310 	orr.w	r3, r3, #16
 8004a90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a98:	4b1a      	ldr	r3, [pc, #104]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004aa4:	e00f      	b.n	8004ac6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d106      	bne.n	8004aba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004aac:	4b15      	ldr	r3, [pc, #84]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab0:	4a14      	ldr	r2, [pc, #80]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ab8:	e005      	b.n	8004ac6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004aba:	4b12      	ldr	r3, [pc, #72]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abe:	4a11      	ldr	r2, [pc, #68]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004ac0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a0e      	ldr	r2, [pc, #56]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004acc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad2:	f7fb ff2d 	bl	8000930 <HAL_GetTick>
 8004ad6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ad8:	e008      	b.n	8004aec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ada:	f7fb ff29 	bl	8000930 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e006      	b.n	8004afa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004aec:	4b05      	ldr	r3, [pc, #20]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	58024400 	.word	0x58024400
 8004b08:	ffff0007 	.word	0xffff0007

08004b0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b1a:	4b53      	ldr	r3, [pc, #332]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d101      	bne.n	8004b2a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e099      	b.n	8004c5e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b2a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a4e      	ldr	r2, [pc, #312]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b36:	f7fb fefb 	bl	8000930 <HAL_GetTick>
 8004b3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b3c:	e008      	b.n	8004b50 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b3e:	f7fb fef7 	bl	8000930 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e086      	b.n	8004c5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b50:	4b45      	ldr	r3, [pc, #276]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f0      	bne.n	8004b3e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b5c:	4b42      	ldr	r3, [pc, #264]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b60:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	051b      	lsls	r3, r3, #20
 8004b6a:	493f      	ldr	r1, [pc, #252]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	025b      	lsls	r3, r3, #9
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	041b      	lsls	r3, r3, #16
 8004b8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	061b      	lsls	r3, r3, #24
 8004b9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ba0:	4931      	ldr	r1, [pc, #196]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ba6:	4b30      	ldr	r3, [pc, #192]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004baa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	492d      	ldr	r1, [pc, #180]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	4928      	ldr	r1, [pc, #160]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004bca:	4b27      	ldr	r3, [pc, #156]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bce:	4a26      	ldr	r2, [pc, #152]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004bd6:	4b24      	ldr	r3, [pc, #144]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bda:	4b24      	ldr	r3, [pc, #144]	@ (8004c6c <RCCEx_PLL3_Config+0x160>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	69d2      	ldr	r2, [r2, #28]
 8004be2:	00d2      	lsls	r2, r2, #3
 8004be4:	4920      	ldr	r1, [pc, #128]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004bea:	4b1f      	ldr	r3, [pc, #124]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bee:	4a1e      	ldr	r2, [pc, #120]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d106      	bne.n	8004c0a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c00:	4a19      	ldr	r2, [pc, #100]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c08:	e00f      	b.n	8004c2a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d106      	bne.n	8004c1e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c10:	4b15      	ldr	r3, [pc, #84]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c14:	4a14      	ldr	r2, [pc, #80]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c1c:	e005      	b.n	8004c2a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c1e:	4b12      	ldr	r3, [pc, #72]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	4a11      	ldr	r2, [pc, #68]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c36:	f7fb fe7b 	bl	8000930 <HAL_GetTick>
 8004c3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c3c:	e008      	b.n	8004c50 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c3e:	f7fb fe77 	bl	8000930 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e006      	b.n	8004c5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c50:	4b05      	ldr	r3, [pc, #20]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	58024400 	.word	0x58024400
 8004c6c:	ffff0007 	.word	0xffff0007

08004c70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c70:	b084      	sub	sp, #16
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	f107 001c 	add.w	r0, r7, #28
 8004c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d121      	bne.n	8004cce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8004d4c <USB_CoreInit+0xdc>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f001 fafa 	bl	80062bc <USB_CoreReset>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	73fb      	strb	r3, [r7, #15]
 8004ccc:	e01b      	b.n	8004d06 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f001 faee 	bl	80062bc <USB_CoreReset>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ce4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	639a      	str	r2, [r3, #56]	@ 0x38
 8004cf8:	e005      	b.n	8004d06 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d06:	7fbb      	ldrb	r3, [r7, #30]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d116      	bne.n	8004d3a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d50 <USB_CoreInit+0xe0>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f043 0206 	orr.w	r2, r3, #6
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f043 0220 	orr.w	r2, r3, #32
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d46:	b004      	add	sp, #16
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	ffbdffbf 	.word	0xffbdffbf
 8004d50:	03ee0000 	.word	0x03ee0000

08004d54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d165      	bne.n	8004e34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4a41      	ldr	r2, [pc, #260]	@ (8004e70 <USB_SetTurnaroundTime+0x11c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d906      	bls.n	8004d7e <USB_SetTurnaroundTime+0x2a>
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4a40      	ldr	r2, [pc, #256]	@ (8004e74 <USB_SetTurnaroundTime+0x120>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d202      	bcs.n	8004d7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d78:	230f      	movs	r3, #15
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	e062      	b.n	8004e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	4a3c      	ldr	r2, [pc, #240]	@ (8004e74 <USB_SetTurnaroundTime+0x120>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d306      	bcc.n	8004d94 <USB_SetTurnaroundTime+0x40>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4a3b      	ldr	r2, [pc, #236]	@ (8004e78 <USB_SetTurnaroundTime+0x124>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d202      	bcs.n	8004d94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d8e:	230e      	movs	r3, #14
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	e057      	b.n	8004e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4a38      	ldr	r2, [pc, #224]	@ (8004e78 <USB_SetTurnaroundTime+0x124>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d306      	bcc.n	8004daa <USB_SetTurnaroundTime+0x56>
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4a37      	ldr	r2, [pc, #220]	@ (8004e7c <USB_SetTurnaroundTime+0x128>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d202      	bcs.n	8004daa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004da4:	230d      	movs	r3, #13
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	e04c      	b.n	8004e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	4a33      	ldr	r2, [pc, #204]	@ (8004e7c <USB_SetTurnaroundTime+0x128>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d306      	bcc.n	8004dc0 <USB_SetTurnaroundTime+0x6c>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4a32      	ldr	r2, [pc, #200]	@ (8004e80 <USB_SetTurnaroundTime+0x12c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d802      	bhi.n	8004dc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004dba:	230c      	movs	r3, #12
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	e041      	b.n	8004e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8004e80 <USB_SetTurnaroundTime+0x12c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d906      	bls.n	8004dd6 <USB_SetTurnaroundTime+0x82>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4a2e      	ldr	r2, [pc, #184]	@ (8004e84 <USB_SetTurnaroundTime+0x130>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d802      	bhi.n	8004dd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004dd0:	230b      	movs	r3, #11
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	e036      	b.n	8004e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4a2a      	ldr	r2, [pc, #168]	@ (8004e84 <USB_SetTurnaroundTime+0x130>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d906      	bls.n	8004dec <USB_SetTurnaroundTime+0x98>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	4a29      	ldr	r2, [pc, #164]	@ (8004e88 <USB_SetTurnaroundTime+0x134>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d802      	bhi.n	8004dec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004de6:	230a      	movs	r3, #10
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e02b      	b.n	8004e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4a26      	ldr	r2, [pc, #152]	@ (8004e88 <USB_SetTurnaroundTime+0x134>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d906      	bls.n	8004e02 <USB_SetTurnaroundTime+0xae>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4a25      	ldr	r2, [pc, #148]	@ (8004e8c <USB_SetTurnaroundTime+0x138>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d202      	bcs.n	8004e02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004dfc:	2309      	movs	r3, #9
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	e020      	b.n	8004e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4a21      	ldr	r2, [pc, #132]	@ (8004e8c <USB_SetTurnaroundTime+0x138>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d306      	bcc.n	8004e18 <USB_SetTurnaroundTime+0xc4>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4a20      	ldr	r2, [pc, #128]	@ (8004e90 <USB_SetTurnaroundTime+0x13c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d802      	bhi.n	8004e18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e12:	2308      	movs	r3, #8
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	e015      	b.n	8004e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8004e90 <USB_SetTurnaroundTime+0x13c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d906      	bls.n	8004e2e <USB_SetTurnaroundTime+0xda>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4a1c      	ldr	r2, [pc, #112]	@ (8004e94 <USB_SetTurnaroundTime+0x140>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d202      	bcs.n	8004e2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e28:	2307      	movs	r3, #7
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e00a      	b.n	8004e44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e2e:	2306      	movs	r3, #6
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e007      	b.n	8004e44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d102      	bne.n	8004e40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e3a:	2309      	movs	r3, #9
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e001      	b.n	8004e44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e40:	2309      	movs	r3, #9
 8004e42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	68da      	ldr	r2, [r3, #12]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	029b      	lsls	r3, r3, #10
 8004e58:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	00d8acbf 	.word	0x00d8acbf
 8004e74:	00e4e1c0 	.word	0x00e4e1c0
 8004e78:	00f42400 	.word	0x00f42400
 8004e7c:	01067380 	.word	0x01067380
 8004e80:	011a499f 	.word	0x011a499f
 8004e84:	01312cff 	.word	0x01312cff
 8004e88:	014ca43f 	.word	0x014ca43f
 8004e8c:	016e3600 	.word	0x016e3600
 8004e90:	01a6ab1f 	.word	0x01a6ab1f
 8004e94:	01e84800 	.word	0x01e84800

08004e98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f043 0201 	orr.w	r2, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f023 0201 	bic.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d115      	bne.n	8004f2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f0a:	200a      	movs	r0, #10
 8004f0c:	f7fb fd1c 	bl	8000948 <HAL_Delay>
      ms += 10U;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	330a      	adds	r3, #10
 8004f14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f001 f93f 	bl	800619a <USB_GetMode>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d01e      	beq.n	8004f60 <USB_SetCurrentMode+0x84>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f26:	d9f0      	bls.n	8004f0a <USB_SetCurrentMode+0x2e>
 8004f28:	e01a      	b.n	8004f60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d115      	bne.n	8004f5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f3c:	200a      	movs	r0, #10
 8004f3e:	f7fb fd03 	bl	8000948 <HAL_Delay>
      ms += 10U;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	330a      	adds	r3, #10
 8004f46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f001 f926 	bl	800619a <USB_GetMode>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <USB_SetCurrentMode+0x84>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f58:	d9f0      	bls.n	8004f3c <USB_SetCurrentMode+0x60>
 8004f5a:	e001      	b.n	8004f60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e005      	b.n	8004f6c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f64:	d101      	bne.n	8004f6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f74:	b084      	sub	sp, #16
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b086      	sub	sp, #24
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f8e:	2300      	movs	r3, #0
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	e009      	b.n	8004fa8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	3340      	adds	r3, #64	@ 0x40
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	2b0e      	cmp	r3, #14
 8004fac:	d9f2      	bls.n	8004f94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d11c      	bne.n	8004ff0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fc4:	f043 0302 	orr.w	r3, r3, #2
 8004fc8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e005      	b.n	8004ffc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005002:	461a      	mov	r2, r3
 8005004:	2300      	movs	r3, #0
 8005006:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005008:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800500c:	2b01      	cmp	r3, #1
 800500e:	d10d      	bne.n	800502c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005018:	2100      	movs	r1, #0
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f968 	bl	80052f0 <USB_SetDevSpeed>
 8005020:	e008      	b.n	8005034 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005022:	2101      	movs	r1, #1
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f963 	bl	80052f0 <USB_SetDevSpeed>
 800502a:	e003      	b.n	8005034 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800502c:	2103      	movs	r1, #3
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f95e 	bl	80052f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005034:	2110      	movs	r1, #16
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f8fa 	bl	8005230 <USB_FlushTxFifo>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f924 	bl	8005294 <USB_FlushRxFifo>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800505c:	461a      	mov	r2, r3
 800505e:	2300      	movs	r3, #0
 8005060:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005068:	461a      	mov	r2, r3
 800506a:	2300      	movs	r3, #0
 800506c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005074:	461a      	mov	r2, r3
 8005076:	2300      	movs	r3, #0
 8005078:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	e043      	b.n	8005108 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005092:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005096:	d118      	bne.n	80050ca <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10a      	bne.n	80050b4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050aa:	461a      	mov	r2, r3
 80050ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	e013      	b.n	80050dc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c0:	461a      	mov	r2, r3
 80050c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e008      	b.n	80050dc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d6:	461a      	mov	r2, r3
 80050d8:	2300      	movs	r3, #0
 80050da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e8:	461a      	mov	r2, r3
 80050ea:	2300      	movs	r3, #0
 80050ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050fa:	461a      	mov	r2, r3
 80050fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005100:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	3301      	adds	r3, #1
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800510c:	461a      	mov	r2, r3
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4293      	cmp	r3, r2
 8005112:	d3b5      	bcc.n	8005080 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005114:	2300      	movs	r3, #0
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	e043      	b.n	80051a2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800512c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005130:	d118      	bne.n	8005164 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10a      	bne.n	800514e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005144:	461a      	mov	r2, r3
 8005146:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	e013      	b.n	8005176 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800515a:	461a      	mov	r2, r3
 800515c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	e008      	b.n	8005176 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005170:	461a      	mov	r2, r3
 8005172:	2300      	movs	r3, #0
 8005174:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005182:	461a      	mov	r2, r3
 8005184:	2300      	movs	r3, #0
 8005186:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005194:	461a      	mov	r2, r3
 8005196:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800519a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	3301      	adds	r3, #1
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051a6:	461a      	mov	r2, r3
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d3b5      	bcc.n	800511a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80051ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d105      	bne.n	80051e4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	f043 0210 	orr.w	r2, r3, #16
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005228 <USB_DevInit+0x2b4>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f043 0208 	orr.w	r2, r3, #8
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005204:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005208:	2b01      	cmp	r3, #1
 800520a:	d105      	bne.n	8005218 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699a      	ldr	r2, [r3, #24]
 8005210:	4b06      	ldr	r3, [pc, #24]	@ (800522c <USB_DevInit+0x2b8>)
 8005212:	4313      	orrs	r3, r2
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005218:	7dfb      	ldrb	r3, [r7, #23]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005224:	b004      	add	sp, #16
 8005226:	4770      	bx	lr
 8005228:	803c3800 	.word	0x803c3800
 800522c:	40000004 	.word	0x40000004

08005230 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800524a:	d901      	bls.n	8005250 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e01b      	b.n	8005288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	daf2      	bge.n	800523e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	019b      	lsls	r3, r3, #6
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3301      	adds	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005274:	d901      	bls.n	800527a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e006      	b.n	8005288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b20      	cmp	r3, #32
 8005284:	d0f0      	beq.n	8005268 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3301      	adds	r3, #1
 80052a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052ac:	d901      	bls.n	80052b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e018      	b.n	80052e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	daf2      	bge.n	80052a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2210      	movs	r2, #16
 80052c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3301      	adds	r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052d0:	d901      	bls.n	80052d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e006      	b.n	80052e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d0f0      	beq.n	80052c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	68f9      	ldr	r1, [r7, #12]
 800530c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005310:	4313      	orrs	r3, r2
 8005312:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005322:	b480      	push	{r7}
 8005324:	b087      	sub	sp, #28
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 0306 	and.w	r3, r3, #6
 800533a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d102      	bne.n	8005348 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005342:	2300      	movs	r3, #0
 8005344:	75fb      	strb	r3, [r7, #23]
 8005346:	e00a      	b.n	800535e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b02      	cmp	r3, #2
 800534c:	d002      	beq.n	8005354 <USB_GetDevSpeed+0x32>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b06      	cmp	r3, #6
 8005352:	d102      	bne.n	800535a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005354:	2302      	movs	r3, #2
 8005356:	75fb      	strb	r3, [r7, #23]
 8005358:	e001      	b.n	800535e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800535a:	230f      	movs	r3, #15
 800535c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800535e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005360:	4618      	mov	r0, r3
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d139      	bne.n	80053fc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	2101      	movs	r1, #1
 800539a:	fa01 f303 	lsl.w	r3, r1, r3
 800539e:	b29b      	uxth	r3, r3
 80053a0:	68f9      	ldr	r1, [r7, #12]
 80053a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053a6:	4313      	orrs	r3, r2
 80053a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d153      	bne.n	8005468 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	791b      	ldrb	r3, [r3, #4]
 80053da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	059b      	lsls	r3, r3, #22
 80053e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053e4:	431a      	orrs	r2, r3
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	0159      	lsls	r1, r3, #5
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	440b      	add	r3, r1
 80053ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f2:	4619      	mov	r1, r3
 80053f4:	4b20      	ldr	r3, [pc, #128]	@ (8005478 <USB_ActivateEndpoint+0x10c>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	600b      	str	r3, [r1, #0]
 80053fa:	e035      	b.n	8005468 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	2101      	movs	r1, #1
 800540e:	fa01 f303 	lsl.w	r3, r1, r3
 8005412:	041b      	lsls	r3, r3, #16
 8005414:	68f9      	ldr	r1, [r7, #12]
 8005416:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800541a:	4313      	orrs	r3, r2
 800541c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d119      	bne.n	8005468 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	791b      	ldrb	r3, [r3, #4]
 800544e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005450:	430b      	orrs	r3, r1
 8005452:	431a      	orrs	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	0159      	lsls	r1, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	440b      	add	r3, r1
 800545c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005460:	4619      	mov	r1, r3
 8005462:	4b05      	ldr	r3, [pc, #20]	@ (8005478 <USB_ActivateEndpoint+0x10c>)
 8005464:	4313      	orrs	r3, r2
 8005466:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	10008000 	.word	0x10008000

0800547c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	785b      	ldrb	r3, [r3, #1]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d161      	bne.n	800555c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054ae:	d11f      	bne.n	80054f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	0151      	lsls	r1, r2, #5
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	440a      	add	r2, r1
 80054c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	f003 030f 	and.w	r3, r3, #15
 8005500:	2101      	movs	r1, #1
 8005502:	fa01 f303 	lsl.w	r3, r1, r3
 8005506:	b29b      	uxth	r3, r3
 8005508:	43db      	mvns	r3, r3
 800550a:	68f9      	ldr	r1, [r7, #12]
 800550c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005510:	4013      	ands	r3, r2
 8005512:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551a:	69da      	ldr	r2, [r3, #28]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	2101      	movs	r1, #1
 8005526:	fa01 f303 	lsl.w	r3, r1, r3
 800552a:	b29b      	uxth	r3, r3
 800552c:	43db      	mvns	r3, r3
 800552e:	68f9      	ldr	r1, [r7, #12]
 8005530:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005534:	4013      	ands	r3, r2
 8005536:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	0159      	lsls	r1, r3, #5
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	440b      	add	r3, r1
 800554e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005552:	4619      	mov	r1, r3
 8005554:	4b35      	ldr	r3, [pc, #212]	@ (800562c <USB_DeactivateEndpoint+0x1b0>)
 8005556:	4013      	ands	r3, r2
 8005558:	600b      	str	r3, [r1, #0]
 800555a:	e060      	b.n	800561e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800556e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005572:	d11f      	bne.n	80055b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	0151      	lsls	r1, r2, #5
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	440a      	add	r2, r1
 800558a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800558e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005592:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	2101      	movs	r1, #1
 80055c6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ca:	041b      	lsls	r3, r3, #16
 80055cc:	43db      	mvns	r3, r3
 80055ce:	68f9      	ldr	r1, [r7, #12]
 80055d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055d4:	4013      	ands	r3, r2
 80055d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	2101      	movs	r1, #1
 80055ea:	fa01 f303 	lsl.w	r3, r1, r3
 80055ee:	041b      	lsls	r3, r3, #16
 80055f0:	43db      	mvns	r3, r3
 80055f2:	68f9      	ldr	r1, [r7, #12]
 80055f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055f8:	4013      	ands	r3, r2
 80055fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	0159      	lsls	r1, r3, #5
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	440b      	add	r3, r1
 8005612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005616:	4619      	mov	r1, r3
 8005618:	4b05      	ldr	r3, [pc, #20]	@ (8005630 <USB_DeactivateEndpoint+0x1b4>)
 800561a:	4013      	ands	r3, r2
 800561c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	ec337800 	.word	0xec337800
 8005630:	eff37800 	.word	0xeff37800

08005634 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08a      	sub	sp, #40	@ 0x28
 8005638:	af02      	add	r7, sp, #8
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	4613      	mov	r3, r2
 8005640:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	2b01      	cmp	r3, #1
 8005652:	f040 8185 	bne.w	8005960 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d132      	bne.n	80056c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	0159      	lsls	r1, r3, #5
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	440b      	add	r3, r1
 8005674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005678:	4619      	mov	r1, r3
 800567a:	4ba7      	ldr	r3, [pc, #668]	@ (8005918 <USB_EPStartXfer+0x2e4>)
 800567c:	4013      	ands	r3, r2
 800567e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	69fa      	ldr	r2, [r7, #28]
 8005694:	440a      	add	r2, r1
 8005696:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800569a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800569e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ac:	691a      	ldr	r2, [r3, #16]
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	0159      	lsls	r1, r3, #5
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	440b      	add	r3, r1
 80056b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ba:	4619      	mov	r1, r3
 80056bc:	4b97      	ldr	r3, [pc, #604]	@ (800591c <USB_EPStartXfer+0x2e8>)
 80056be:	4013      	ands	r3, r2
 80056c0:	610b      	str	r3, [r1, #16]
 80056c2:	e097      	b.n	80057f4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d0:	691a      	ldr	r2, [r3, #16]
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	0159      	lsls	r1, r3, #5
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	440b      	add	r3, r1
 80056da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056de:	4619      	mov	r1, r3
 80056e0:	4b8e      	ldr	r3, [pc, #568]	@ (800591c <USB_EPStartXfer+0x2e8>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	0159      	lsls	r1, r3, #5
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	440b      	add	r3, r1
 80056fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005700:	4619      	mov	r1, r3
 8005702:	4b85      	ldr	r3, [pc, #532]	@ (8005918 <USB_EPStartXfer+0x2e4>)
 8005704:	4013      	ands	r3, r2
 8005706:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d11a      	bne.n	8005744 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	691a      	ldr	r2, [r3, #16]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	d903      	bls.n	8005722 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	0151      	lsls	r1, r2, #5
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	440a      	add	r2, r1
 8005738:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800573c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005740:	6113      	str	r3, [r2, #16]
 8005742:	e044      	b.n	80057ce <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	4413      	add	r3, r2
 800574e:	1e5a      	subs	r2, r3, #1
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	fbb2 f3f3 	udiv	r3, r2, r3
 8005758:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	8afb      	ldrh	r3, [r7, #22]
 800576a:	04d9      	lsls	r1, r3, #19
 800576c:	4b6c      	ldr	r3, [pc, #432]	@ (8005920 <USB_EPStartXfer+0x2ec>)
 800576e:	400b      	ands	r3, r1
 8005770:	69b9      	ldr	r1, [r7, #24]
 8005772:	0148      	lsls	r0, r1, #5
 8005774:	69f9      	ldr	r1, [r7, #28]
 8005776:	4401      	add	r1, r0
 8005778:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800577c:	4313      	orrs	r3, r2
 800577e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	791b      	ldrb	r3, [r3, #4]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d122      	bne.n	80057ce <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	0151      	lsls	r1, r2, #5
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	440a      	add	r2, r1
 800579e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057a2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80057a6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b4:	691a      	ldr	r2, [r3, #16]
 80057b6:	8afb      	ldrh	r3, [r7, #22]
 80057b8:	075b      	lsls	r3, r3, #29
 80057ba:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80057be:	69b9      	ldr	r1, [r7, #24]
 80057c0:	0148      	lsls	r0, r1, #5
 80057c2:	69f9      	ldr	r1, [r7, #28]
 80057c4:	4401      	add	r1, r0
 80057c6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80057ca:	4313      	orrs	r3, r2
 80057cc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057e4:	69b9      	ldr	r1, [r7, #24]
 80057e6:	0148      	lsls	r0, r1, #5
 80057e8:	69f9      	ldr	r1, [r7, #28]
 80057ea:	4401      	add	r1, r0
 80057ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80057f0:	4313      	orrs	r3, r2
 80057f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d14b      	bne.n	8005892 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d009      	beq.n	8005816 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800580e:	461a      	mov	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	791b      	ldrb	r3, [r3, #4]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d128      	bne.n	8005870 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582a:	2b00      	cmp	r3, #0
 800582c:	d110      	bne.n	8005850 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	440a      	add	r2, r1
 8005844:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005848:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	e00f      	b.n	8005870 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	0151      	lsls	r1, r2, #5
 8005862:	69fa      	ldr	r2, [r7, #28]
 8005864:	440a      	add	r2, r1
 8005866:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800586a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800586e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800588a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	e169      	b.n	8005b66 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	0151      	lsls	r1, r2, #5
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058ac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80058b0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	791b      	ldrb	r3, [r3, #4]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d015      	beq.n	80058e6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 8151 	beq.w	8005b66 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	f003 030f 	and.w	r3, r3, #15
 80058d4:	2101      	movs	r1, #1
 80058d6:	fa01 f303 	lsl.w	r3, r1, r3
 80058da:	69f9      	ldr	r1, [r7, #28]
 80058dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058e0:	4313      	orrs	r3, r2
 80058e2:	634b      	str	r3, [r1, #52]	@ 0x34
 80058e4:	e13f      	b.n	8005b66 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d116      	bne.n	8005924 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	440a      	add	r2, r1
 800590c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005910:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	e015      	b.n	8005944 <USB_EPStartXfer+0x310>
 8005918:	e007ffff 	.word	0xe007ffff
 800591c:	fff80000 	.word	0xfff80000
 8005920:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	440a      	add	r2, r1
 800593a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800593e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005942:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	68d9      	ldr	r1, [r3, #12]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	781a      	ldrb	r2, [r3, #0]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	b298      	uxth	r0, r3
 8005952:	79fb      	ldrb	r3, [r7, #7]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	4603      	mov	r3, r0
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f9b9 	bl	8005cd0 <USB_WritePacket>
 800595e:	e102      	b.n	8005b66 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596c:	691a      	ldr	r2, [r3, #16]
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	0159      	lsls	r1, r3, #5
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	440b      	add	r3, r1
 8005976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800597a:	4619      	mov	r1, r3
 800597c:	4b7c      	ldr	r3, [pc, #496]	@ (8005b70 <USB_EPStartXfer+0x53c>)
 800597e:	4013      	ands	r3, r2
 8005980:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	0159      	lsls	r1, r3, #5
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	440b      	add	r3, r1
 8005998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599c:	4619      	mov	r1, r3
 800599e:	4b75      	ldr	r3, [pc, #468]	@ (8005b74 <USB_EPStartXfer+0x540>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d12f      	bne.n	8005a0a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059d8:	69b9      	ldr	r1, [r7, #24]
 80059da:	0148      	lsls	r0, r1, #5
 80059dc:	69f9      	ldr	r1, [r7, #28]
 80059de:	4401      	add	r1, r0
 80059e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80059e4:	4313      	orrs	r3, r2
 80059e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a06:	6113      	str	r3, [r2, #16]
 8005a08:	e05f      	b.n	8005aca <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d123      	bne.n	8005a5a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a28:	69b9      	ldr	r1, [r7, #24]
 8005a2a:	0148      	lsls	r0, r1, #5
 8005a2c:	69f9      	ldr	r1, [r7, #28]
 8005a2e:	4401      	add	r1, r0
 8005a30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a34:	4313      	orrs	r3, r2
 8005a36:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	0151      	lsls	r1, r2, #5
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	440a      	add	r2, r1
 8005a4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a56:	6113      	str	r3, [r2, #16]
 8005a58:	e037      	b.n	8005aca <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	4413      	add	r3, r2
 8005a64:	1e5a      	subs	r2, r3, #1
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	8afa      	ldrh	r2, [r7, #22]
 8005a76:	fb03 f202 	mul.w	r2, r3, r2
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	8afb      	ldrh	r3, [r7, #22]
 8005a8e:	04d9      	lsls	r1, r3, #19
 8005a90:	4b39      	ldr	r3, [pc, #228]	@ (8005b78 <USB_EPStartXfer+0x544>)
 8005a92:	400b      	ands	r3, r1
 8005a94:	69b9      	ldr	r1, [r7, #24]
 8005a96:	0148      	lsls	r0, r1, #5
 8005a98:	69f9      	ldr	r1, [r7, #28]
 8005a9a:	4401      	add	r1, r0
 8005a9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab0:	691a      	ldr	r2, [r3, #16]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aba:	69b9      	ldr	r1, [r7, #24]
 8005abc:	0148      	lsls	r0, r1, #5
 8005abe:	69f9      	ldr	r1, [r7, #28]
 8005ac0:	4401      	add	r1, r0
 8005ac2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d10d      	bne.n	8005aec <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d009      	beq.n	8005aec <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	68d9      	ldr	r1, [r3, #12]
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ae8:	460a      	mov	r2, r1
 8005aea:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	791b      	ldrb	r3, [r3, #4]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d128      	bne.n	8005b46 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d110      	bne.n	8005b26 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b1e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	e00f      	b.n	8005b46 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	69fa      	ldr	r2, [r7, #28]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b44:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b60:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3720      	adds	r7, #32
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	fff80000 	.word	0xfff80000
 8005b74:	e007ffff 	.word	0xe007ffff
 8005b78:	1ff80000 	.word	0x1ff80000

08005b7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	785b      	ldrb	r3, [r3, #1]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d14a      	bne.n	8005c30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bb2:	f040 8086 	bne.w	8005cc2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	7812      	ldrb	r2, [r2, #0]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bd4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005bd8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	7812      	ldrb	r2, [r2, #0]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bf8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bfc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3301      	adds	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d902      	bls.n	8005c14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	75fb      	strb	r3, [r7, #23]
          break;
 8005c12:	e056      	b.n	8005cc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c2c:	d0e7      	beq.n	8005bfe <USB_EPStopXfer+0x82>
 8005c2e:	e048      	b.n	8005cc2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c48:	d13b      	bne.n	8005cc2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	7812      	ldrb	r2, [r2, #0]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	7812      	ldrb	r2, [r2, #0]
 8005c82:	0151      	lsls	r1, r2, #5
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	440a      	add	r2, r1
 8005c88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3301      	adds	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d902      	bls.n	8005ca8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ca6:	e00c      	b.n	8005cc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cc0:	d0e7      	beq.n	8005c92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b089      	sub	sp, #36	@ 0x24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	4611      	mov	r1, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	460b      	mov	r3, r1
 8005ce0:	71fb      	strb	r3, [r7, #7]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005cee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d123      	bne.n	8005d3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005cf6:	88bb      	ldrh	r3, [r7, #4]
 8005cf8:	3303      	adds	r3, #3
 8005cfa:	089b      	lsrs	r3, r3, #2
 8005cfc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	e018      	b.n	8005d36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	031a      	lsls	r2, r3, #12
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d10:	461a      	mov	r2, r3
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	3301      	adds	r3, #1
 8005d22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	3301      	adds	r3, #1
 8005d28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	3301      	adds	r3, #1
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d3e2      	bcc.n	8005d04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3724      	adds	r7, #36	@ 0x24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b08b      	sub	sp, #44	@ 0x2c
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	4613      	mov	r3, r2
 8005d58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d62:	88fb      	ldrh	r3, [r7, #6]
 8005d64:	089b      	lsrs	r3, r3, #2
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d6a:	88fb      	ldrh	r3, [r7, #6]
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d72:	2300      	movs	r3, #0
 8005d74:	623b      	str	r3, [r7, #32]
 8005d76:	e014      	b.n	8005da2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d82:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d86:	3301      	adds	r3, #1
 8005d88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d92:	3301      	adds	r3, #1
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	3301      	adds	r3, #1
 8005d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	623b      	str	r3, [r7, #32]
 8005da2:	6a3a      	ldr	r2, [r7, #32]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d3e6      	bcc.n	8005d78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005daa:	8bfb      	ldrh	r3, [r7, #30]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d01e      	beq.n	8005dee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f107 0310 	add.w	r3, r7, #16
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	701a      	strb	r2, [r3, #0]
      i++;
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dde:	3301      	adds	r3, #1
 8005de0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005de2:	8bfb      	ldrh	r3, [r7, #30]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005de8:	8bfb      	ldrh	r3, [r7, #30]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1ea      	bne.n	8005dc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	372c      	adds	r7, #44	@ 0x2c
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d12c      	bne.n	8005e72 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	db12      	blt.n	8005e50 <USB_EPSetStall+0x54>
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00f      	beq.n	8005e50 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	0151      	lsls	r1, r2, #5
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	440a      	add	r2, r1
 8005e46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e4e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	e02b      	b.n	8005eca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	db12      	blt.n	8005eaa <USB_EPSetStall+0xae>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00f      	beq.n	8005eaa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ea4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ea8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ec4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005ec8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	785b      	ldrb	r3, [r3, #1]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d128      	bne.n	8005f46 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	0151      	lsls	r1, r2, #5
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	440a      	add	r2, r1
 8005f0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	791b      	ldrb	r3, [r3, #4]
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d003      	beq.n	8005f24 <USB_EPClearStall+0x4c>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	791b      	ldrb	r3, [r3, #4]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d138      	bne.n	8005f96 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	e027      	b.n	8005f96 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	791b      	ldrb	r3, [r3, #4]
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d003      	beq.n	8005f76 <USB_EPClearStall+0x9e>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	791b      	ldrb	r3, [r3, #4]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d10f      	bne.n	8005f96 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f94:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fc2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005fc6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005fd8:	68f9      	ldr	r1, [r7, #12]
 8005fda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800600a:	f023 0303 	bic.w	r3, r3, #3
 800600e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800601e:	f023 0302 	bic.w	r3, r3, #2
 8006022:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800604c:	f023 0303 	bic.w	r3, r3, #3
 8006050:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006060:	f043 0302 	orr.w	r3, r3, #2
 8006064:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4013      	ands	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800608c:	68fb      	ldr	r3, [r7, #12]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800609a:	b480      	push	{r7}
 800609c:	b085      	sub	sp, #20
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	4013      	ands	r3, r2
 80060bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	0c1b      	lsrs	r3, r3, #16
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b085      	sub	sp, #20
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	4013      	ands	r3, r2
 80060f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	b29b      	uxth	r3, r3
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006102:	b480      	push	{r7}
 8006104:	b085      	sub	sp, #20
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	460b      	mov	r3, r1
 800610c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006112:	78fb      	ldrb	r3, [r7, #3]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	4013      	ands	r3, r2
 800612e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006130:	68bb      	ldr	r3, [r7, #8]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800613e:	b480      	push	{r7}
 8006140:	b087      	sub	sp, #28
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800615e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006160:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006162:	78fb      	ldrb	r3, [r7, #3]
 8006164:	f003 030f 	and.w	r3, r3, #15
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	fa22 f303 	lsr.w	r3, r2, r3
 800616e:	01db      	lsls	r3, r3, #7
 8006170:	b2db      	uxtb	r3, r3
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006178:	78fb      	ldrb	r3, [r7, #3]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4013      	ands	r3, r2
 800618a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800618c:	68bb      	ldr	r3, [r7, #8]
}
 800618e:	4618      	mov	r0, r3
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	f003 0301 	and.w	r3, r3, #1
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
	...

080061b8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d2:	4619      	mov	r1, r3
 80061d4:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <USB_ActivateSetup+0x44>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	fffff800 	.word	0xfffff800

08006200 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	460b      	mov	r3, r1
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	333c      	adds	r3, #60	@ 0x3c
 8006216:	3304      	adds	r3, #4
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	4a26      	ldr	r2, [pc, #152]	@ (80062b8 <USB_EP0_OutStart+0xb8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d90a      	bls.n	800623a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006234:	d101      	bne.n	800623a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	e037      	b.n	80062aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006240:	461a      	mov	r2, r3
 8006242:	2300      	movs	r3, #0
 8006244:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006254:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006258:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006268:	f043 0318 	orr.w	r3, r3, #24
 800626c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800627c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006280:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006282:	7afb      	ldrb	r3, [r7, #11]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d10f      	bne.n	80062a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800628e:	461a      	mov	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062a2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80062a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	4f54300a 	.word	0x4f54300a

080062bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	3301      	adds	r3, #1
 80062cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062d4:	d901      	bls.n	80062da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e01b      	b.n	8006312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	daf2      	bge.n	80062c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f043 0201 	orr.w	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	3301      	adds	r3, #1
 80062f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062fe:	d901      	bls.n	8006304 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e006      	b.n	8006312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b01      	cmp	r3, #1
 800630e:	d0f0      	beq.n	80062f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
	...

08006320 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800632c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006330:	f002 fce6 	bl	8008d00 <USBD_static_malloc>
 8006334:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d109      	bne.n	8006350 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	32b0      	adds	r2, #176	@ 0xb0
 8006346:	2100      	movs	r1, #0
 8006348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800634c:	2302      	movs	r3, #2
 800634e:	e0d4      	b.n	80064fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006350:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006354:	2100      	movs	r1, #0
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f002 fd8e 	bl	8008e78 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	32b0      	adds	r2, #176	@ 0xb0
 8006366:	68f9      	ldr	r1, [r7, #12]
 8006368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	32b0      	adds	r2, #176	@ 0xb0
 8006376:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	7c1b      	ldrb	r3, [r3, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d138      	bne.n	80063fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006388:	4b5e      	ldr	r3, [pc, #376]	@ (8006504 <USBD_CDC_Init+0x1e4>)
 800638a:	7819      	ldrb	r1, [r3, #0]
 800638c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006390:	2202      	movs	r2, #2
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f002 fb91 	bl	8008aba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006398:	4b5a      	ldr	r3, [pc, #360]	@ (8006504 <USBD_CDC_Init+0x1e4>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	f003 020f 	and.w	r2, r3, #15
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	3324      	adds	r3, #36	@ 0x24
 80063ae:	2201      	movs	r2, #1
 80063b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80063b2:	4b55      	ldr	r3, [pc, #340]	@ (8006508 <USBD_CDC_Init+0x1e8>)
 80063b4:	7819      	ldrb	r1, [r3, #0]
 80063b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063ba:	2202      	movs	r2, #2
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f002 fb7c 	bl	8008aba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80063c2:	4b51      	ldr	r3, [pc, #324]	@ (8006508 <USBD_CDC_Init+0x1e8>)
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	f003 020f 	and.w	r2, r3, #15
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	440b      	add	r3, r1
 80063d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80063da:	2201      	movs	r2, #1
 80063dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80063de:	4b4b      	ldr	r3, [pc, #300]	@ (800650c <USBD_CDC_Init+0x1ec>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	f003 020f 	and.w	r2, r3, #15
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	3326      	adds	r3, #38	@ 0x26
 80063f4:	2210      	movs	r2, #16
 80063f6:	801a      	strh	r2, [r3, #0]
 80063f8:	e035      	b.n	8006466 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80063fa:	4b42      	ldr	r3, [pc, #264]	@ (8006504 <USBD_CDC_Init+0x1e4>)
 80063fc:	7819      	ldrb	r1, [r3, #0]
 80063fe:	2340      	movs	r3, #64	@ 0x40
 8006400:	2202      	movs	r2, #2
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f002 fb59 	bl	8008aba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006408:	4b3e      	ldr	r3, [pc, #248]	@ (8006504 <USBD_CDC_Init+0x1e4>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	f003 020f 	and.w	r2, r3, #15
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	4613      	mov	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	440b      	add	r3, r1
 800641c:	3324      	adds	r3, #36	@ 0x24
 800641e:	2201      	movs	r2, #1
 8006420:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006422:	4b39      	ldr	r3, [pc, #228]	@ (8006508 <USBD_CDC_Init+0x1e8>)
 8006424:	7819      	ldrb	r1, [r3, #0]
 8006426:	2340      	movs	r3, #64	@ 0x40
 8006428:	2202      	movs	r2, #2
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f002 fb45 	bl	8008aba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006430:	4b35      	ldr	r3, [pc, #212]	@ (8006508 <USBD_CDC_Init+0x1e8>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	f003 020f 	and.w	r2, r3, #15
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	440b      	add	r3, r1
 8006444:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006448:	2201      	movs	r2, #1
 800644a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800644c:	4b2f      	ldr	r3, [pc, #188]	@ (800650c <USBD_CDC_Init+0x1ec>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	f003 020f 	and.w	r2, r3, #15
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	440b      	add	r3, r1
 8006460:	3326      	adds	r3, #38	@ 0x26
 8006462:	2210      	movs	r2, #16
 8006464:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006466:	4b29      	ldr	r3, [pc, #164]	@ (800650c <USBD_CDC_Init+0x1ec>)
 8006468:	7819      	ldrb	r1, [r3, #0]
 800646a:	2308      	movs	r3, #8
 800646c:	2203      	movs	r2, #3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f002 fb23 	bl	8008aba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006474:	4b25      	ldr	r3, [pc, #148]	@ (800650c <USBD_CDC_Init+0x1ec>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f003 020f 	and.w	r2, r3, #15
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	4613      	mov	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	440b      	add	r3, r1
 8006488:	3324      	adds	r3, #36	@ 0x24
 800648a:	2201      	movs	r2, #1
 800648c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	33b0      	adds	r3, #176	@ 0xb0
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80064c4:	2302      	movs	r3, #2
 80064c6:	e018      	b.n	80064fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	7c1b      	ldrb	r3, [r3, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10a      	bne.n	80064e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064d0:	4b0d      	ldr	r3, [pc, #52]	@ (8006508 <USBD_CDC_Init+0x1e8>)
 80064d2:	7819      	ldrb	r1, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80064da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f002 fbda 	bl	8008c98 <USBD_LL_PrepareReceive>
 80064e4:	e008      	b.n	80064f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064e6:	4b08      	ldr	r3, [pc, #32]	@ (8006508 <USBD_CDC_Init+0x1e8>)
 80064e8:	7819      	ldrb	r1, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80064f0:	2340      	movs	r3, #64	@ 0x40
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f002 fbd0 	bl	8008c98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	240000a3 	.word	0x240000a3
 8006508:	240000a4 	.word	0x240000a4
 800650c:	240000a5 	.word	0x240000a5

08006510 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800651c:	4b3a      	ldr	r3, [pc, #232]	@ (8006608 <USBD_CDC_DeInit+0xf8>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f002 faef 	bl	8008b06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006528:	4b37      	ldr	r3, [pc, #220]	@ (8006608 <USBD_CDC_DeInit+0xf8>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	f003 020f 	and.w	r2, r3, #15
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	3324      	adds	r3, #36	@ 0x24
 800653e:	2200      	movs	r2, #0
 8006540:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006542:	4b32      	ldr	r3, [pc, #200]	@ (800660c <USBD_CDC_DeInit+0xfc>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f002 fadc 	bl	8008b06 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800654e:	4b2f      	ldr	r3, [pc, #188]	@ (800660c <USBD_CDC_DeInit+0xfc>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	f003 020f 	and.w	r2, r3, #15
 8006556:	6879      	ldr	r1, [r7, #4]
 8006558:	4613      	mov	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	440b      	add	r3, r1
 8006562:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006566:	2200      	movs	r2, #0
 8006568:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800656a:	4b29      	ldr	r3, [pc, #164]	@ (8006610 <USBD_CDC_DeInit+0x100>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f002 fac8 	bl	8008b06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006576:	4b26      	ldr	r3, [pc, #152]	@ (8006610 <USBD_CDC_DeInit+0x100>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	f003 020f 	and.w	r2, r3, #15
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	3324      	adds	r3, #36	@ 0x24
 800658c:	2200      	movs	r2, #0
 800658e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006590:	4b1f      	ldr	r3, [pc, #124]	@ (8006610 <USBD_CDC_DeInit+0x100>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	f003 020f 	and.w	r2, r3, #15
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	4613      	mov	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	440b      	add	r3, r1
 80065a4:	3326      	adds	r3, #38	@ 0x26
 80065a6:	2200      	movs	r2, #0
 80065a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	32b0      	adds	r2, #176	@ 0xb0
 80065b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01f      	beq.n	80065fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	33b0      	adds	r3, #176	@ 0xb0
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	32b0      	adds	r2, #176	@ 0xb0
 80065da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065de:	4618      	mov	r0, r3
 80065e0:	f002 fb9c 	bl	8008d1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	32b0      	adds	r2, #176	@ 0xb0
 80065ee:	2100      	movs	r1, #0
 80065f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	240000a3 	.word	0x240000a3
 800660c:	240000a4 	.word	0x240000a4
 8006610:	240000a5 	.word	0x240000a5

08006614 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	32b0      	adds	r2, #176	@ 0xb0
 8006628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006640:	2303      	movs	r3, #3
 8006642:	e0bf      	b.n	80067c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800664c:	2b00      	cmp	r3, #0
 800664e:	d050      	beq.n	80066f2 <USBD_CDC_Setup+0xde>
 8006650:	2b20      	cmp	r3, #32
 8006652:	f040 80af 	bne.w	80067b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	88db      	ldrh	r3, [r3, #6]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d03a      	beq.n	80066d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	b25b      	sxtb	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	da1b      	bge.n	80066a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	33b0      	adds	r3, #176	@ 0xb0
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800667e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	88d2      	ldrh	r2, [r2, #6]
 8006684:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	88db      	ldrh	r3, [r3, #6]
 800668a:	2b07      	cmp	r3, #7
 800668c:	bf28      	it	cs
 800668e:	2307      	movcs	r3, #7
 8006690:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	89fa      	ldrh	r2, [r7, #14]
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 fd7d 	bl	8008198 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800669e:	e090      	b.n	80067c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	785a      	ldrb	r2, [r3, #1]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	88db      	ldrh	r3, [r3, #6]
 80066ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80066b0:	d803      	bhi.n	80066ba <USBD_CDC_Setup+0xa6>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	88db      	ldrh	r3, [r3, #6]
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	e000      	b.n	80066bc <USBD_CDC_Setup+0xa8>
 80066ba:	2240      	movs	r2, #64	@ 0x40
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80066c2:	6939      	ldr	r1, [r7, #16]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80066ca:	461a      	mov	r2, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 fd8f 	bl	80081f0 <USBD_CtlPrepareRx>
      break;
 80066d2:	e076      	b.n	80067c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	33b0      	adds	r3, #176	@ 0xb0
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	7850      	ldrb	r0, [r2, #1]
 80066ea:	2200      	movs	r2, #0
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	4798      	blx	r3
      break;
 80066f0:	e067      	b.n	80067c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	2b0b      	cmp	r3, #11
 80066f8:	d851      	bhi.n	800679e <USBD_CDC_Setup+0x18a>
 80066fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006700 <USBD_CDC_Setup+0xec>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006731 	.word	0x08006731
 8006704:	080067ad 	.word	0x080067ad
 8006708:	0800679f 	.word	0x0800679f
 800670c:	0800679f 	.word	0x0800679f
 8006710:	0800679f 	.word	0x0800679f
 8006714:	0800679f 	.word	0x0800679f
 8006718:	0800679f 	.word	0x0800679f
 800671c:	0800679f 	.word	0x0800679f
 8006720:	0800679f 	.word	0x0800679f
 8006724:	0800679f 	.word	0x0800679f
 8006728:	0800675b 	.word	0x0800675b
 800672c:	08006785 	.word	0x08006785
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b03      	cmp	r3, #3
 800673a:	d107      	bne.n	800674c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800673c:	f107 030a 	add.w	r3, r7, #10
 8006740:	2202      	movs	r2, #2
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 fd27 	bl	8008198 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800674a:	e032      	b.n	80067b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f001 fca5 	bl	800809e <USBD_CtlError>
            ret = USBD_FAIL;
 8006754:	2303      	movs	r3, #3
 8006756:	75fb      	strb	r3, [r7, #23]
          break;
 8006758:	e02b      	b.n	80067b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b03      	cmp	r3, #3
 8006764:	d107      	bne.n	8006776 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006766:	f107 030d 	add.w	r3, r7, #13
 800676a:	2201      	movs	r2, #1
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f001 fd12 	bl	8008198 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006774:	e01d      	b.n	80067b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 fc90 	bl	800809e <USBD_CtlError>
            ret = USBD_FAIL;
 800677e:	2303      	movs	r3, #3
 8006780:	75fb      	strb	r3, [r7, #23]
          break;
 8006782:	e016      	b.n	80067b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b03      	cmp	r3, #3
 800678e:	d00f      	beq.n	80067b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f001 fc83 	bl	800809e <USBD_CtlError>
            ret = USBD_FAIL;
 8006798:	2303      	movs	r3, #3
 800679a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800679c:	e008      	b.n	80067b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 fc7c 	bl	800809e <USBD_CtlError>
          ret = USBD_FAIL;
 80067a6:	2303      	movs	r3, #3
 80067a8:	75fb      	strb	r3, [r7, #23]
          break;
 80067aa:	e002      	b.n	80067b2 <USBD_CDC_Setup+0x19e>
          break;
 80067ac:	bf00      	nop
 80067ae:	e008      	b.n	80067c2 <USBD_CDC_Setup+0x1ae>
          break;
 80067b0:	bf00      	nop
      }
      break;
 80067b2:	e006      	b.n	80067c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 fc71 	bl	800809e <USBD_CtlError>
      ret = USBD_FAIL;
 80067bc:	2303      	movs	r3, #3
 80067be:	75fb      	strb	r3, [r7, #23]
      break;
 80067c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3718      	adds	r7, #24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80067de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	32b0      	adds	r2, #176	@ 0xb0
 80067ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e065      	b.n	80068c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	32b0      	adds	r2, #176	@ 0xb0
 8006800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006804:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006806:	78fb      	ldrb	r3, [r7, #3]
 8006808:	f003 020f 	and.w	r2, r3, #15
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	4613      	mov	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	440b      	add	r3, r1
 8006818:	3318      	adds	r3, #24
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d02f      	beq.n	8006880 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	f003 020f 	and.w	r2, r3, #15
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	440b      	add	r3, r1
 8006832:	3318      	adds	r3, #24
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	f003 010f 	and.w	r1, r3, #15
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	460b      	mov	r3, r1
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	440b      	add	r3, r1
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4403      	add	r3, r0
 8006848:	331c      	adds	r3, #28
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006856:	2b00      	cmp	r3, #0
 8006858:	d112      	bne.n	8006880 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800685a:	78fb      	ldrb	r3, [r7, #3]
 800685c:	f003 020f 	and.w	r2, r3, #15
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	440b      	add	r3, r1
 800686c:	3318      	adds	r3, #24
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006872:	78f9      	ldrb	r1, [r7, #3]
 8006874:	2300      	movs	r3, #0
 8006876:	2200      	movs	r2, #0
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f002 f9ec 	bl	8008c56 <USBD_LL_Transmit>
 800687e:	e01f      	b.n	80068c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	33b0      	adds	r3, #176	@ 0xb0
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d010      	beq.n	80068c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	33b0      	adds	r3, #176	@ 0xb0
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80068bc:	78fa      	ldrb	r2, [r7, #3]
 80068be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	460b      	mov	r3, r1
 80068d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	32b0      	adds	r2, #176	@ 0xb0
 80068e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	32b0      	adds	r2, #176	@ 0xb0
 80068f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e01a      	b.n	8006932 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f002 f9ea 	bl	8008cda <USBD_LL_GetRxDataSize>
 8006906:	4602      	mov	r2, r0
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	33b0      	adds	r3, #176	@ 0xb0
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800692c:	4611      	mov	r1, r2
 800692e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	32b0      	adds	r2, #176	@ 0xb0
 800694c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006950:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006958:	2303      	movs	r3, #3
 800695a:	e024      	b.n	80069a6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	33b0      	adds	r3, #176	@ 0xb0
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d019      	beq.n	80069a4 <USBD_CDC_EP0_RxReady+0x6a>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006976:	2bff      	cmp	r3, #255	@ 0xff
 8006978:	d014      	beq.n	80069a4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	33b0      	adds	r3, #176	@ 0xb0
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006992:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800699a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	22ff      	movs	r2, #255	@ 0xff
 80069a0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069b8:	2182      	movs	r1, #130	@ 0x82
 80069ba:	4818      	ldr	r0, [pc, #96]	@ (8006a1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069bc:	f000 fd0f 	bl	80073de <USBD_GetEpDesc>
 80069c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069c2:	2101      	movs	r1, #1
 80069c4:	4815      	ldr	r0, [pc, #84]	@ (8006a1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069c6:	f000 fd0a 	bl	80073de <USBD_GetEpDesc>
 80069ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069cc:	2181      	movs	r1, #129	@ 0x81
 80069ce:	4813      	ldr	r0, [pc, #76]	@ (8006a1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069d0:	f000 fd05 	bl	80073de <USBD_GetEpDesc>
 80069d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2210      	movs	r2, #16
 80069e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d006      	beq.n	80069f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069f0:	711a      	strb	r2, [r3, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d006      	beq.n	8006a0a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a04:	711a      	strb	r2, [r3, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2243      	movs	r2, #67	@ 0x43
 8006a0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a10:	4b02      	ldr	r3, [pc, #8]	@ (8006a1c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	24000060 	.word	0x24000060

08006a20 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a28:	2182      	movs	r1, #130	@ 0x82
 8006a2a:	4818      	ldr	r0, [pc, #96]	@ (8006a8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a2c:	f000 fcd7 	bl	80073de <USBD_GetEpDesc>
 8006a30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a32:	2101      	movs	r1, #1
 8006a34:	4815      	ldr	r0, [pc, #84]	@ (8006a8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a36:	f000 fcd2 	bl	80073de <USBD_GetEpDesc>
 8006a3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a3c:	2181      	movs	r1, #129	@ 0x81
 8006a3e:	4813      	ldr	r0, [pc, #76]	@ (8006a8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a40:	f000 fccd 	bl	80073de <USBD_GetEpDesc>
 8006a44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2210      	movs	r2, #16
 8006a50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d006      	beq.n	8006a66 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	711a      	strb	r2, [r3, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f042 0202 	orr.w	r2, r2, #2
 8006a64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d006      	beq.n	8006a7a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	711a      	strb	r2, [r3, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f042 0202 	orr.w	r2, r2, #2
 8006a78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2243      	movs	r2, #67	@ 0x43
 8006a7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a80:	4b02      	ldr	r3, [pc, #8]	@ (8006a8c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	24000060 	.word	0x24000060

08006a90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a98:	2182      	movs	r1, #130	@ 0x82
 8006a9a:	4818      	ldr	r0, [pc, #96]	@ (8006afc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a9c:	f000 fc9f 	bl	80073de <USBD_GetEpDesc>
 8006aa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	4815      	ldr	r0, [pc, #84]	@ (8006afc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006aa6:	f000 fc9a 	bl	80073de <USBD_GetEpDesc>
 8006aaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006aac:	2181      	movs	r1, #129	@ 0x81
 8006aae:	4813      	ldr	r0, [pc, #76]	@ (8006afc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ab0:	f000 fc95 	bl	80073de <USBD_GetEpDesc>
 8006ab4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2210      	movs	r2, #16
 8006ac0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d006      	beq.n	8006ad6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ad0:	711a      	strb	r2, [r3, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d006      	beq.n	8006aea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ae4:	711a      	strb	r2, [r3, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2243      	movs	r2, #67	@ 0x43
 8006aee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006af0:	4b02      	ldr	r3, [pc, #8]	@ (8006afc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	24000060 	.word	0x24000060

08006b00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	220a      	movs	r2, #10
 8006b0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b0e:	4b03      	ldr	r3, [pc, #12]	@ (8006b1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	2400001c 	.word	0x2400001c

08006b20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e009      	b.n	8006b48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	33b0      	adds	r3, #176	@ 0xb0
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	32b0      	adds	r2, #176	@ 0xb0
 8006b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e008      	b.n	8006b8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	32b0      	adds	r2, #176	@ 0xb0
 8006bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e004      	b.n	8006bc6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
	...

08006bd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	32b0      	adds	r2, #176	@ 0xb0
 8006be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	32b0      	adds	r2, #176	@ 0xb0
 8006bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e018      	b.n	8006c34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	7c1b      	ldrb	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c3c <USBD_CDC_ReceivePacket+0x68>)
 8006c0c:	7819      	ldrb	r1, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f002 f83d 	bl	8008c98 <USBD_LL_PrepareReceive>
 8006c1e:	e008      	b.n	8006c32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c20:	4b06      	ldr	r3, [pc, #24]	@ (8006c3c <USBD_CDC_ReceivePacket+0x68>)
 8006c22:	7819      	ldrb	r1, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c2a:	2340      	movs	r3, #64	@ 0x40
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f002 f833 	bl	8008c98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	240000a4 	.word	0x240000a4

08006c40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e01f      	b.n	8006c98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	79fa      	ldrb	r2, [r7, #7]
 8006c8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f001 fea9 	bl	80089e4 <USBD_LL_Init>
 8006c92:	4603      	mov	r3, r0
 8006c94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e025      	b.n	8006d04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	32ae      	adds	r2, #174	@ 0xae
 8006cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00f      	beq.n	8006cf4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	32ae      	adds	r2, #174	@ 0xae
 8006cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce4:	f107 020e 	add.w	r2, r7, #14
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4798      	blx	r3
 8006cec:	4602      	mov	r2, r0
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 feb5 	bl	8008a84 <USBD_LL_Start>
 8006d1a:	4603      	mov	r3, r0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	460b      	mov	r3, r1
 8006d44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d009      	beq.n	8006d68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	78fa      	ldrb	r2, [r7, #3]
 8006d5e:	4611      	mov	r1, r2
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	4798      	blx	r3
 8006d64:	4603      	mov	r3, r0
 8006d66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	78fa      	ldrb	r2, [r7, #3]
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	4798      	blx	r3
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 f936 	bl	800802a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006dcc:	461a      	mov	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006dda:	f003 031f 	and.w	r3, r3, #31
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d01a      	beq.n	8006e18 <USBD_LL_SetupStage+0x72>
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d822      	bhi.n	8006e2c <USBD_LL_SetupStage+0x86>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <USBD_LL_SetupStage+0x4a>
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d00a      	beq.n	8006e04 <USBD_LL_SetupStage+0x5e>
 8006dee:	e01d      	b.n	8006e2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fb63 	bl	80074c4 <USBD_StdDevReq>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	73fb      	strb	r3, [r7, #15]
      break;
 8006e02:	e020      	b.n	8006e46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fbcb 	bl	80075a8 <USBD_StdItfReq>
 8006e12:	4603      	mov	r3, r0
 8006e14:	73fb      	strb	r3, [r7, #15]
      break;
 8006e16:	e016      	b.n	8006e46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fc2d 	bl	8007680 <USBD_StdEPReq>
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]
      break;
 8006e2a:	e00c      	b.n	8006e46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006e32:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 fe82 	bl	8008b44 <USBD_LL_StallEP>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]
      break;
 8006e44:	bf00      	nop
  }

  return ret;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	607a      	str	r2, [r7, #4]
 8006e5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006e62:	7afb      	ldrb	r3, [r7, #11]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d16e      	bne.n	8006f46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006e6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	f040 8098 	bne.w	8006fac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d913      	bls.n	8006eb0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	1ad2      	subs	r2, r2, r3
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	68da      	ldr	r2, [r3, #12]
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	bf28      	it	cs
 8006ea2:	4613      	movcs	r3, r2
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f001 f9be 	bl	800822a <USBD_CtlContinueRx>
 8006eae:	e07d      	b.n	8006fac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006eb6:	f003 031f 	and.w	r3, r3, #31
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d014      	beq.n	8006ee8 <USBD_LL_DataOutStage+0x98>
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d81d      	bhi.n	8006efe <USBD_LL_DataOutStage+0xae>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <USBD_LL_DataOutStage+0x7c>
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d003      	beq.n	8006ed2 <USBD_LL_DataOutStage+0x82>
 8006eca:	e018      	b.n	8006efe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	75bb      	strb	r3, [r7, #22]
            break;
 8006ed0:	e018      	b.n	8006f04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	4619      	mov	r1, r3
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 fa64 	bl	80073aa <USBD_CoreFindIF>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	75bb      	strb	r3, [r7, #22]
            break;
 8006ee6:	e00d      	b.n	8006f04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 fa66 	bl	80073c4 <USBD_CoreFindEP>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	75bb      	strb	r3, [r7, #22]
            break;
 8006efc:	e002      	b.n	8006f04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	75bb      	strb	r3, [r7, #22]
            break;
 8006f02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006f04:	7dbb      	ldrb	r3, [r7, #22]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d119      	bne.n	8006f3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	d113      	bne.n	8006f3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006f16:	7dba      	ldrb	r2, [r7, #22]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	32ae      	adds	r2, #174	@ 0xae
 8006f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00b      	beq.n	8006f3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006f26:	7dba      	ldrb	r2, [r7, #22]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006f2e:	7dba      	ldrb	r2, [r7, #22]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	32ae      	adds	r2, #174	@ 0xae
 8006f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f001 f984 	bl	800824c <USBD_CtlSendStatus>
 8006f44:	e032      	b.n	8006fac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006f46:	7afb      	ldrb	r3, [r7, #11]
 8006f48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	4619      	mov	r1, r3
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 fa37 	bl	80073c4 <USBD_CoreFindEP>
 8006f56:	4603      	mov	r3, r0
 8006f58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f5a:	7dbb      	ldrb	r3, [r7, #22]
 8006f5c:	2bff      	cmp	r3, #255	@ 0xff
 8006f5e:	d025      	beq.n	8006fac <USBD_LL_DataOutStage+0x15c>
 8006f60:	7dbb      	ldrb	r3, [r7, #22]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d122      	bne.n	8006fac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d117      	bne.n	8006fa2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f72:	7dba      	ldrb	r2, [r7, #22]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	32ae      	adds	r2, #174	@ 0xae
 8006f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00f      	beq.n	8006fa2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006f82:	7dba      	ldrb	r2, [r7, #22]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006f8a:	7dba      	ldrb	r2, [r7, #22]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	32ae      	adds	r2, #174	@ 0xae
 8006f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	7afa      	ldrb	r2, [r7, #11]
 8006f98:	4611      	mov	r1, r2
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	4798      	blx	r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006fa8:	7dfb      	ldrb	r3, [r7, #23]
 8006faa:	e000      	b.n	8006fae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	607a      	str	r2, [r7, #4]
 8006fc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d16f      	bne.n	80070aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3314      	adds	r3, #20
 8006fce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d15a      	bne.n	8007090 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	689a      	ldr	r2, [r3, #8]
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d914      	bls.n	8007010 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	1ad2      	subs	r2, r2, r3
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f001 f8e6 	bl	80081ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007002:	2300      	movs	r3, #0
 8007004:	2200      	movs	r2, #0
 8007006:	2100      	movs	r1, #0
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f001 fe45 	bl	8008c98 <USBD_LL_PrepareReceive>
 800700e:	e03f      	b.n	8007090 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	429a      	cmp	r2, r3
 800701a:	d11c      	bne.n	8007056 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007024:	429a      	cmp	r2, r3
 8007026:	d316      	bcc.n	8007056 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007032:	429a      	cmp	r2, r3
 8007034:	d20f      	bcs.n	8007056 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007036:	2200      	movs	r2, #0
 8007038:	2100      	movs	r1, #0
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f001 f8c7 	bl	80081ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007048:	2300      	movs	r3, #0
 800704a:	2200      	movs	r2, #0
 800704c:	2100      	movs	r1, #0
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f001 fe22 	bl	8008c98 <USBD_LL_PrepareReceive>
 8007054:	e01c      	b.n	8007090 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b03      	cmp	r3, #3
 8007060:	d10f      	bne.n	8007082 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d009      	beq.n	8007082 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007082:	2180      	movs	r1, #128	@ 0x80
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f001 fd5d 	bl	8008b44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f001 f8f1 	bl	8008272 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d03a      	beq.n	8007110 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7ff fe42 	bl	8006d24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80070a8:	e032      	b.n	8007110 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80070aa:	7afb      	ldrb	r3, [r7, #11]
 80070ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	4619      	mov	r1, r3
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 f985 	bl	80073c4 <USBD_CoreFindEP>
 80070ba:	4603      	mov	r3, r0
 80070bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	2bff      	cmp	r3, #255	@ 0xff
 80070c2:	d025      	beq.n	8007110 <USBD_LL_DataInStage+0x15a>
 80070c4:	7dfb      	ldrb	r3, [r7, #23]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d122      	bne.n	8007110 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d11c      	bne.n	8007110 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80070d6:	7dfa      	ldrb	r2, [r7, #23]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	32ae      	adds	r2, #174	@ 0xae
 80070dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d014      	beq.n	8007110 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80070e6:	7dfa      	ldrb	r2, [r7, #23]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80070ee:	7dfa      	ldrb	r2, [r7, #23]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	32ae      	adds	r2, #174	@ 0xae
 80070f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	7afa      	ldrb	r2, [r7, #11]
 80070fc:	4611      	mov	r1, r2
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	4798      	blx	r3
 8007102:	4603      	mov	r3, r0
 8007104:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007106:	7dbb      	ldrb	r3, [r7, #22]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800710c:	7dbb      	ldrb	r3, [r7, #22]
 800710e:	e000      	b.n	8007112 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007152:	2b00      	cmp	r3, #0
 8007154:	d014      	beq.n	8007180 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00e      	beq.n	8007180 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6852      	ldr	r2, [r2, #4]
 800716e:	b2d2      	uxtb	r2, r2
 8007170:	4611      	mov	r1, r2
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800717c:	2303      	movs	r3, #3
 800717e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007180:	2340      	movs	r3, #64	@ 0x40
 8007182:	2200      	movs	r2, #0
 8007184:	2100      	movs	r1, #0
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f001 fc97 	bl	8008aba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2240      	movs	r2, #64	@ 0x40
 8007198:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800719c:	2340      	movs	r3, #64	@ 0x40
 800719e:	2200      	movs	r2, #0
 80071a0:	2180      	movs	r1, #128	@ 0x80
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f001 fc89 	bl	8008aba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2240      	movs	r2, #64	@ 0x40
 80071b2:	621a      	str	r2, [r3, #32]

  return ret;
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	460b      	mov	r3, r1
 80071c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	78fa      	ldrb	r2, [r7, #3]
 80071ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d006      	beq.n	8007200 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2204      	movs	r2, #4
 8007204:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b04      	cmp	r3, #4
 8007228:	d106      	bne.n	8007238 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007230:	b2da      	uxtb	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b082      	sub	sp, #8
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b03      	cmp	r3, #3
 8007258:	d110      	bne.n	800727c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00b      	beq.n	800727c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d005      	beq.n	800727c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	460b      	mov	r3, r1
 8007290:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	32ae      	adds	r2, #174	@ 0xae
 800729c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e01c      	b.n	80072e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	d115      	bne.n	80072e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	32ae      	adds	r2, #174	@ 0xae
 80072be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00b      	beq.n	80072e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	32ae      	adds	r2, #174	@ 0xae
 80072d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	78fa      	ldrb	r2, [r7, #3]
 80072da:	4611      	mov	r1, r2
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	460b      	mov	r3, r1
 80072f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	32ae      	adds	r2, #174	@ 0xae
 8007300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007308:	2303      	movs	r3, #3
 800730a:	e01c      	b.n	8007346 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b03      	cmp	r3, #3
 8007316:	d115      	bne.n	8007344 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	32ae      	adds	r2, #174	@ 0xae
 8007322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	32ae      	adds	r2, #174	@ 0xae
 8007336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733c:	78fa      	ldrb	r2, [r7, #3]
 800733e:	4611      	mov	r1, r2
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00e      	beq.n	80073a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	6852      	ldr	r2, [r2, #4]
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	4611      	mov	r1, r2
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	4798      	blx	r3
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800739c:	2303      	movs	r3, #3
 800739e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	460b      	mov	r3, r1
 80073b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	460b      	mov	r3, r1
 80073ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b086      	sub	sp, #24
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	460b      	mov	r3, r1
 80073e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	885b      	ldrh	r3, [r3, #2]
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	7812      	ldrb	r2, [r2, #0]
 8007400:	4293      	cmp	r3, r2
 8007402:	d91f      	bls.n	8007444 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800740a:	e013      	b.n	8007434 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800740c:	f107 030a 	add.w	r3, r7, #10
 8007410:	4619      	mov	r1, r3
 8007412:	6978      	ldr	r0, [r7, #20]
 8007414:	f000 f81b 	bl	800744e <USBD_GetNextDesc>
 8007418:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	785b      	ldrb	r3, [r3, #1]
 800741e:	2b05      	cmp	r3, #5
 8007420:	d108      	bne.n	8007434 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	789b      	ldrb	r3, [r3, #2]
 800742a:	78fa      	ldrb	r2, [r7, #3]
 800742c:	429a      	cmp	r2, r3
 800742e:	d008      	beq.n	8007442 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007430:	2300      	movs	r3, #0
 8007432:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	885b      	ldrh	r3, [r3, #2]
 8007438:	b29a      	uxth	r2, r3
 800743a:	897b      	ldrh	r3, [r7, #10]
 800743c:	429a      	cmp	r2, r3
 800743e:	d8e5      	bhi.n	800740c <USBD_GetEpDesc+0x2e>
 8007440:	e000      	b.n	8007444 <USBD_GetEpDesc+0x66>
          break;
 8007442:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007444:	693b      	ldr	r3, [r7, #16]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800744e:	b480      	push	{r7}
 8007450:	b085      	sub	sp, #20
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	7812      	ldrb	r2, [r2, #0]
 8007464:	4413      	add	r3, r2
 8007466:	b29a      	uxth	r2, r3
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4413      	add	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007478:	68fb      	ldr	r3, [r7, #12]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007486:	b480      	push	{r7}
 8007488:	b087      	sub	sp, #28
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	3301      	adds	r3, #1
 800749c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80074a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80074a8:	021b      	lsls	r3, r3, #8
 80074aa:	b21a      	sxth	r2, r3
 80074ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	b21b      	sxth	r3, r3
 80074b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80074b6:	89fb      	ldrh	r3, [r7, #14]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	371c      	adds	r7, #28
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074da:	2b40      	cmp	r3, #64	@ 0x40
 80074dc:	d005      	beq.n	80074ea <USBD_StdDevReq+0x26>
 80074de:	2b40      	cmp	r3, #64	@ 0x40
 80074e0:	d857      	bhi.n	8007592 <USBD_StdDevReq+0xce>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00f      	beq.n	8007506 <USBD_StdDevReq+0x42>
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	d153      	bne.n	8007592 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	32ae      	adds	r2, #174	@ 0xae
 80074f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	4798      	blx	r3
 8007500:	4603      	mov	r3, r0
 8007502:	73fb      	strb	r3, [r7, #15]
      break;
 8007504:	e04a      	b.n	800759c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	2b09      	cmp	r3, #9
 800750c:	d83b      	bhi.n	8007586 <USBD_StdDevReq+0xc2>
 800750e:	a201      	add	r2, pc, #4	@ (adr r2, 8007514 <USBD_StdDevReq+0x50>)
 8007510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007514:	08007569 	.word	0x08007569
 8007518:	0800757d 	.word	0x0800757d
 800751c:	08007587 	.word	0x08007587
 8007520:	08007573 	.word	0x08007573
 8007524:	08007587 	.word	0x08007587
 8007528:	08007547 	.word	0x08007547
 800752c:	0800753d 	.word	0x0800753d
 8007530:	08007587 	.word	0x08007587
 8007534:	0800755f 	.word	0x0800755f
 8007538:	08007551 	.word	0x08007551
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fa3c 	bl	80079bc <USBD_GetDescriptor>
          break;
 8007544:	e024      	b.n	8007590 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fbcb 	bl	8007ce4 <USBD_SetAddress>
          break;
 800754e:	e01f      	b.n	8007590 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fc0a 	bl	8007d6c <USBD_SetConfig>
 8007558:	4603      	mov	r3, r0
 800755a:	73fb      	strb	r3, [r7, #15]
          break;
 800755c:	e018      	b.n	8007590 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fcad 	bl	8007ec0 <USBD_GetConfig>
          break;
 8007566:	e013      	b.n	8007590 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fcde 	bl	8007f2c <USBD_GetStatus>
          break;
 8007570:	e00e      	b.n	8007590 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fd0d 	bl	8007f94 <USBD_SetFeature>
          break;
 800757a:	e009      	b.n	8007590 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fd31 	bl	8007fe6 <USBD_ClrFeature>
          break;
 8007584:	e004      	b.n	8007590 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fd88 	bl	800809e <USBD_CtlError>
          break;
 800758e:	bf00      	nop
      }
      break;
 8007590:	e004      	b.n	800759c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fd82 	bl	800809e <USBD_CtlError>
      break;
 800759a:	bf00      	nop
  }

  return ret;
 800759c:	7bfb      	ldrb	r3, [r7, #15]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop

080075a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075be:	2b40      	cmp	r3, #64	@ 0x40
 80075c0:	d005      	beq.n	80075ce <USBD_StdItfReq+0x26>
 80075c2:	2b40      	cmp	r3, #64	@ 0x40
 80075c4:	d852      	bhi.n	800766c <USBD_StdItfReq+0xc4>
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <USBD_StdItfReq+0x26>
 80075ca:	2b20      	cmp	r3, #32
 80075cc:	d14e      	bne.n	800766c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	3b01      	subs	r3, #1
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d840      	bhi.n	800765e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	889b      	ldrh	r3, [r3, #4]
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d836      	bhi.n	8007654 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	889b      	ldrh	r3, [r3, #4]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	4619      	mov	r1, r3
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7ff fedb 	bl	80073aa <USBD_CoreFindIF>
 80075f4:	4603      	mov	r3, r0
 80075f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	2bff      	cmp	r3, #255	@ 0xff
 80075fc:	d01d      	beq.n	800763a <USBD_StdItfReq+0x92>
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d11a      	bne.n	800763a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007604:	7bba      	ldrb	r2, [r7, #14]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	32ae      	adds	r2, #174	@ 0xae
 800760a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00f      	beq.n	8007634 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007614:	7bba      	ldrb	r2, [r7, #14]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800761c:	7bba      	ldrb	r2, [r7, #14]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	32ae      	adds	r2, #174	@ 0xae
 8007622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	4798      	blx	r3
 800762e:	4603      	mov	r3, r0
 8007630:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007632:	e004      	b.n	800763e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007634:	2303      	movs	r3, #3
 8007636:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007638:	e001      	b.n	800763e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800763a:	2303      	movs	r3, #3
 800763c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	88db      	ldrh	r3, [r3, #6]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d110      	bne.n	8007668 <USBD_StdItfReq+0xc0>
 8007646:	7bfb      	ldrb	r3, [r7, #15]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10d      	bne.n	8007668 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fdfd 	bl	800824c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007652:	e009      	b.n	8007668 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fd21 	bl	800809e <USBD_CtlError>
          break;
 800765c:	e004      	b.n	8007668 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fd1c 	bl	800809e <USBD_CtlError>
          break;
 8007666:	e000      	b.n	800766a <USBD_StdItfReq+0xc2>
          break;
 8007668:	bf00      	nop
      }
      break;
 800766a:	e004      	b.n	8007676 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fd15 	bl	800809e <USBD_CtlError>
      break;
 8007674:	bf00      	nop
  }

  return ret;
 8007676:	7bfb      	ldrb	r3, [r7, #15]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	889b      	ldrh	r3, [r3, #4]
 8007692:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800769c:	2b40      	cmp	r3, #64	@ 0x40
 800769e:	d007      	beq.n	80076b0 <USBD_StdEPReq+0x30>
 80076a0:	2b40      	cmp	r3, #64	@ 0x40
 80076a2:	f200 817f 	bhi.w	80079a4 <USBD_StdEPReq+0x324>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d02a      	beq.n	8007700 <USBD_StdEPReq+0x80>
 80076aa:	2b20      	cmp	r3, #32
 80076ac:	f040 817a 	bne.w	80079a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	4619      	mov	r1, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7ff fe85 	bl	80073c4 <USBD_CoreFindEP>
 80076ba:	4603      	mov	r3, r0
 80076bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076be:	7b7b      	ldrb	r3, [r7, #13]
 80076c0:	2bff      	cmp	r3, #255	@ 0xff
 80076c2:	f000 8174 	beq.w	80079ae <USBD_StdEPReq+0x32e>
 80076c6:	7b7b      	ldrb	r3, [r7, #13]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f040 8170 	bne.w	80079ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80076ce:	7b7a      	ldrb	r2, [r7, #13]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80076d6:	7b7a      	ldrb	r2, [r7, #13]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	32ae      	adds	r2, #174	@ 0xae
 80076dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f000 8163 	beq.w	80079ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80076e8:	7b7a      	ldrb	r2, [r7, #13]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	32ae      	adds	r2, #174	@ 0xae
 80076ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	4798      	blx	r3
 80076fa:	4603      	mov	r3, r0
 80076fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076fe:	e156      	b.n	80079ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	785b      	ldrb	r3, [r3, #1]
 8007704:	2b03      	cmp	r3, #3
 8007706:	d008      	beq.n	800771a <USBD_StdEPReq+0x9a>
 8007708:	2b03      	cmp	r3, #3
 800770a:	f300 8145 	bgt.w	8007998 <USBD_StdEPReq+0x318>
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 809b 	beq.w	800784a <USBD_StdEPReq+0x1ca>
 8007714:	2b01      	cmp	r3, #1
 8007716:	d03c      	beq.n	8007792 <USBD_StdEPReq+0x112>
 8007718:	e13e      	b.n	8007998 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b02      	cmp	r3, #2
 8007724:	d002      	beq.n	800772c <USBD_StdEPReq+0xac>
 8007726:	2b03      	cmp	r3, #3
 8007728:	d016      	beq.n	8007758 <USBD_StdEPReq+0xd8>
 800772a:	e02c      	b.n	8007786 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00d      	beq.n	800774e <USBD_StdEPReq+0xce>
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	2b80      	cmp	r3, #128	@ 0x80
 8007736:	d00a      	beq.n	800774e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007738:	7bbb      	ldrb	r3, [r7, #14]
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 fa01 	bl	8008b44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007742:	2180      	movs	r1, #128	@ 0x80
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f001 f9fd 	bl	8008b44 <USBD_LL_StallEP>
 800774a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800774c:	e020      	b.n	8007790 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fca4 	bl	800809e <USBD_CtlError>
              break;
 8007756:	e01b      	b.n	8007790 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	885b      	ldrh	r3, [r3, #2]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10e      	bne.n	800777e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00b      	beq.n	800777e <USBD_StdEPReq+0xfe>
 8007766:	7bbb      	ldrb	r3, [r7, #14]
 8007768:	2b80      	cmp	r3, #128	@ 0x80
 800776a:	d008      	beq.n	800777e <USBD_StdEPReq+0xfe>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	88db      	ldrh	r3, [r3, #6]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d104      	bne.n	800777e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f001 f9e3 	bl	8008b44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fd64 	bl	800824c <USBD_CtlSendStatus>

              break;
 8007784:	e004      	b.n	8007790 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fc88 	bl	800809e <USBD_CtlError>
              break;
 800778e:	bf00      	nop
          }
          break;
 8007790:	e107      	b.n	80079a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b02      	cmp	r3, #2
 800779c:	d002      	beq.n	80077a4 <USBD_StdEPReq+0x124>
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d016      	beq.n	80077d0 <USBD_StdEPReq+0x150>
 80077a2:	e04b      	b.n	800783c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00d      	beq.n	80077c6 <USBD_StdEPReq+0x146>
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	2b80      	cmp	r3, #128	@ 0x80
 80077ae:	d00a      	beq.n	80077c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f001 f9c5 	bl	8008b44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077ba:	2180      	movs	r1, #128	@ 0x80
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 f9c1 	bl	8008b44 <USBD_LL_StallEP>
 80077c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077c4:	e040      	b.n	8007848 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fc68 	bl	800809e <USBD_CtlError>
              break;
 80077ce:	e03b      	b.n	8007848 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	885b      	ldrh	r3, [r3, #2]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d136      	bne.n	8007846 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d004      	beq.n	80077ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	4619      	mov	r1, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f001 f9cb 	bl	8008b82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fd2d 	bl	800824c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff fde4 	bl	80073c4 <USBD_CoreFindEP>
 80077fc:	4603      	mov	r3, r0
 80077fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007800:	7b7b      	ldrb	r3, [r7, #13]
 8007802:	2bff      	cmp	r3, #255	@ 0xff
 8007804:	d01f      	beq.n	8007846 <USBD_StdEPReq+0x1c6>
 8007806:	7b7b      	ldrb	r3, [r7, #13]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d11c      	bne.n	8007846 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800780c:	7b7a      	ldrb	r2, [r7, #13]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007814:	7b7a      	ldrb	r2, [r7, #13]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	32ae      	adds	r2, #174	@ 0xae
 800781a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d010      	beq.n	8007846 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007824:	7b7a      	ldrb	r2, [r7, #13]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	32ae      	adds	r2, #174	@ 0xae
 800782a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	4798      	blx	r3
 8007836:	4603      	mov	r3, r0
 8007838:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800783a:	e004      	b.n	8007846 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fc2d 	bl	800809e <USBD_CtlError>
              break;
 8007844:	e000      	b.n	8007848 <USBD_StdEPReq+0x1c8>
              break;
 8007846:	bf00      	nop
          }
          break;
 8007848:	e0ab      	b.n	80079a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b02      	cmp	r3, #2
 8007854:	d002      	beq.n	800785c <USBD_StdEPReq+0x1dc>
 8007856:	2b03      	cmp	r3, #3
 8007858:	d032      	beq.n	80078c0 <USBD_StdEPReq+0x240>
 800785a:	e097      	b.n	800798c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d007      	beq.n	8007872 <USBD_StdEPReq+0x1f2>
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b80      	cmp	r3, #128	@ 0x80
 8007866:	d004      	beq.n	8007872 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fc17 	bl	800809e <USBD_CtlError>
                break;
 8007870:	e091      	b.n	8007996 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007872:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007876:	2b00      	cmp	r3, #0
 8007878:	da0b      	bge.n	8007892 <USBD_StdEPReq+0x212>
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007880:	4613      	mov	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	3310      	adds	r3, #16
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	4413      	add	r3, r2
 800788e:	3304      	adds	r3, #4
 8007890:	e00b      	b.n	80078aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007892:	7bbb      	ldrb	r3, [r7, #14]
 8007894:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	4413      	add	r3, r2
 80078a8:	3304      	adds	r3, #4
 80078aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2200      	movs	r2, #0
 80078b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2202      	movs	r2, #2
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fc6d 	bl	8008198 <USBD_CtlSendData>
              break;
 80078be:	e06a      	b.n	8007996 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	da11      	bge.n	80078ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	f003 020f 	and.w	r2, r3, #15
 80078ce:	6879      	ldr	r1, [r7, #4]
 80078d0:	4613      	mov	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	440b      	add	r3, r1
 80078da:	3324      	adds	r3, #36	@ 0x24
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d117      	bne.n	8007912 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fbda 	bl	800809e <USBD_CtlError>
                  break;
 80078ea:	e054      	b.n	8007996 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
 80078ee:	f003 020f 	and.w	r2, r3, #15
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	4613      	mov	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	440b      	add	r3, r1
 80078fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d104      	bne.n	8007912 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fbc7 	bl	800809e <USBD_CtlError>
                  break;
 8007910:	e041      	b.n	8007996 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007912:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007916:	2b00      	cmp	r3, #0
 8007918:	da0b      	bge.n	8007932 <USBD_StdEPReq+0x2b2>
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007920:	4613      	mov	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	3310      	adds	r3, #16
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	4413      	add	r3, r2
 800792e:	3304      	adds	r3, #4
 8007930:	e00b      	b.n	800794a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007938:	4613      	mov	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	4413      	add	r3, r2
 8007948:	3304      	adds	r3, #4
 800794a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <USBD_StdEPReq+0x2d8>
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	2b80      	cmp	r3, #128	@ 0x80
 8007956:	d103      	bne.n	8007960 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2200      	movs	r2, #0
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	e00e      	b.n	800797e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f001 f92b 	bl	8008bc0 <USBD_LL_IsStallEP>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2201      	movs	r2, #1
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	e002      	b.n	800797e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2200      	movs	r2, #0
 800797c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2202      	movs	r2, #2
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fc07 	bl	8008198 <USBD_CtlSendData>
              break;
 800798a:	e004      	b.n	8007996 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fb85 	bl	800809e <USBD_CtlError>
              break;
 8007994:	bf00      	nop
          }
          break;
 8007996:	e004      	b.n	80079a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fb7f 	bl	800809e <USBD_CtlError>
          break;
 80079a0:	bf00      	nop
      }
      break;
 80079a2:	e005      	b.n	80079b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fb79 	bl	800809e <USBD_CtlError>
      break;
 80079ac:	e000      	b.n	80079b0 <USBD_StdEPReq+0x330>
      break;
 80079ae:	bf00      	nop
  }

  return ret;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
	...

080079bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	885b      	ldrh	r3, [r3, #2]
 80079d6:	0a1b      	lsrs	r3, r3, #8
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	2b0e      	cmp	r3, #14
 80079de:	f200 8152 	bhi.w	8007c86 <USBD_GetDescriptor+0x2ca>
 80079e2:	a201      	add	r2, pc, #4	@ (adr r2, 80079e8 <USBD_GetDescriptor+0x2c>)
 80079e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e8:	08007a59 	.word	0x08007a59
 80079ec:	08007a71 	.word	0x08007a71
 80079f0:	08007ab1 	.word	0x08007ab1
 80079f4:	08007c87 	.word	0x08007c87
 80079f8:	08007c87 	.word	0x08007c87
 80079fc:	08007c27 	.word	0x08007c27
 8007a00:	08007c53 	.word	0x08007c53
 8007a04:	08007c87 	.word	0x08007c87
 8007a08:	08007c87 	.word	0x08007c87
 8007a0c:	08007c87 	.word	0x08007c87
 8007a10:	08007c87 	.word	0x08007c87
 8007a14:	08007c87 	.word	0x08007c87
 8007a18:	08007c87 	.word	0x08007c87
 8007a1c:	08007c87 	.word	0x08007c87
 8007a20:	08007a25 	.word	0x08007a25
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00b      	beq.n	8007a48 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	7c12      	ldrb	r2, [r2, #16]
 8007a3c:	f107 0108 	add.w	r1, r7, #8
 8007a40:	4610      	mov	r0, r2
 8007a42:	4798      	blx	r3
 8007a44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a46:	e126      	b.n	8007c96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fb27 	bl	800809e <USBD_CtlError>
        err++;
 8007a50:	7afb      	ldrb	r3, [r7, #11]
 8007a52:	3301      	adds	r3, #1
 8007a54:	72fb      	strb	r3, [r7, #11]
      break;
 8007a56:	e11e      	b.n	8007c96 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	7c12      	ldrb	r2, [r2, #16]
 8007a64:	f107 0108 	add.w	r1, r7, #8
 8007a68:	4610      	mov	r0, r2
 8007a6a:	4798      	blx	r3
 8007a6c:	60f8      	str	r0, [r7, #12]
      break;
 8007a6e:	e112      	b.n	8007c96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	7c1b      	ldrb	r3, [r3, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10d      	bne.n	8007a94 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a80:	f107 0208 	add.w	r2, r7, #8
 8007a84:	4610      	mov	r0, r2
 8007a86:	4798      	blx	r3
 8007a88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	2202      	movs	r2, #2
 8007a90:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a92:	e100      	b.n	8007c96 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9c:	f107 0208 	add.w	r2, r7, #8
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	4798      	blx	r3
 8007aa4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	2202      	movs	r2, #2
 8007aac:	701a      	strb	r2, [r3, #0]
      break;
 8007aae:	e0f2      	b.n	8007c96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	885b      	ldrh	r3, [r3, #2]
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b05      	cmp	r3, #5
 8007ab8:	f200 80ac 	bhi.w	8007c14 <USBD_GetDescriptor+0x258>
 8007abc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac4 <USBD_GetDescriptor+0x108>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007add 	.word	0x08007add
 8007ac8:	08007b11 	.word	0x08007b11
 8007acc:	08007b45 	.word	0x08007b45
 8007ad0:	08007b79 	.word	0x08007b79
 8007ad4:	08007bad 	.word	0x08007bad
 8007ad8:	08007be1 	.word	0x08007be1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00b      	beq.n	8007b00 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	7c12      	ldrb	r2, [r2, #16]
 8007af4:	f107 0108 	add.w	r1, r7, #8
 8007af8:	4610      	mov	r0, r2
 8007afa:	4798      	blx	r3
 8007afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007afe:	e091      	b.n	8007c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 facb 	bl	800809e <USBD_CtlError>
            err++;
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b0e:	e089      	b.n	8007c24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00b      	beq.n	8007b34 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	7c12      	ldrb	r2, [r2, #16]
 8007b28:	f107 0108 	add.w	r1, r7, #8
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	4798      	blx	r3
 8007b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b32:	e077      	b.n	8007c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fab1 	bl	800809e <USBD_CtlError>
            err++;
 8007b3c:	7afb      	ldrb	r3, [r7, #11]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	72fb      	strb	r3, [r7, #11]
          break;
 8007b42:	e06f      	b.n	8007c24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	7c12      	ldrb	r2, [r2, #16]
 8007b5c:	f107 0108 	add.w	r1, r7, #8
 8007b60:	4610      	mov	r0, r2
 8007b62:	4798      	blx	r3
 8007b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b66:	e05d      	b.n	8007c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fa97 	bl	800809e <USBD_CtlError>
            err++;
 8007b70:	7afb      	ldrb	r3, [r7, #11]
 8007b72:	3301      	adds	r3, #1
 8007b74:	72fb      	strb	r3, [r7, #11]
          break;
 8007b76:	e055      	b.n	8007c24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00b      	beq.n	8007b9c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	7c12      	ldrb	r2, [r2, #16]
 8007b90:	f107 0108 	add.w	r1, r7, #8
 8007b94:	4610      	mov	r0, r2
 8007b96:	4798      	blx	r3
 8007b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b9a:	e043      	b.n	8007c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fa7d 	bl	800809e <USBD_CtlError>
            err++;
 8007ba4:	7afb      	ldrb	r3, [r7, #11]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8007baa:	e03b      	b.n	8007c24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00b      	beq.n	8007bd0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	7c12      	ldrb	r2, [r2, #16]
 8007bc4:	f107 0108 	add.w	r1, r7, #8
 8007bc8:	4610      	mov	r0, r2
 8007bca:	4798      	blx	r3
 8007bcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bce:	e029      	b.n	8007c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fa63 	bl	800809e <USBD_CtlError>
            err++;
 8007bd8:	7afb      	ldrb	r3, [r7, #11]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	72fb      	strb	r3, [r7, #11]
          break;
 8007bde:	e021      	b.n	8007c24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00b      	beq.n	8007c04 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	7c12      	ldrb	r2, [r2, #16]
 8007bf8:	f107 0108 	add.w	r1, r7, #8
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4798      	blx	r3
 8007c00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c02:	e00f      	b.n	8007c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa49 	bl	800809e <USBD_CtlError>
            err++;
 8007c0c:	7afb      	ldrb	r3, [r7, #11]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	72fb      	strb	r3, [r7, #11]
          break;
 8007c12:	e007      	b.n	8007c24 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fa41 	bl	800809e <USBD_CtlError>
          err++;
 8007c1c:	7afb      	ldrb	r3, [r7, #11]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007c22:	bf00      	nop
      }
      break;
 8007c24:	e037      	b.n	8007c96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	7c1b      	ldrb	r3, [r3, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d109      	bne.n	8007c42 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c36:	f107 0208 	add.w	r2, r7, #8
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	4798      	blx	r3
 8007c3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c40:	e029      	b.n	8007c96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fa2a 	bl	800809e <USBD_CtlError>
        err++;
 8007c4a:	7afb      	ldrb	r3, [r7, #11]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c50:	e021      	b.n	8007c96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	7c1b      	ldrb	r3, [r3, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10d      	bne.n	8007c76 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c62:	f107 0208 	add.w	r2, r7, #8
 8007c66:	4610      	mov	r0, r2
 8007c68:	4798      	blx	r3
 8007c6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	2207      	movs	r2, #7
 8007c72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c74:	e00f      	b.n	8007c96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fa10 	bl	800809e <USBD_CtlError>
        err++;
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
 8007c80:	3301      	adds	r3, #1
 8007c82:	72fb      	strb	r3, [r7, #11]
      break;
 8007c84:	e007      	b.n	8007c96 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fa08 	bl	800809e <USBD_CtlError>
      err++;
 8007c8e:	7afb      	ldrb	r3, [r7, #11]
 8007c90:	3301      	adds	r3, #1
 8007c92:	72fb      	strb	r3, [r7, #11]
      break;
 8007c94:	bf00      	nop
  }

  if (err != 0U)
 8007c96:	7afb      	ldrb	r3, [r7, #11]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d11e      	bne.n	8007cda <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	88db      	ldrh	r3, [r3, #6]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d016      	beq.n	8007cd2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007ca4:	893b      	ldrh	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00e      	beq.n	8007cc8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	88da      	ldrh	r2, [r3, #6]
 8007cae:	893b      	ldrh	r3, [r7, #8]
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	bf28      	it	cs
 8007cb4:	4613      	movcs	r3, r2
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cba:	893b      	ldrh	r3, [r7, #8]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	68f9      	ldr	r1, [r7, #12]
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fa69 	bl	8008198 <USBD_CtlSendData>
 8007cc6:	e009      	b.n	8007cdc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f9e7 	bl	800809e <USBD_CtlError>
 8007cd0:	e004      	b.n	8007cdc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 faba 	bl	800824c <USBD_CtlSendStatus>
 8007cd8:	e000      	b.n	8007cdc <USBD_GetDescriptor+0x320>
    return;
 8007cda:	bf00      	nop
  }
}
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop

08007ce4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	889b      	ldrh	r3, [r3, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d131      	bne.n	8007d5a <USBD_SetAddress+0x76>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	88db      	ldrh	r3, [r3, #6]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d12d      	bne.n	8007d5a <USBD_SetAddress+0x76>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	885b      	ldrh	r3, [r3, #2]
 8007d02:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d04:	d829      	bhi.n	8007d5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	885b      	ldrh	r3, [r3, #2]
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d104      	bne.n	8007d28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f9bc 	bl	800809e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d26:	e01d      	b.n	8007d64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	7bfa      	ldrb	r2, [r7, #15]
 8007d2c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 ff6f 	bl	8008c18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fa86 	bl	800824c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d004      	beq.n	8007d50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2202      	movs	r2, #2
 8007d4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4e:	e009      	b.n	8007d64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d58:	e004      	b.n	8007d64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f99e 	bl	800809e <USBD_CtlError>
  }
}
 8007d62:	bf00      	nop
 8007d64:	bf00      	nop
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	885b      	ldrh	r3, [r3, #2]
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	4b4e      	ldr	r3, [pc, #312]	@ (8007ebc <USBD_SetConfig+0x150>)
 8007d82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d84:	4b4d      	ldr	r3, [pc, #308]	@ (8007ebc <USBD_SetConfig+0x150>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d905      	bls.n	8007d98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f985 	bl	800809e <USBD_CtlError>
    return USBD_FAIL;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e08c      	b.n	8007eb2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d002      	beq.n	8007daa <USBD_SetConfig+0x3e>
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d029      	beq.n	8007dfc <USBD_SetConfig+0x90>
 8007da8:	e075      	b.n	8007e96 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007daa:	4b44      	ldr	r3, [pc, #272]	@ (8007ebc <USBD_SetConfig+0x150>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d020      	beq.n	8007df4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007db2:	4b42      	ldr	r3, [pc, #264]	@ (8007ebc <USBD_SetConfig+0x150>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007dbc:	4b3f      	ldr	r3, [pc, #252]	@ (8007ebc <USBD_SetConfig+0x150>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7fe ffb9 	bl	8006d3a <USBD_SetClassConfig>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d008      	beq.n	8007de4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f962 	bl	800809e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2202      	movs	r2, #2
 8007dde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007de2:	e065      	b.n	8007eb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fa31 	bl	800824c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2203      	movs	r2, #3
 8007dee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007df2:	e05d      	b.n	8007eb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fa29 	bl	800824c <USBD_CtlSendStatus>
      break;
 8007dfa:	e059      	b.n	8007eb0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8007ebc <USBD_SetConfig+0x150>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d112      	bne.n	8007e2a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8007ebc <USBD_SetConfig+0x150>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	461a      	mov	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e16:	4b29      	ldr	r3, [pc, #164]	@ (8007ebc <USBD_SetConfig+0x150>)
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7fe ffa8 	bl	8006d72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fa12 	bl	800824c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e28:	e042      	b.n	8007eb0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007e2a:	4b24      	ldr	r3, [pc, #144]	@ (8007ebc <USBD_SetConfig+0x150>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d02a      	beq.n	8007e8e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7fe ff96 	bl	8006d72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e46:	4b1d      	ldr	r3, [pc, #116]	@ (8007ebc <USBD_SetConfig+0x150>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e50:	4b1a      	ldr	r3, [pc, #104]	@ (8007ebc <USBD_SetConfig+0x150>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	4619      	mov	r1, r3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7fe ff6f 	bl	8006d3a <USBD_SetClassConfig>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00f      	beq.n	8007e86 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f918 	bl	800809e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7fe ff7b 	bl	8006d72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007e84:	e014      	b.n	8007eb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f9e0 	bl	800824c <USBD_CtlSendStatus>
      break;
 8007e8c:	e010      	b.n	8007eb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f9dc 	bl	800824c <USBD_CtlSendStatus>
      break;
 8007e94:	e00c      	b.n	8007eb0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f900 	bl	800809e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e9e:	4b07      	ldr	r3, [pc, #28]	@ (8007ebc <USBD_SetConfig+0x150>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7fe ff64 	bl	8006d72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	73fb      	strb	r3, [r7, #15]
      break;
 8007eae:	bf00      	nop
  }

  return ret;
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	24000188 	.word	0x24000188

08007ec0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	88db      	ldrh	r3, [r3, #6]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d004      	beq.n	8007edc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f8e2 	bl	800809e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007eda:	e023      	b.n	8007f24 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	dc02      	bgt.n	8007eee <USBD_GetConfig+0x2e>
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	dc03      	bgt.n	8007ef4 <USBD_GetConfig+0x34>
 8007eec:	e015      	b.n	8007f1a <USBD_GetConfig+0x5a>
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d00b      	beq.n	8007f0a <USBD_GetConfig+0x4a>
 8007ef2:	e012      	b.n	8007f1a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	3308      	adds	r3, #8
 8007efe:	2201      	movs	r2, #1
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f948 	bl	8008198 <USBD_CtlSendData>
        break;
 8007f08:	e00c      	b.n	8007f24 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	2201      	movs	r2, #1
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f940 	bl	8008198 <USBD_CtlSendData>
        break;
 8007f18:	e004      	b.n	8007f24 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f8be 	bl	800809e <USBD_CtlError>
        break;
 8007f22:	bf00      	nop
}
 8007f24:	bf00      	nop
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d81e      	bhi.n	8007f82 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	88db      	ldrh	r3, [r3, #6]
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d004      	beq.n	8007f56 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f8a5 	bl	800809e <USBD_CtlError>
        break;
 8007f54:	e01a      	b.n	8007f8c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d005      	beq.n	8007f72 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	f043 0202 	orr.w	r2, r3, #2
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	330c      	adds	r3, #12
 8007f76:	2202      	movs	r2, #2
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f90c 	bl	8008198 <USBD_CtlSendData>
      break;
 8007f80:	e004      	b.n	8007f8c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f88a 	bl	800809e <USBD_CtlError>
      break;
 8007f8a:	bf00      	nop
  }
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	885b      	ldrh	r3, [r3, #2]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d107      	bne.n	8007fb6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f94c 	bl	800824c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007fb4:	e013      	b.n	8007fde <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	885b      	ldrh	r3, [r3, #2]
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d10b      	bne.n	8007fd6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	889b      	ldrh	r3, [r3, #4]
 8007fc2:	0a1b      	lsrs	r3, r3, #8
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f93c 	bl	800824c <USBD_CtlSendStatus>
}
 8007fd4:	e003      	b.n	8007fde <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f860 	bl	800809e <USBD_CtlError>
}
 8007fde:	bf00      	nop
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d80b      	bhi.n	8008016 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	885b      	ldrh	r3, [r3, #2]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d10c      	bne.n	8008020 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f91c 	bl	800824c <USBD_CtlSendStatus>
      }
      break;
 8008014:	e004      	b.n	8008020 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f840 	bl	800809e <USBD_CtlError>
      break;
 800801e:	e000      	b.n	8008022 <USBD_ClrFeature+0x3c>
      break;
 8008020:	bf00      	nop
  }
}
 8008022:	bf00      	nop
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b084      	sub	sp, #16
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	781a      	ldrb	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3301      	adds	r3, #1
 8008044:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	781a      	ldrb	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	3301      	adds	r3, #1
 8008052:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f7ff fa16 	bl	8007486 <SWAPBYTE>
 800805a:	4603      	mov	r3, r0
 800805c:	461a      	mov	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3301      	adds	r3, #1
 8008066:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3301      	adds	r3, #1
 800806c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f7ff fa09 	bl	8007486 <SWAPBYTE>
 8008074:	4603      	mov	r3, r0
 8008076:	461a      	mov	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3301      	adds	r3, #1
 8008080:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3301      	adds	r3, #1
 8008086:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f7ff f9fc 	bl	8007486 <SWAPBYTE>
 800808e:	4603      	mov	r3, r0
 8008090:	461a      	mov	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	80da      	strh	r2, [r3, #6]
}
 8008096:	bf00      	nop
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b082      	sub	sp, #8
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80080a8:	2180      	movs	r1, #128	@ 0x80
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fd4a 	bl	8008b44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80080b0:	2100      	movs	r1, #0
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fd46 	bl	8008b44 <USBD_LL_StallEP>
}
 80080b8:	bf00      	nop
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d042      	beq.n	800815c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80080da:	6938      	ldr	r0, [r7, #16]
 80080dc:	f000 f842 	bl	8008164 <USBD_GetLen>
 80080e0:	4603      	mov	r3, r0
 80080e2:	3301      	adds	r3, #1
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080ea:	d808      	bhi.n	80080fe <USBD_GetString+0x3e>
 80080ec:	6938      	ldr	r0, [r7, #16]
 80080ee:	f000 f839 	bl	8008164 <USBD_GetLen>
 80080f2:	4603      	mov	r3, r0
 80080f4:	3301      	adds	r3, #1
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	005b      	lsls	r3, r3, #1
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	e001      	b.n	8008102 <USBD_GetString+0x42>
 80080fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008106:	7dfb      	ldrb	r3, [r7, #23]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	4413      	add	r3, r2
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	7812      	ldrb	r2, [r2, #0]
 8008110:	701a      	strb	r2, [r3, #0]
  idx++;
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	3301      	adds	r3, #1
 8008116:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	4413      	add	r3, r2
 800811e:	2203      	movs	r2, #3
 8008120:	701a      	strb	r2, [r3, #0]
  idx++;
 8008122:	7dfb      	ldrb	r3, [r7, #23]
 8008124:	3301      	adds	r3, #1
 8008126:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008128:	e013      	b.n	8008152 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	4413      	add	r3, r2
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	7812      	ldrb	r2, [r2, #0]
 8008134:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	3301      	adds	r3, #1
 800813a:	613b      	str	r3, [r7, #16]
    idx++;
 800813c:	7dfb      	ldrb	r3, [r7, #23]
 800813e:	3301      	adds	r3, #1
 8008140:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008142:	7dfb      	ldrb	r3, [r7, #23]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	4413      	add	r3, r2
 8008148:	2200      	movs	r2, #0
 800814a:	701a      	strb	r2, [r3, #0]
    idx++;
 800814c:	7dfb      	ldrb	r3, [r7, #23]
 800814e:	3301      	adds	r3, #1
 8008150:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e7      	bne.n	800812a <USBD_GetString+0x6a>
 800815a:	e000      	b.n	800815e <USBD_GetString+0x9e>
    return;
 800815c:	bf00      	nop
  }
}
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008174:	e005      	b.n	8008182 <USBD_GetLen+0x1e>
  {
    len++;
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	3301      	adds	r3, #1
 800817a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	3301      	adds	r3, #1
 8008180:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f5      	bne.n	8008176 <USBD_GetLen+0x12>
  }

  return len;
 800818a:	7bfb      	ldrb	r3, [r7, #15]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	2100      	movs	r1, #0
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 fd49 	bl	8008c56 <USBD_LL_Transmit>

  return USBD_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	60f8      	str	r0, [r7, #12]
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	2100      	movs	r1, #0
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 fd38 	bl	8008c56 <USBD_LL_Transmit>

  return USBD_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2203      	movs	r2, #3
 8008200:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	2100      	movs	r1, #0
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 fd3c 	bl	8008c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	2100      	movs	r1, #0
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 fd2b 	bl	8008c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2204      	movs	r2, #4
 8008258:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800825c:	2300      	movs	r3, #0
 800825e:	2200      	movs	r2, #0
 8008260:	2100      	movs	r1, #0
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fcf7 	bl	8008c56 <USBD_LL_Transmit>

  return USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2205      	movs	r2, #5
 800827e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008282:	2300      	movs	r3, #0
 8008284:	2200      	movs	r2, #0
 8008286:	2100      	movs	r1, #0
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fd05 	bl	8008c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800829c:	2200      	movs	r2, #0
 800829e:	4913      	ldr	r1, [pc, #76]	@ (80082ec <MX_USB_DEVICE_Init+0x54>)
 80082a0:	4813      	ldr	r0, [pc, #76]	@ (80082f0 <MX_USB_DEVICE_Init+0x58>)
 80082a2:	f7fe fccd 	bl	8006c40 <USBD_Init>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082ac:	f7f8 f972 	bl	8000594 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80082b0:	4910      	ldr	r1, [pc, #64]	@ (80082f4 <MX_USB_DEVICE_Init+0x5c>)
 80082b2:	480f      	ldr	r0, [pc, #60]	@ (80082f0 <MX_USB_DEVICE_Init+0x58>)
 80082b4:	f7fe fcf4 	bl	8006ca0 <USBD_RegisterClass>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082be:	f7f8 f969 	bl	8000594 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082c2:	490d      	ldr	r1, [pc, #52]	@ (80082f8 <MX_USB_DEVICE_Init+0x60>)
 80082c4:	480a      	ldr	r0, [pc, #40]	@ (80082f0 <MX_USB_DEVICE_Init+0x58>)
 80082c6:	f7fe fc2b 	bl	8006b20 <USBD_CDC_RegisterInterface>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80082d0:	f7f8 f960 	bl	8000594 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80082d4:	4806      	ldr	r0, [pc, #24]	@ (80082f0 <MX_USB_DEVICE_Init+0x58>)
 80082d6:	f7fe fd19 	bl	8006d0c <USBD_Start>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80082e0:	f7f8 f958 	bl	8000594 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80082e4:	f7fa f98c 	bl	8002600 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082e8:	bf00      	nop
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	240000bc 	.word	0x240000bc
 80082f0:	2400018c 	.word	0x2400018c
 80082f4:	24000028 	.word	0x24000028
 80082f8:	240000a8 	.word	0x240000a8

080082fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008300:	2200      	movs	r2, #0
 8008302:	4905      	ldr	r1, [pc, #20]	@ (8008318 <CDC_Init_FS+0x1c>)
 8008304:	4805      	ldr	r0, [pc, #20]	@ (800831c <CDC_Init_FS+0x20>)
 8008306:	f7fe fc25 	bl	8006b54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800830a:	4905      	ldr	r1, [pc, #20]	@ (8008320 <CDC_Init_FS+0x24>)
 800830c:	4803      	ldr	r0, [pc, #12]	@ (800831c <CDC_Init_FS+0x20>)
 800830e:	f7fe fc43 	bl	8006b98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008312:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008314:	4618      	mov	r0, r3
 8008316:	bd80      	pop	{r7, pc}
 8008318:	24000c68 	.word	0x24000c68
 800831c:	2400018c 	.word	0x2400018c
 8008320:	24000468 	.word	0x24000468

08008324 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008324:	b480      	push	{r7}
 8008326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008328:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800832a:	4618      	mov	r0, r3
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	4603      	mov	r3, r0
 800833c:	6039      	str	r1, [r7, #0]
 800833e:	71fb      	strb	r3, [r7, #7]
 8008340:	4613      	mov	r3, r2
 8008342:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008344:	79fb      	ldrb	r3, [r7, #7]
 8008346:	2b23      	cmp	r3, #35	@ 0x23
 8008348:	d84a      	bhi.n	80083e0 <CDC_Control_FS+0xac>
 800834a:	a201      	add	r2, pc, #4	@ (adr r2, 8008350 <CDC_Control_FS+0x1c>)
 800834c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008350:	080083e1 	.word	0x080083e1
 8008354:	080083e1 	.word	0x080083e1
 8008358:	080083e1 	.word	0x080083e1
 800835c:	080083e1 	.word	0x080083e1
 8008360:	080083e1 	.word	0x080083e1
 8008364:	080083e1 	.word	0x080083e1
 8008368:	080083e1 	.word	0x080083e1
 800836c:	080083e1 	.word	0x080083e1
 8008370:	080083e1 	.word	0x080083e1
 8008374:	080083e1 	.word	0x080083e1
 8008378:	080083e1 	.word	0x080083e1
 800837c:	080083e1 	.word	0x080083e1
 8008380:	080083e1 	.word	0x080083e1
 8008384:	080083e1 	.word	0x080083e1
 8008388:	080083e1 	.word	0x080083e1
 800838c:	080083e1 	.word	0x080083e1
 8008390:	080083e1 	.word	0x080083e1
 8008394:	080083e1 	.word	0x080083e1
 8008398:	080083e1 	.word	0x080083e1
 800839c:	080083e1 	.word	0x080083e1
 80083a0:	080083e1 	.word	0x080083e1
 80083a4:	080083e1 	.word	0x080083e1
 80083a8:	080083e1 	.word	0x080083e1
 80083ac:	080083e1 	.word	0x080083e1
 80083b0:	080083e1 	.word	0x080083e1
 80083b4:	080083e1 	.word	0x080083e1
 80083b8:	080083e1 	.word	0x080083e1
 80083bc:	080083e1 	.word	0x080083e1
 80083c0:	080083e1 	.word	0x080083e1
 80083c4:	080083e1 	.word	0x080083e1
 80083c8:	080083e1 	.word	0x080083e1
 80083cc:	080083e1 	.word	0x080083e1
 80083d0:	080083e1 	.word	0x080083e1
 80083d4:	080083e1 	.word	0x080083e1
 80083d8:	080083e1 	.word	0x080083e1
 80083dc:	080083e1 	.word	0x080083e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80083e0:	bf00      	nop
  }

  return (USBD_OK);
 80083e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b088      	sub	sp, #32
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	for(uint32_t i=0; i< *Len; i++)
 80083fa:	2300      	movs	r3, #0
 80083fc:	61fb      	str	r3, [r7, #28]
 80083fe:	e04a      	b.n	8008496 <CDC_Receive_FS+0xa6>
	{
		char c = (char)Buf[i];
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	4413      	add	r3, r2
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	76fb      	strb	r3, [r7, #27]

		if(c=='\n'|| c== '\r')
 800840a:	7efb      	ldrb	r3, [r7, #27]
 800840c:	2b0a      	cmp	r3, #10
 800840e:	d002      	beq.n	8008416 <CDC_Receive_FS+0x26>
 8008410:	7efb      	ldrb	r3, [r7, #27]
 8008412:	2b0d      	cmp	r3, #13
 8008414:	d12a      	bne.n	800846c <CDC_Receive_FS+0x7c>
		{
			if(lidx>0)
 8008416:	4b28      	ldr	r3, [pc, #160]	@ (80084b8 <CDC_Receive_FS+0xc8>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d022      	beq.n	8008464 <CDC_Receive_FS+0x74>
			{
				 linebuf[lidx]='\0';
 800841e:	4b26      	ldr	r3, [pc, #152]	@ (80084b8 <CDC_Receive_FS+0xc8>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	4b25      	ldr	r3, [pc, #148]	@ (80084bc <CDC_Receive_FS+0xcc>)
 8008426:	2100      	movs	r1, #0
 8008428:	5499      	strb	r1, [r3, r2]
				 char* comma = strchr(linebuf,',');
 800842a:	212c      	movs	r1, #44	@ 0x2c
 800842c:	4823      	ldr	r0, [pc, #140]	@ (80084bc <CDC_Receive_FS+0xcc>)
 800842e:	f000 fd2b 	bl	8008e88 <strchr>
 8008432:	6178      	str	r0, [r7, #20]
				 if(comma)
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d014      	beq.n	8008464 <CDC_Receive_FS+0x74>
				 {
					 *comma = '\0';
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	2200      	movs	r2, #0
 800843e:	701a      	strb	r2, [r3, #0]
					 unsigned long on_ms = strtoul(linebuf , NULL, 10);
 8008440:	220a      	movs	r2, #10
 8008442:	2100      	movs	r1, #0
 8008444:	481d      	ldr	r0, [pc, #116]	@ (80084bc <CDC_Receive_FS+0xcc>)
 8008446:	f000 fd0d 	bl	8008e64 <strtoul>
 800844a:	6138      	str	r0, [r7, #16]
					 unsigned long off_ms = strtoul(comma+1 , NULL, 10);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	3301      	adds	r3, #1
 8008450:	220a      	movs	r2, #10
 8008452:	2100      	movs	r1, #0
 8008454:	4618      	mov	r0, r3
 8008456:	f000 fd05 	bl	8008e64 <strtoul>
 800845a:	60f8      	str	r0, [r7, #12]

					 Led_SetTimings((uint32_t)on_ms, (uint32_t)off_ms);
 800845c:	68f9      	ldr	r1, [r7, #12]
 800845e:	6938      	ldr	r0, [r7, #16]
 8008460:	f7f7 ff3a 	bl	80002d8 <Led_SetTimings>

				 }
			}
			lidx=0;
 8008464:	4b14      	ldr	r3, [pc, #80]	@ (80084b8 <CDC_Receive_FS+0xc8>)
 8008466:	2200      	movs	r2, #0
 8008468:	701a      	strb	r2, [r3, #0]
 800846a:	e011      	b.n	8008490 <CDC_Receive_FS+0xa0>
		}
		else
		{
			if(lidx<sizeof(linebuf)-1)
 800846c:	4b12      	ldr	r3, [pc, #72]	@ (80084b8 <CDC_Receive_FS+0xc8>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b1e      	cmp	r3, #30
 8008472:	d80a      	bhi.n	800848a <CDC_Receive_FS+0x9a>
			{
				linebuf[lidx++]=c;
 8008474:	4b10      	ldr	r3, [pc, #64]	@ (80084b8 <CDC_Receive_FS+0xc8>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	1c5a      	adds	r2, r3, #1
 800847a:	b2d1      	uxtb	r1, r2
 800847c:	4a0e      	ldr	r2, [pc, #56]	@ (80084b8 <CDC_Receive_FS+0xc8>)
 800847e:	7011      	strb	r1, [r2, #0]
 8008480:	4619      	mov	r1, r3
 8008482:	4a0e      	ldr	r2, [pc, #56]	@ (80084bc <CDC_Receive_FS+0xcc>)
 8008484:	7efb      	ldrb	r3, [r7, #27]
 8008486:	5453      	strb	r3, [r2, r1]
 8008488:	e002      	b.n	8008490 <CDC_Receive_FS+0xa0>
			}
			else
			{
				lidx=0;
 800848a:	4b0b      	ldr	r3, [pc, #44]	@ (80084b8 <CDC_Receive_FS+0xc8>)
 800848c:	2200      	movs	r2, #0
 800848e:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i< *Len; i++)
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	3301      	adds	r3, #1
 8008494:	61fb      	str	r3, [r7, #28]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	69fa      	ldr	r2, [r7, #28]
 800849c:	429a      	cmp	r2, r3
 800849e:	d3af      	bcc.n	8008400 <CDC_Receive_FS+0x10>


	}


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084a0:	6879      	ldr	r1, [r7, #4]
 80084a2:	4807      	ldr	r0, [pc, #28]	@ (80084c0 <CDC_Receive_FS+0xd0>)
 80084a4:	f7fe fb78 	bl	8006b98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084a8:	4805      	ldr	r0, [pc, #20]	@ (80084c0 <CDC_Receive_FS+0xd0>)
 80084aa:	f7fe fb93 	bl	8006bd4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80084ae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3720      	adds	r7, #32
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	24001488 	.word	0x24001488
 80084bc:	24001468 	.word	0x24001468
 80084c0:	2400018c 	.word	0x2400018c

080084c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	4613      	mov	r3, r2
 80084d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80084d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
	...

080084e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4603      	mov	r3, r0
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2212      	movs	r2, #18
 80084f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084fa:	4b03      	ldr	r3, [pc, #12]	@ (8008508 <USBD_FS_DeviceDescriptor+0x20>)
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	240000dc 	.word	0x240000dc

0800850c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	6039      	str	r1, [r7, #0]
 8008516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2204      	movs	r2, #4
 800851c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800851e:	4b03      	ldr	r3, [pc, #12]	@ (800852c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008520:	4618      	mov	r0, r3
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	240000f0 	.word	0x240000f0

08008530 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	4603      	mov	r3, r0
 8008538:	6039      	str	r1, [r7, #0]
 800853a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800853c:	79fb      	ldrb	r3, [r7, #7]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d105      	bne.n	800854e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	4907      	ldr	r1, [pc, #28]	@ (8008564 <USBD_FS_ProductStrDescriptor+0x34>)
 8008546:	4808      	ldr	r0, [pc, #32]	@ (8008568 <USBD_FS_ProductStrDescriptor+0x38>)
 8008548:	f7ff fdba 	bl	80080c0 <USBD_GetString>
 800854c:	e004      	b.n	8008558 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	4904      	ldr	r1, [pc, #16]	@ (8008564 <USBD_FS_ProductStrDescriptor+0x34>)
 8008552:	4805      	ldr	r0, [pc, #20]	@ (8008568 <USBD_FS_ProductStrDescriptor+0x38>)
 8008554:	f7ff fdb4 	bl	80080c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008558:	4b02      	ldr	r3, [pc, #8]	@ (8008564 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	2400148c 	.word	0x2400148c
 8008568:	08008f04 	.word	0x08008f04

0800856c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	4603      	mov	r3, r0
 8008574:	6039      	str	r1, [r7, #0]
 8008576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008578:	683a      	ldr	r2, [r7, #0]
 800857a:	4904      	ldr	r1, [pc, #16]	@ (800858c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800857c:	4804      	ldr	r0, [pc, #16]	@ (8008590 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800857e:	f7ff fd9f 	bl	80080c0 <USBD_GetString>
  return USBD_StrDesc;
 8008582:	4b02      	ldr	r3, [pc, #8]	@ (800858c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008584:	4618      	mov	r0, r3
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	2400148c 	.word	0x2400148c
 8008590:	08008f1c 	.word	0x08008f1c

08008594 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	4603      	mov	r3, r0
 800859c:	6039      	str	r1, [r7, #0]
 800859e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	221a      	movs	r2, #26
 80085a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085a6:	f000 f843 	bl	8008630 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085aa:	4b02      	ldr	r3, [pc, #8]	@ (80085b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	240000f4 	.word	0x240000f4

080085b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	4603      	mov	r3, r0
 80085c0:	6039      	str	r1, [r7, #0]
 80085c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d105      	bne.n	80085d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	4907      	ldr	r1, [pc, #28]	@ (80085ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80085ce:	4808      	ldr	r0, [pc, #32]	@ (80085f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085d0:	f7ff fd76 	bl	80080c0 <USBD_GetString>
 80085d4:	e004      	b.n	80085e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	4904      	ldr	r1, [pc, #16]	@ (80085ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80085da:	4805      	ldr	r0, [pc, #20]	@ (80085f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085dc:	f7ff fd70 	bl	80080c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085e0:	4b02      	ldr	r3, [pc, #8]	@ (80085ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	2400148c 	.word	0x2400148c
 80085f0:	08008f30 	.word	0x08008f30

080085f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	4603      	mov	r3, r0
 80085fc:	6039      	str	r1, [r7, #0]
 80085fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008600:	79fb      	ldrb	r3, [r7, #7]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d105      	bne.n	8008612 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	4907      	ldr	r1, [pc, #28]	@ (8008628 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800860a:	4808      	ldr	r0, [pc, #32]	@ (800862c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800860c:	f7ff fd58 	bl	80080c0 <USBD_GetString>
 8008610:	e004      	b.n	800861c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	4904      	ldr	r1, [pc, #16]	@ (8008628 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008616:	4805      	ldr	r0, [pc, #20]	@ (800862c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008618:	f7ff fd52 	bl	80080c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800861c:	4b02      	ldr	r3, [pc, #8]	@ (8008628 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	2400148c 	.word	0x2400148c
 800862c:	08008f3c 	.word	0x08008f3c

08008630 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008636:	4b0f      	ldr	r3, [pc, #60]	@ (8008674 <Get_SerialNum+0x44>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800863c:	4b0e      	ldr	r3, [pc, #56]	@ (8008678 <Get_SerialNum+0x48>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008642:	4b0e      	ldr	r3, [pc, #56]	@ (800867c <Get_SerialNum+0x4c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4413      	add	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d009      	beq.n	800866a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008656:	2208      	movs	r2, #8
 8008658:	4909      	ldr	r1, [pc, #36]	@ (8008680 <Get_SerialNum+0x50>)
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f000 f814 	bl	8008688 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008660:	2204      	movs	r2, #4
 8008662:	4908      	ldr	r1, [pc, #32]	@ (8008684 <Get_SerialNum+0x54>)
 8008664:	68b8      	ldr	r0, [r7, #8]
 8008666:	f000 f80f 	bl	8008688 <IntToUnicode>
  }
}
 800866a:	bf00      	nop
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	1ff1e800 	.word	0x1ff1e800
 8008678:	1ff1e804 	.word	0x1ff1e804
 800867c:	1ff1e808 	.word	0x1ff1e808
 8008680:	240000f6 	.word	0x240000f6
 8008684:	24000106 	.word	0x24000106

08008688 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	4613      	mov	r3, r2
 8008694:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800869a:	2300      	movs	r3, #0
 800869c:	75fb      	strb	r3, [r7, #23]
 800869e:	e027      	b.n	80086f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	0f1b      	lsrs	r3, r3, #28
 80086a4:	2b09      	cmp	r3, #9
 80086a6:	d80b      	bhi.n	80086c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	0f1b      	lsrs	r3, r3, #28
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	4619      	mov	r1, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	440b      	add	r3, r1
 80086b8:	3230      	adds	r2, #48	@ 0x30
 80086ba:	b2d2      	uxtb	r2, r2
 80086bc:	701a      	strb	r2, [r3, #0]
 80086be:	e00a      	b.n	80086d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	0f1b      	lsrs	r3, r3, #28
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	4619      	mov	r1, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	440b      	add	r3, r1
 80086d0:	3237      	adds	r2, #55	@ 0x37
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086dc:	7dfb      	ldrb	r3, [r7, #23]
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	3301      	adds	r3, #1
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	4413      	add	r3, r2
 80086e6:	2200      	movs	r2, #0
 80086e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	3301      	adds	r3, #1
 80086ee:	75fb      	strb	r3, [r7, #23]
 80086f0:	7dfa      	ldrb	r2, [r7, #23]
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d3d3      	bcc.n	80086a0 <IntToUnicode+0x18>
  }
}
 80086f8:	bf00      	nop
 80086fa:	bf00      	nop
 80086fc:	371c      	adds	r7, #28
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
	...

08008708 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b0ba      	sub	sp, #232	@ 0xe8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008710:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]
 8008718:	605a      	str	r2, [r3, #4]
 800871a:	609a      	str	r2, [r3, #8]
 800871c:	60da      	str	r2, [r3, #12]
 800871e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008720:	f107 0310 	add.w	r3, r7, #16
 8008724:	22c0      	movs	r2, #192	@ 0xc0
 8008726:	2100      	movs	r1, #0
 8008728:	4618      	mov	r0, r3
 800872a:	f000 fba5 	bl	8008e78 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a30      	ldr	r2, [pc, #192]	@ (80087f4 <HAL_PCD_MspInit+0xec>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d159      	bne.n	80087ec <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008738:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800873c:	f04f 0300 	mov.w	r3, #0
 8008740:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008744:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8008748:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800874c:	f107 0310 	add.w	r3, r7, #16
 8008750:	4618      	mov	r0, r3
 8008752:	f7fa ff1f 	bl	8003594 <HAL_RCCEx_PeriphCLKConfig>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800875c:	f7f7 ff1a 	bl	8000594 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8008760:	f7f9 ff4e 	bl	8002600 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008764:	4b24      	ldr	r3, [pc, #144]	@ (80087f8 <HAL_PCD_MspInit+0xf0>)
 8008766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800876a:	4a23      	ldr	r2, [pc, #140]	@ (80087f8 <HAL_PCD_MspInit+0xf0>)
 800876c:	f043 0301 	orr.w	r3, r3, #1
 8008770:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008774:	4b20      	ldr	r3, [pc, #128]	@ (80087f8 <HAL_PCD_MspInit+0xf0>)
 8008776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008782:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008786:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800878a:	2302      	movs	r3, #2
 800878c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008790:	2300      	movs	r3, #0
 8008792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008796:	2300      	movs	r3, #0
 8008798:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800879c:	230a      	movs	r3, #10
 800879e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087a2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80087a6:	4619      	mov	r1, r3
 80087a8:	4814      	ldr	r0, [pc, #80]	@ (80087fc <HAL_PCD_MspInit+0xf4>)
 80087aa:	f7f8 fa85 	bl	8000cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80087ae:	4b12      	ldr	r3, [pc, #72]	@ (80087f8 <HAL_PCD_MspInit+0xf0>)
 80087b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80087b4:	4a10      	ldr	r2, [pc, #64]	@ (80087f8 <HAL_PCD_MspInit+0xf0>)
 80087b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80087ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80087be:	4b0e      	ldr	r3, [pc, #56]	@ (80087f8 <HAL_PCD_MspInit+0xf0>)
 80087c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80087c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087c8:	60bb      	str	r3, [r7, #8]
 80087ca:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 80087cc:	2200      	movs	r2, #0
 80087ce:	2100      	movs	r1, #0
 80087d0:	2063      	movs	r0, #99	@ 0x63
 80087d2:	f7f8 f9c4 	bl	8000b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 80087d6:	2063      	movs	r0, #99	@ 0x63
 80087d8:	f7f8 f9db 	bl	8000b92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80087dc:	2200      	movs	r2, #0
 80087de:	2100      	movs	r1, #0
 80087e0:	2065      	movs	r0, #101	@ 0x65
 80087e2:	f7f8 f9bc 	bl	8000b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80087e6:	2065      	movs	r0, #101	@ 0x65
 80087e8:	f7f8 f9d3 	bl	8000b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087ec:	bf00      	nop
 80087ee:	37e8      	adds	r7, #232	@ 0xe8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	40080000 	.word	0x40080000
 80087f8:	58024400 	.word	0x58024400
 80087fc:	58020000 	.word	0x58020000

08008800 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008814:	4619      	mov	r1, r3
 8008816:	4610      	mov	r0, r2
 8008818:	f7fe fac5 	bl	8006da6 <USBD_LL_SetupStage>
}
 800881c:	bf00      	nop
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	460b      	mov	r3, r1
 800882e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008836:	78fa      	ldrb	r2, [r7, #3]
 8008838:	6879      	ldr	r1, [r7, #4]
 800883a:	4613      	mov	r3, r2
 800883c:	00db      	lsls	r3, r3, #3
 800883e:	4413      	add	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	440b      	add	r3, r1
 8008844:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	78fb      	ldrb	r3, [r7, #3]
 800884c:	4619      	mov	r1, r3
 800884e:	f7fe faff 	bl	8006e50 <USBD_LL_DataOutStage>
}
 8008852:	bf00      	nop
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b082      	sub	sp, #8
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	460b      	mov	r3, r1
 8008864:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800886c:	78fa      	ldrb	r2, [r7, #3]
 800886e:	6879      	ldr	r1, [r7, #4]
 8008870:	4613      	mov	r3, r2
 8008872:	00db      	lsls	r3, r3, #3
 8008874:	4413      	add	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	440b      	add	r3, r1
 800887a:	3320      	adds	r3, #32
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	78fb      	ldrb	r3, [r7, #3]
 8008880:	4619      	mov	r1, r3
 8008882:	f7fe fb98 	bl	8006fb6 <USBD_LL_DataInStage>
}
 8008886:	bf00      	nop
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800889c:	4618      	mov	r0, r3
 800889e:	f7fe fcd2 	bl	8007246 <USBD_LL_SOF>
}
 80088a2:	bf00      	nop
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088b2:	2301      	movs	r3, #1
 80088b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	79db      	ldrb	r3, [r3, #7]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d102      	bne.n	80088c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80088be:	2300      	movs	r3, #0
 80088c0:	73fb      	strb	r3, [r7, #15]
 80088c2:	e008      	b.n	80088d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	79db      	ldrb	r3, [r3, #7]
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d102      	bne.n	80088d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80088cc:	2301      	movs	r3, #1
 80088ce:	73fb      	strb	r3, [r7, #15]
 80088d0:	e001      	b.n	80088d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80088d2:	f7f7 fe5f 	bl	8000594 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088dc:	7bfa      	ldrb	r2, [r7, #15]
 80088de:	4611      	mov	r1, r2
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fe fc6c 	bl	80071be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fe fc14 	bl	800711a <USBD_LL_Reset>
}
 80088f2:	bf00      	nop
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
	...

080088fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe fc67 	bl	80071de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	6812      	ldr	r2, [r2, #0]
 800891e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008922:	f043 0301 	orr.w	r3, r3, #1
 8008926:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	7adb      	ldrb	r3, [r3, #11]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d005      	beq.n	800893c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008930:	4b04      	ldr	r3, [pc, #16]	@ (8008944 <HAL_PCD_SuspendCallback+0x48>)
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	4a03      	ldr	r2, [pc, #12]	@ (8008944 <HAL_PCD_SuspendCallback+0x48>)
 8008936:	f043 0306 	orr.w	r3, r3, #6
 800893a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800893c:	bf00      	nop
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	e000ed00 	.word	0xe000ed00

08008948 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe fc5d 	bl	8007216 <USBD_LL_Resume>
}
 800895c:	bf00      	nop
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008976:	78fa      	ldrb	r2, [r7, #3]
 8008978:	4611      	mov	r1, r2
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe fcb5 	bl	80072ea <USBD_LL_IsoOUTIncomplete>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800899a:	78fa      	ldrb	r2, [r7, #3]
 800899c:	4611      	mov	r1, r2
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe fc71 	bl	8007286 <USBD_LL_IsoINIncomplete>
}
 80089a4:	bf00      	nop
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fe fcc7 	bl	800734e <USBD_LL_DevConnected>
}
 80089c0:	bf00      	nop
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe fcc4 	bl	8007364 <USBD_LL_DevDisconnected>
}
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d13e      	bne.n	8008a72 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80089f4:	4a21      	ldr	r2, [pc, #132]	@ (8008a7c <USBD_LL_Init+0x98>)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a1f      	ldr	r2, [pc, #124]	@ (8008a7c <USBD_LL_Init+0x98>)
 8008a00:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a04:	4b1d      	ldr	r3, [pc, #116]	@ (8008a7c <USBD_LL_Init+0x98>)
 8008a06:	4a1e      	ldr	r2, [pc, #120]	@ (8008a80 <USBD_LL_Init+0x9c>)
 8008a08:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8008a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8008a7c <USBD_LL_Init+0x98>)
 8008a0c:	2209      	movs	r2, #9
 8008a0e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a10:	4b1a      	ldr	r3, [pc, #104]	@ (8008a7c <USBD_LL_Init+0x98>)
 8008a12:	2202      	movs	r2, #2
 8008a14:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a16:	4b19      	ldr	r3, [pc, #100]	@ (8008a7c <USBD_LL_Init+0x98>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a1c:	4b17      	ldr	r3, [pc, #92]	@ (8008a7c <USBD_LL_Init+0x98>)
 8008a1e:	2202      	movs	r2, #2
 8008a20:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a22:	4b16      	ldr	r3, [pc, #88]	@ (8008a7c <USBD_LL_Init+0x98>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a28:	4b14      	ldr	r3, [pc, #80]	@ (8008a7c <USBD_LL_Init+0x98>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a2e:	4b13      	ldr	r3, [pc, #76]	@ (8008a7c <USBD_LL_Init+0x98>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008a34:	4b11      	ldr	r3, [pc, #68]	@ (8008a7c <USBD_LL_Init+0x98>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008a3a:	4b10      	ldr	r3, [pc, #64]	@ (8008a7c <USBD_LL_Init+0x98>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a40:	4b0e      	ldr	r3, [pc, #56]	@ (8008a7c <USBD_LL_Init+0x98>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a46:	480d      	ldr	r0, [pc, #52]	@ (8008a7c <USBD_LL_Init+0x98>)
 8008a48:	f7f8 faff 	bl	800104a <HAL_PCD_Init>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8008a52:	f7f7 fd9f 	bl	8000594 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a56:	2180      	movs	r1, #128	@ 0x80
 8008a58:	4808      	ldr	r0, [pc, #32]	@ (8008a7c <USBD_LL_Init+0x98>)
 8008a5a:	f7f9 fd56 	bl	800250a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a5e:	2240      	movs	r2, #64	@ 0x40
 8008a60:	2100      	movs	r1, #0
 8008a62:	4806      	ldr	r0, [pc, #24]	@ (8008a7c <USBD_LL_Init+0x98>)
 8008a64:	f7f9 fd0a 	bl	800247c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a68:	2280      	movs	r2, #128	@ 0x80
 8008a6a:	2101      	movs	r1, #1
 8008a6c:	4803      	ldr	r0, [pc, #12]	@ (8008a7c <USBD_LL_Init+0x98>)
 8008a6e:	f7f9 fd05 	bl	800247c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	2400168c 	.word	0x2400168c
 8008a80:	40080000 	.word	0x40080000

08008a84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a90:	2300      	movs	r3, #0
 8008a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7f8 fbe1 	bl	8001262 <HAL_PCD_Start>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 f942 	bl	8008d30 <USBD_Get_USB_Status>
 8008aac:	4603      	mov	r3, r0
 8008aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	4608      	mov	r0, r1
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	4603      	mov	r3, r0
 8008aca:	70fb      	strb	r3, [r7, #3]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70bb      	strb	r3, [r7, #2]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008ae2:	78bb      	ldrb	r3, [r7, #2]
 8008ae4:	883a      	ldrh	r2, [r7, #0]
 8008ae6:	78f9      	ldrb	r1, [r7, #3]
 8008ae8:	f7f9 f8e2 	bl	8001cb0 <HAL_PCD_EP_Open>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 f91c 	bl	8008d30 <USBD_Get_USB_Status>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b20:	78fa      	ldrb	r2, [r7, #3]
 8008b22:	4611      	mov	r1, r2
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7f9 f92d 	bl	8001d84 <HAL_PCD_EP_Close>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 f8fd 	bl	8008d30 <USBD_Get_USB_Status>
 8008b36:	4603      	mov	r3, r0
 8008b38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b5e:	78fa      	ldrb	r2, [r7, #3]
 8008b60:	4611      	mov	r1, r2
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7f9 f9e5 	bl	8001f32 <HAL_PCD_EP_SetStall>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 f8de 	bl	8008d30 <USBD_Get_USB_Status>
 8008b74:	4603      	mov	r3, r0
 8008b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b084      	sub	sp, #16
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b9c:	78fa      	ldrb	r2, [r7, #3]
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7f9 fa29 	bl	8001ff8 <HAL_PCD_EP_ClrStall>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 f8bf 	bl	8008d30 <USBD_Get_USB_Status>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008bd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	da0b      	bge.n	8008bf4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bdc:	78fb      	ldrb	r3, [r7, #3]
 8008bde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008be2:	68f9      	ldr	r1, [r7, #12]
 8008be4:	4613      	mov	r3, r2
 8008be6:	00db      	lsls	r3, r3, #3
 8008be8:	4413      	add	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	440b      	add	r3, r1
 8008bee:	3316      	adds	r3, #22
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	e00b      	b.n	8008c0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bf4:	78fb      	ldrb	r3, [r7, #3]
 8008bf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bfa:	68f9      	ldr	r1, [r7, #12]
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	00db      	lsls	r3, r3, #3
 8008c00:	4413      	add	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	440b      	add	r3, r1
 8008c06:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008c0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	4611      	mov	r1, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7f9 f816 	bl	8001c68 <HAL_PCD_SetAddress>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 f874 	bl	8008d30 <USBD_Get_USB_Status>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b086      	sub	sp, #24
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	60f8      	str	r0, [r7, #12]
 8008c5e:	607a      	str	r2, [r7, #4]
 8008c60:	603b      	str	r3, [r7, #0]
 8008c62:	460b      	mov	r3, r1
 8008c64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008c74:	7af9      	ldrb	r1, [r7, #11]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	f7f9 f920 	bl	8001ebe <HAL_PCD_EP_Transmit>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c82:	7dfb      	ldrb	r3, [r7, #23]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 f853 	bl	8008d30 <USBD_Get_USB_Status>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	607a      	str	r2, [r7, #4]
 8008ca2:	603b      	str	r3, [r7, #0]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008cb6:	7af9      	ldrb	r1, [r7, #11]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	f7f9 f8ac 	bl	8001e18 <HAL_PCD_EP_Receive>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 f832 	bl	8008d30 <USBD_Get_USB_Status>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3718      	adds	r7, #24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b082      	sub	sp, #8
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cec:	78fa      	ldrb	r2, [r7, #3]
 8008cee:	4611      	mov	r1, r2
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7f9 f8cc 	bl	8001e8e <HAL_PCD_EP_GetRxCount>
 8008cf6:	4603      	mov	r3, r0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d08:	4b03      	ldr	r3, [pc, #12]	@ (8008d18 <USBD_static_malloc+0x18>)
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	24001b70 	.word	0x24001b70

08008d1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d3e:	79fb      	ldrb	r3, [r7, #7]
 8008d40:	2b03      	cmp	r3, #3
 8008d42:	d817      	bhi.n	8008d74 <USBD_Get_USB_Status+0x44>
 8008d44:	a201      	add	r2, pc, #4	@ (adr r2, 8008d4c <USBD_Get_USB_Status+0x1c>)
 8008d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4a:	bf00      	nop
 8008d4c:	08008d5d 	.word	0x08008d5d
 8008d50:	08008d63 	.word	0x08008d63
 8008d54:	08008d69 	.word	0x08008d69
 8008d58:	08008d6f 	.word	0x08008d6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d60:	e00b      	b.n	8008d7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d62:	2303      	movs	r3, #3
 8008d64:	73fb      	strb	r3, [r7, #15]
    break;
 8008d66:	e008      	b.n	8008d7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d6c:	e005      	b.n	8008d7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	73fb      	strb	r3, [r7, #15]
    break;
 8008d72:	e002      	b.n	8008d7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d74:	2303      	movs	r3, #3
 8008d76:	73fb      	strb	r3, [r7, #15]
    break;
 8008d78:	bf00      	nop
  }
  return usb_status;
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <_strtoul_l.isra.0>:
 8008d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d8c:	4e34      	ldr	r6, [pc, #208]	@ (8008e60 <_strtoul_l.isra.0+0xd8>)
 8008d8e:	4686      	mov	lr, r0
 8008d90:	460d      	mov	r5, r1
 8008d92:	4628      	mov	r0, r5
 8008d94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d98:	5d37      	ldrb	r7, [r6, r4]
 8008d9a:	f017 0708 	ands.w	r7, r7, #8
 8008d9e:	d1f8      	bne.n	8008d92 <_strtoul_l.isra.0+0xa>
 8008da0:	2c2d      	cmp	r4, #45	@ 0x2d
 8008da2:	d110      	bne.n	8008dc6 <_strtoul_l.isra.0+0x3e>
 8008da4:	782c      	ldrb	r4, [r5, #0]
 8008da6:	2701      	movs	r7, #1
 8008da8:	1c85      	adds	r5, r0, #2
 8008daa:	f033 0010 	bics.w	r0, r3, #16
 8008dae:	d115      	bne.n	8008ddc <_strtoul_l.isra.0+0x54>
 8008db0:	2c30      	cmp	r4, #48	@ 0x30
 8008db2:	d10d      	bne.n	8008dd0 <_strtoul_l.isra.0+0x48>
 8008db4:	7828      	ldrb	r0, [r5, #0]
 8008db6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008dba:	2858      	cmp	r0, #88	@ 0x58
 8008dbc:	d108      	bne.n	8008dd0 <_strtoul_l.isra.0+0x48>
 8008dbe:	786c      	ldrb	r4, [r5, #1]
 8008dc0:	3502      	adds	r5, #2
 8008dc2:	2310      	movs	r3, #16
 8008dc4:	e00a      	b.n	8008ddc <_strtoul_l.isra.0+0x54>
 8008dc6:	2c2b      	cmp	r4, #43	@ 0x2b
 8008dc8:	bf04      	itt	eq
 8008dca:	782c      	ldrbeq	r4, [r5, #0]
 8008dcc:	1c85      	addeq	r5, r0, #2
 8008dce:	e7ec      	b.n	8008daa <_strtoul_l.isra.0+0x22>
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1f6      	bne.n	8008dc2 <_strtoul_l.isra.0+0x3a>
 8008dd4:	2c30      	cmp	r4, #48	@ 0x30
 8008dd6:	bf14      	ite	ne
 8008dd8:	230a      	movne	r3, #10
 8008dda:	2308      	moveq	r3, #8
 8008ddc:	f04f 38ff 	mov.w	r8, #4294967295
 8008de0:	2600      	movs	r6, #0
 8008de2:	fbb8 f8f3 	udiv	r8, r8, r3
 8008de6:	fb03 f908 	mul.w	r9, r3, r8
 8008dea:	ea6f 0909 	mvn.w	r9, r9
 8008dee:	4630      	mov	r0, r6
 8008df0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008df4:	f1bc 0f09 	cmp.w	ip, #9
 8008df8:	d810      	bhi.n	8008e1c <_strtoul_l.isra.0+0x94>
 8008dfa:	4664      	mov	r4, ip
 8008dfc:	42a3      	cmp	r3, r4
 8008dfe:	dd1e      	ble.n	8008e3e <_strtoul_l.isra.0+0xb6>
 8008e00:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008e04:	d007      	beq.n	8008e16 <_strtoul_l.isra.0+0x8e>
 8008e06:	4580      	cmp	r8, r0
 8008e08:	d316      	bcc.n	8008e38 <_strtoul_l.isra.0+0xb0>
 8008e0a:	d101      	bne.n	8008e10 <_strtoul_l.isra.0+0x88>
 8008e0c:	45a1      	cmp	r9, r4
 8008e0e:	db13      	blt.n	8008e38 <_strtoul_l.isra.0+0xb0>
 8008e10:	fb00 4003 	mla	r0, r0, r3, r4
 8008e14:	2601      	movs	r6, #1
 8008e16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e1a:	e7e9      	b.n	8008df0 <_strtoul_l.isra.0+0x68>
 8008e1c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008e20:	f1bc 0f19 	cmp.w	ip, #25
 8008e24:	d801      	bhi.n	8008e2a <_strtoul_l.isra.0+0xa2>
 8008e26:	3c37      	subs	r4, #55	@ 0x37
 8008e28:	e7e8      	b.n	8008dfc <_strtoul_l.isra.0+0x74>
 8008e2a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008e2e:	f1bc 0f19 	cmp.w	ip, #25
 8008e32:	d804      	bhi.n	8008e3e <_strtoul_l.isra.0+0xb6>
 8008e34:	3c57      	subs	r4, #87	@ 0x57
 8008e36:	e7e1      	b.n	8008dfc <_strtoul_l.isra.0+0x74>
 8008e38:	f04f 36ff 	mov.w	r6, #4294967295
 8008e3c:	e7eb      	b.n	8008e16 <_strtoul_l.isra.0+0x8e>
 8008e3e:	1c73      	adds	r3, r6, #1
 8008e40:	d106      	bne.n	8008e50 <_strtoul_l.isra.0+0xc8>
 8008e42:	2322      	movs	r3, #34	@ 0x22
 8008e44:	f8ce 3000 	str.w	r3, [lr]
 8008e48:	4630      	mov	r0, r6
 8008e4a:	b932      	cbnz	r2, 8008e5a <_strtoul_l.isra.0+0xd2>
 8008e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e50:	b107      	cbz	r7, 8008e54 <_strtoul_l.isra.0+0xcc>
 8008e52:	4240      	negs	r0, r0
 8008e54:	2a00      	cmp	r2, #0
 8008e56:	d0f9      	beq.n	8008e4c <_strtoul_l.isra.0+0xc4>
 8008e58:	b106      	cbz	r6, 8008e5c <_strtoul_l.isra.0+0xd4>
 8008e5a:	1e69      	subs	r1, r5, #1
 8008e5c:	6011      	str	r1, [r2, #0]
 8008e5e:	e7f5      	b.n	8008e4c <_strtoul_l.isra.0+0xc4>
 8008e60:	08008f5d 	.word	0x08008f5d

08008e64 <strtoul>:
 8008e64:	4613      	mov	r3, r2
 8008e66:	460a      	mov	r2, r1
 8008e68:	4601      	mov	r1, r0
 8008e6a:	4802      	ldr	r0, [pc, #8]	@ (8008e74 <strtoul+0x10>)
 8008e6c:	6800      	ldr	r0, [r0, #0]
 8008e6e:	f7ff bf8b 	b.w	8008d88 <_strtoul_l.isra.0>
 8008e72:	bf00      	nop
 8008e74:	24000110 	.word	0x24000110

08008e78 <memset>:
 8008e78:	4402      	add	r2, r0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d100      	bne.n	8008e82 <memset+0xa>
 8008e80:	4770      	bx	lr
 8008e82:	f803 1b01 	strb.w	r1, [r3], #1
 8008e86:	e7f9      	b.n	8008e7c <memset+0x4>

08008e88 <strchr>:
 8008e88:	b2c9      	uxtb	r1, r1
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e92:	b112      	cbz	r2, 8008e9a <strchr+0x12>
 8008e94:	428a      	cmp	r2, r1
 8008e96:	d1f9      	bne.n	8008e8c <strchr+0x4>
 8008e98:	4770      	bx	lr
 8008e9a:	2900      	cmp	r1, #0
 8008e9c:	bf18      	it	ne
 8008e9e:	2000      	movne	r0, #0
 8008ea0:	4770      	bx	lr
	...

08008ea4 <__libc_init_array>:
 8008ea4:	b570      	push	{r4, r5, r6, lr}
 8008ea6:	4d0d      	ldr	r5, [pc, #52]	@ (8008edc <__libc_init_array+0x38>)
 8008ea8:	4c0d      	ldr	r4, [pc, #52]	@ (8008ee0 <__libc_init_array+0x3c>)
 8008eaa:	1b64      	subs	r4, r4, r5
 8008eac:	10a4      	asrs	r4, r4, #2
 8008eae:	2600      	movs	r6, #0
 8008eb0:	42a6      	cmp	r6, r4
 8008eb2:	d109      	bne.n	8008ec8 <__libc_init_array+0x24>
 8008eb4:	4d0b      	ldr	r5, [pc, #44]	@ (8008ee4 <__libc_init_array+0x40>)
 8008eb6:	4c0c      	ldr	r4, [pc, #48]	@ (8008ee8 <__libc_init_array+0x44>)
 8008eb8:	f000 f818 	bl	8008eec <_init>
 8008ebc:	1b64      	subs	r4, r4, r5
 8008ebe:	10a4      	asrs	r4, r4, #2
 8008ec0:	2600      	movs	r6, #0
 8008ec2:	42a6      	cmp	r6, r4
 8008ec4:	d105      	bne.n	8008ed2 <__libc_init_array+0x2e>
 8008ec6:	bd70      	pop	{r4, r5, r6, pc}
 8008ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ecc:	4798      	blx	r3
 8008ece:	3601      	adds	r6, #1
 8008ed0:	e7ee      	b.n	8008eb0 <__libc_init_array+0xc>
 8008ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ed6:	4798      	blx	r3
 8008ed8:	3601      	adds	r6, #1
 8008eda:	e7f2      	b.n	8008ec2 <__libc_init_array+0x1e>
 8008edc:	08009060 	.word	0x08009060
 8008ee0:	08009060 	.word	0x08009060
 8008ee4:	08009060 	.word	0x08009060
 8008ee8:	08009064 	.word	0x08009064

08008eec <_init>:
 8008eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eee:	bf00      	nop
 8008ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ef2:	bc08      	pop	{r3}
 8008ef4:	469e      	mov	lr, r3
 8008ef6:	4770      	bx	lr

08008ef8 <_fini>:
 8008ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efa:	bf00      	nop
 8008efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008efe:	bc08      	pop	{r3}
 8008f00:	469e      	mov	lr, r3
 8008f02:	4770      	bx	lr
